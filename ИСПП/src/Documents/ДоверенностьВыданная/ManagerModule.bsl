#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает срок действия последней введенной ответственным в систему доверенности
//
// Возвращаемое значение:
//	Число - срок действия последней доверенности
//
Функция ПолучитьСрокДействияПоследнейДоверенности() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Доверенность.СрокДействия КАК СрокДействия
		|ИЗ
		|	Документ.ДоверенностьВыданная КАК Доверенность
		|ГДЕ
		|	НЕ Доверенность.ПометкаУдаления
		|	И Доверенность.Ответственный = &Ответственный
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|");
		
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СрокДействия;
	КонецЕсли;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыДоверенностей[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ИСТИНА КАК Проведен, // Для документа доверенности свойство <Проведенение> установлено в <Запретить>
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Дополнительные проверки для доверенности отсутствуют
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Функция ДоверенностиПоЗаказам(МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доверенность.Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенность
	|ГДЕ
	|	НЕ Доверенность.ПометкаУдаления
	|	И Доверенность.ДокументОснование В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);

КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюПоддержкаПроектов.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	МенеджерПечати      = МетаданныеДокумента.ПолноеИмя();
	МетаданныеМакетов   = МетаданныеДокумента.Макеты;
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "М2", МенеджерПечати);
	ПечатнаяФорма.Представление = НСтр("ru = 'Доверенность на получение ТМЦ (М-2)'");
	ПечатнаяФорма.ПутьКМакету = "Документ.ДоверенностьВыданная.ПФ_MXL_М2";
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "М2а", МенеджерПечати);
	ПечатнаяФорма.Представление = НСтр("ru = 'Доверенность на получение ТМЦ (М-2а)'");
	ПечатнаяФорма.ПутьКМакету = "Документ.ДоверенностьВыданная.ПФ_MXL_М2";
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ПечатьМ2(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доверенность.Ссылка КАК Ссылка,
	|	Доверенность.Номер КАК Номер,
	|	Доверенность.Дата КАК ДатаДокумента,
	|	Доверенность.Организация КАК Организация,
	|	Доверенность.Организация.Префикс КАК Префикс,
	|	ТаблицаОтветственныеЛица.РуководительНаименование  КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	Доверенность.ФизЛицо.Наименование КАК ФизЛицо,
	|	Доверенность.ПоДокументу КАК РеквизитыДокументаНаПолучение,
	|	Доверенность.ДатаОкончанияДействия КАК СрокДействия,
	|	Доверенность.Должность КАК Должность,
	|	Доверенность.Ответственный.Наименование КАК Ответственный,
	|	Доверенность.БанковскийСчет КАК БанковскийСчет,
	|	Доверенность.Контрагент.НаименованиеПолное КАК ПоставщикПредставление,
	|	Доверенность.ДокументОснование КАК ДокументОснование,
	|	Доверенность.ДокументОснование.Номер КАК НомерОснования,
	|	Доверенность.ДокументОснование.Дата КАК ДатаОснования,
	|	Доверенность.ДокументОснование.Организация.Префикс КАК ПрефиксОснования,
	|	Доверенность.Товары.(
	|		НомерСтроки КАК Номер,
	|		ПРЕДСТАВЛЕНИЕ(Доверенность.Товары.НоменклатураПоставщика) КАК НоменклатураПоставщика,
	|		Номенклатура.НаименованиеПолное КАК Номенклатура,
	|		Номенклатура.Описание КАК Описание,
	|		Доверенность.Товары.ЕдиницаИзмерения.Наименование КАК Упаковка,
	|		Доверенность.Товары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияПредставление,
	|		Количество КАК КоличествоУпаковок
	|	),
	|	Доверенность.ВидДокументаФизЛица КАК ВидДокумента,
	|	Доверенность.СерияДокументаФизЛица КАК ПаспортСерия,
	|	Доверенность.НомерДокументаФизЛица КАК ПаспортНомер,
	|	Доверенность.КемВыданДокументФизлица КАК ПаспортВыдан,
	|	Доверенность.ДатаВыдачиДокументаФизЛица КАК ПаспортДатаВыдачи,
	|	Представление(Доверенность.Валюта) КАК ВалютаПредставление
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенность
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Доверенность.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	Доверенность.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДоверенностьВыданная.ПФ_MXL_М2");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Доверенность_М2";
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ДанныеПечати.Ссылка, ТабличныйДокумент, Макет);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		НомерДокументаНаПечать        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
		ФамилияИмяОтчествоДоверенного = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ДанныеПечати.ФизЛицо);
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Организация,
			ДанныеПечати.ДатаДокумента,
			,
			ДанныеПечати.БанковскийСчет);
		
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОбОрганизации, 
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны");
			
		КодПоОКУД = "";
			
		ОбластьМакета = Макет.ПолучитьОбласть("Отрез");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		
		СтруктураДанныхОтрез = Новый Структура;
		СтруктураДанныхОтрез.Вставить("НомерДокумента", НомерДокументаНаПечать);
		СтруктураДанныхОтрез.Вставить("ФИОДоверенного", ?(ПустаяСтрока(ДанныеПечати.Должность), "", ДанныеПечати.Должность + " ") + ФамилияИмяОтчествоДоверенного);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхОтрез);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НазваниеФормы = НСтр("ru='Типовая межотраслевая форма № М-2'");
		КодПоОКУД = "0315001";
		
		// Заполнить реквизиты шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		СтруктураДанныхШапка = Новый Структура;
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		СтруктураДанныхШапка.Вставить("НомерДокумента", НомерДокументаНаПечать);
		СтруктураДанныхШапка.Вставить("НазваниеФормы", НазваниеФормы);
		СтруктураДанныхШапка.Вставить("ДатаДокумента", Формат(ДанныеПечати.ДатаДокумента,"ДФ = ""дд ММММ гггг """"г."""));
		СтруктураДанныхШапка.Вставить("СрокДействия", Формат(ДанныеПечати.СрокДействия,"ДФ = ""дд ММММ гггг """"г."""));
		СтруктураДанныхШапка.Вставить("ФамилияИмяОтчествоДоверенного", ДанныеПечати.ФизЛицо);
		СтруктураДанныхШапка.Вставить("ДолжностьДоверенного", ДанныеПечати.Должность);
		СтруктураДанныхШапка.Вставить("ОрганизацияПредставление", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("РеквизитыПотребителя", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("РеквизитыПлательщика", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("ОрганизацияКодПоОКПО", СведенияОбОрганизации.КодПоОКПО);
		СтруктураДанныхШапка.Вставить("КодПоОКУД", КодПоОКУД);
		
		СтруктураДанныхШапка.Вставить("РеквизитыСчета", ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОбОрганизации,
			"НомерСчета,Банк,БИК,КоррСчет,"));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапка);
		//ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Заполнить таблицу
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		ВыборкаСтрокТовары = ДанныеПечати.Товары.Выбрать();
		КоличествоСтрок = 0;
		НомерПоследнейСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			Если ЗначениеЗаполнено(ВыборкаСтрокТовары.НоменклатураПоставщика) Тогда
				
				МатериальнаяЦенность = ВыборкаСтрокТовары.НоменклатураПоставщика;
				
			Иначе
				
				МатериальнаяЦенность = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаСтрокТовары.Номенклатура,,,ВыборкаСтрокТовары.Описание);
				
			КонецЕсли;
			
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			СтруктураДанныхСтрокаТаблицы.Вставить("МатериальнаяЦенность", МатериальнаяЦенность);
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ВыборкаСтрокТовары.КоличествоУпаковок = 0,
				"",
				Строка(ВыборкаСтрокТовары.КоличествоУпаковок) + " (" + 
				ОбщегоНазначенияПоддержкаПроектов.КоличествоПрописью(ВыборкаСтрокТовары.КоличествоУпаковок) + ")"));
			
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЦикла;
		
		// Заполнить реквизиты подвала
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		СтруктураДанныхПодвал = Новый Структура;
		СтруктураДанныхПодвал.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		СтруктураДанныхПодвал.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПодвал);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьМ2а(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доверенность.Ссылка КАК Ссылка,
	|	Доверенность.Номер КАК Номер,
	|	Доверенность.Дата КАК ДатаДокумента,
	|	Доверенность.Организация КАК Организация,
	|	Доверенность.Организация.Префикс КАК Префикс,
	|	ТаблицаОтветственныеЛица.РуководительНаименование  КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	Доверенность.ФизЛицо.Наименование КАК ФизЛицо,
	|	Доверенность.ПоДокументу КАК РеквизитыДокументаНаПолучение,
	|	Доверенность.ДатаОкончанияДействия КАК СрокДействия,
	|	Доверенность.Должность КАК Должность,
	|	Доверенность.Ответственный.Наименование КАК Ответственный,
	|	Доверенность.БанковскийСчет КАК БанковскийСчет,
	|	Доверенность.Контрагент.НаименованиеПолное КАК ПоставщикПредставление,
	|	Доверенность.ДокументОснование КАК ДокументОснование,
	|	Доверенность.ДокументОснование.Номер КАК НомерОснования,
	|	Доверенность.ДокументОснование.Дата КАК ДатаОснования,
	|	Доверенность.ДокументОснование.Организация.Префикс КАК ПрефиксОснования,
	|	Доверенность.Товары.(
	|		НомерСтроки КАК Номер,
	|		ПРЕДСТАВЛЕНИЕ(Доверенность.Товары.НоменклатураПоставщика) КАК НоменклатураПоставщика,
	|		Номенклатура.НаименованиеПолное КАК Номенклатура,
	|		Номенклатура.Описание КАК Описание,
	|		Доверенность.Товары.ЕдиницаИзмерения.Наименование КАК Упаковка,
	|		Доверенность.Товары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияПредставление,
	|		Количество КАК КоличествоУпаковок
	|	),
	|	Доверенность.ВидДокументаФизЛица КАК ВидДокумента,
	|	Доверенность.СерияДокументаФизЛица КАК ПаспортСерия,
	|	Доверенность.НомерДокументаФизЛица КАК ПаспортНомер,
	|	Доверенность.КемВыданДокументФизлица КАК ПаспортВыдан,
	|	Доверенность.ДатаВыдачиДокументаФизЛица КАК ПаспортДатаВыдачи,
	|	Представление(Доверенность.Валюта) КАК ВалютаПредставление
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенность
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Доверенность.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	Доверенность.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДоверенностьВыданная.ПФ_MXL_М2");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Доверенность_М2а";
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ДанныеПечати.Ссылка, ТабличныйДокумент, Макет);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		НомерДокументаНаПечать        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
		ФамилияИмяОтчествоДоверенного = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ДанныеПечати.ФизЛицо);
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Организация,
			ДанныеПечати.ДатаДокумента,
			,
			ДанныеПечати.БанковскийСчет);
		
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОбОрганизации, 
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны");
			
		КодПоОКУД = "";
			
		НазваниеФормы = НСтр("ru='Типовая межотраслевая форма № М-2а'");
		КодПоОКУД = "0315002";
		
		// Заполнить реквизиты шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		СтруктураДанныхШапка = Новый Структура;
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		СтруктураДанныхШапка.Вставить("НомерДокумента", НомерДокументаНаПечать);
		СтруктураДанныхШапка.Вставить("НазваниеФормы", НазваниеФормы);
		СтруктураДанныхШапка.Вставить("ДатаДокумента", Формат(ДанныеПечати.ДатаДокумента,"ДФ = ""дд ММММ гггг """"г."""));
		СтруктураДанныхШапка.Вставить("СрокДействия", Формат(ДанныеПечати.СрокДействия,"ДФ = ""дд ММММ гггг """"г."""));
		СтруктураДанныхШапка.Вставить("ФамилияИмяОтчествоДоверенного", ДанныеПечати.ФизЛицо);
		СтруктураДанныхШапка.Вставить("ДолжностьДоверенного", ДанныеПечати.Должность);
		СтруктураДанныхШапка.Вставить("ОрганизацияПредставление", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("РеквизитыПотребителя", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("РеквизитыПлательщика", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("ОрганизацияКодПоОКПО", СведенияОбОрганизации.КодПоОКПО);
		СтруктураДанныхШапка.Вставить("КодПоОКУД", КодПоОКУД);
		
		СтруктураДанныхШапка.Вставить("РеквизитыСчета", ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОбОрганизации,
			"НомерСчета,Банк,БИК,КоррСчет,"));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапка);
		//ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Заполнить таблицу
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		ВыборкаСтрокТовары = ДанныеПечати.Товары.Выбрать();
		КоличествоСтрок = 0;
		НомерПоследнейСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			Если ЗначениеЗаполнено(ВыборкаСтрокТовары.НоменклатураПоставщика) Тогда
				
				МатериальнаяЦенность = ВыборкаСтрокТовары.НоменклатураПоставщика;
				
			Иначе
				
				МатериальнаяЦенность = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаСтрокТовары.Номенклатура,,,ВыборкаСтрокТовары.Описание);
				
			КонецЕсли;
			
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			СтруктураДанныхСтрокаТаблицы.Вставить("МатериальнаяЦенность", МатериальнаяЦенность);
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ВыборкаСтрокТовары.КоличествоУпаковок = 0,
				"",
				Строка(ВыборкаСтрокТовары.КоличествоУпаковок) + " (" + 
				ОбщегоНазначенияПоддержкаПроектов.КоличествоПрописью(ВыборкаСтрокТовары.КоличествоУпаковок) + ")"));
			
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЦикла;
		
		// Заполнить реквизиты подвала
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		СтруктураДанныхПодвал = Новый Структура;
		СтруктураДанныхПодвал.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		СтруктураДанныхПодвал.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПодвал);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область Прочее

#Область ФормированиеГиперссылкиВЖурналеЗакупок 

Функция ТекстЗапросаРаспоряженийНаТовары(НетДоверенности = Неопределено) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановоеПоступление.Распоряжение.Ссылка КАК Ссылка,
	|	ПлановоеПоступление.Распоряжение.ПометкаУдаления КАК ПометкаУдаления,
	|	ТИПЗНАЧЕНИЯ(ПлановоеПоступление.Распоряжение) КАК ТипРаспоряжения,
	|	ПлановоеПоступление.Распоряжение.Дата КАК Дата,
	|	ПлановоеПоступление.Распоряжение.Номер КАК Номер,
	|	ПлановоеПоступление.Распоряжение.Партнер КАК Партнер,
	|	ПлановоеПоступление.Распоряжение.Контрагент КАК Контрагент,
	|	ПлановоеПоступление.Распоряжение.Организация КАК Организация,
	|	ПлановоеПоступление.Распоряжение.Склад КАК Склад,
	|	ПлановоеПоступление.Распоряжение.Валюта КАК Валюта,
	|	ПлановоеПоступление.Распоряжение.Менеджер КАК Менеджер,
	|	ПлановоеПоступление.Распоряжение.СуммаДокумента КАК СуммаДокумента,
	|	ЗНАЧЕНИЕ(Справочник.Приоритеты.ПустаяСсылка) КАК Приоритет,
	|	ПлановоеПоступление.Распоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПРЕДСТАВЛЕНИЕ(ПлановоеПоступление.Распоряжение.ХозяйственнаяОперация) КАК ХозяйственнаяОперацияПредставление,
	|	ПлановоеПоступление.Распоряжение.Комментарий КАК Комментарий,
	|	ВЫБОР
	|		КОГДА Доверенности.СозданаДоверенность ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДоверенность,
	|	1 КАК КартинкаПриоритета
	|ИЗ
	|	#ТекстЗапросаПлановоеПоступление КАК ПлановоеПоступление
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(Доверенности.Ссылка) КАК СозданаДоверенность,
	|			Доверенности.ДокументОснование КАК ДокументОснование
	|		ИЗ
	|			Документ.ДоверенностьВыданная КАК Доверенности
	|		ГДЕ
	|			НЕ Доверенности.ПометкаУдаления
	|			И НЕ Доверенности.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Доверенности.ДокументОснование) КАК Доверенности
	|		ПО ПлановоеПоступление.Распоряжение = Доверенности.ДокументОснование
	|ГДЕ
	|	НЕ ПлановоеПоступление.Распоряжение.Ссылка ЕСТЬ NULL 
	|	И (ТИПЗНАЧЕНИЯ(ПлановоеПоступление.Распоряжение) = ТИП(Документ.ЗаказПоставщику)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ПлановоеПоступление.Распоряжение) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|	И &УсловиеОтбора";
	
	ТекстЗапросаПлановоеПоступление = Новый Массив;
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам) Тогда
		ТекстЗапросаПлановоеПоступление.Добавить("
		|ВЫБРАТЬ
		|		ЗаказыПоставщикам.ЗаказПоставщику КАК Распоряжение
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикам
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказыПоставщикам.ЗаказПоставщику
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(ЗаказыПоставщикам.КОформлениюОстаток) > 0");
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов) Тогда
		ТекстЗапросаПлановоеПоступление.Добавить("
		|	ВЫБРАТЬ
		|		ЗаявкиНаВозврат.ЗаявкаНаВозвратТоваровОтКлиента КАК Распоряжение
		|	ИЗ
		|		РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки КАК ЗаявкиНаВозврат
		|	ГДЕ
		|		&ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаявкиНаВозврат.ЗаявкаНаВозвратТоваровОтКлиента
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(ЗаявкиНаВозврат.КОформлениюОстаток) > 0");
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		ТекстЗапросаПлановоеПоступление.Добавить("
		|	ВЫБРАТЬ
		|		ЗаявкиНаВозврат.Ссылка КАК Распоряжение
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкиНаВозврат
		|	ГДЕ
		|		НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|		И ЗаявкиНаВозврат.Проведен");
	КонецЕсли;
	Если ТекстЗапросаПлановоеПоступление.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'У пользователя недостаточно прав для исполнения операции над базой данных'");
	КонецЕсли;
	ТекстЗапросаПлановоеПоступление = СтрСоединить(ТекстЗапросаПлановоеПоступление,"
		|ОБЪЕДИНИТЬ ВСЕ
		|");
	ТекстЗапросаПлановоеПоступление = "("+ТекстЗапросаПлановоеПоступление+")";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТекстЗапросаПлановоеПоступление",ТекстЗапросаПлановоеПоступление);
	
	УсловиеОтбора = "";
	
	Если ЗначениеЗаполнено(НетДоверенности) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", "Доверенности.СозданаДоверенность ЕСТЬ NULL");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &УсловиеОтбора", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Параметры.Свойство("ТипДоверенности") И Параметры.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС Тогда
		Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ДоверенностьВыданная)
			ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ") Тогда
			
			Возврат Неопределено
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаДоверенностиНаПолучениеДС();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		
	Иначе
		ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
		Если Не (ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ")
				И ПравоДоступа("Чтение", Метаданные.Документы.ДоверенностьВыданная)
				И (ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам)
					Или ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов)
						И ИспользоватьРасширенныеВозможностиЗаказаКлиента
					Или ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента)
						И Не ИспользоватьРасширенныеВозможностиЗаказаКлиента)) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаРаспоряженийНаТовары(Истина);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
				ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	КонецЕсли;
	ТекстГиперссылки = НСтр("ru = 'Доверенности'");
	
	ИмяФормыРабочееМестоДоверенности = "Документ.ДоверенностьВыданная.Форма.ФормаСпискаДокументов";
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыРабочееМестоДоверенности);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыРабочееМестоДоверенности);
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаРаспоряженийНаДС() Экспорт
	
	// Регистры.
	ЧтениеРасчетыСКлиентами = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами);
	ЧтениеРасчетыСПоставщиками = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
	
	// Документы.
	ЧтениеЗаказКлиента = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКлиента);
	ЧтениеЗаявкаНаВозвратТоваровОтКлиента = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	ЧтениеАктВыполненныхРабот = ПравоДоступа("Просмотр", Метаданные.Документы.АктВыполненныхРабот);
	ЧтениеРеализацияУслугПрочихАктивов = ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияУслугПрочихАктивов);
	ЧтениеОтчетКомиссионера = ПравоДоступа("Просмотр", Метаданные.Документы.ОтчетКомиссионера);
	ЧтениеРеализацияТоваровУслуг = ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияТоваровУслуг);
	
	
	ЧтениеВозвратТоваровПоставщику = ПравоДоступа("Просмотр", Метаданные.Документы.ВозвратТоваровПоставщику);
	
	// Справочники.
	ЧтениеДоговорыКонтрагентов = ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов);
	
	ТекстЗапроса = "";
	
	ТекстШаблона = "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументРасчетов.Ссылка КАК Ссылка,
	|	ДокументРасчетов.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументРасчетов.Дата КАК Дата,
	|	ДокументРасчетов.Номер КАК Номер,
	|	ТИПЗНАЧЕНИЯ(ДокументРасчетов.Ссылка) КАК ТипРаспоряжения,
	|	Расчеты.Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.%1) КАК ХозяйственнаяОперация,
	|	%2 КАК ХозяйственнаяОперацияПредставление,
	|	КлючиАналитики.Партнер КАК Партнер,
	|	КлючиАналитики.Партнер.Наименование КАК ПартнерПредставление,
	|	КлючиАналитики.Контрагент КАК Контрагент,
	|	КлючиАналитики.Организация КАК Организация,
	|	ДокументРасчетов.Менеджер КАК Менеджер,
	|	ДокументРасчетов.Менеджер КАК Ответственный,
	|	ДокументРасчетов.СуммаДокумента КАК СуммаДокумента,
	|	Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток КАК КОплатеОстаток
	|	ПОМЕСТИТЬ ДокументыРасчетов
	|ИЗ
	|	Документ.%3 КАК ДокументРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.%4.Остатки(
	|				,
	|				НЕ %5 = НЕОПРЕДЕЛЕНО
	|					И %5 ССЫЛКА Документ.%3) КАК Расчеты
	|		ПО (Расчеты.%5 = ДокументРасчетов.Ссылка)
	|			И (Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток > 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|		ПО (Расчеты.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики)";
		
	Если ЧтениеРасчетыСКлиентами Тогда
		
		ТекстХО = "ПоступлениеОплатыОтКлиента";
		ТекстХОПредставление = НСтр("ru = '""Поступление оплаты от клиента""'");
		ТекстРасчеты = "РасчетыСКлиентами";
		ТекстИзмерениеРасчеты = "ЗаказКлиента";
		// Заказ клиента.
		Если ЧтениеЗаказКлиента Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "ЗаказКлиента", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
		// Заявка на возврат товаров от клиента.
		Если ЧтениеЗаявкаНаВозвратТоваровОтКлиента Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "ЗаявкаНаВозвратТоваровОтКлиента", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
		// Акт выполненных работ.
		Если ЧтениеАктВыполненныхРабот Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "АктВыполненныхРабот", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
		// Реализация услуг прочих активов.
		Если ЧтениеРеализацияУслугПрочихАктивов Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "РеализацияУслугПрочихАктивов", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
		// Отчет комиссионера.
		Если ЧтениеОтчетКомиссионера Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "ОтчетКомиссионера", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
		// Реализация товаров услуг.
		Если ЧтениеРеализацияТоваровУслуг Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "РеализацияТоваровУслуг", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
		
		
		Если ЧтениеДоговорыКонтрагентов Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДокументРасчетов.Ссылка КАК Ссылка,
			|	ДокументРасчетов.ПометкаУдаления КАК ПометкаУдаления,
			|	ДокументРасчетов.Дата КАК Дата,
			|	ДокументРасчетов.Номер КАК Номер,
			|	ТИПЗНАЧЕНИЯ(ДокументРасчетов.Ссылка) КАК ТипРаспоряжения,
			|	Расчеты.Валюта КАК Валюта,
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
			|	" + ТекстХОПредставление + " КАК ХозяйственнаяОперацияПредставление,
			|	КлючиАналитики.Партнер КАК Партнер,
			|	КлючиАналитики.Партнер.Наименование КАК ПартнерПредставление,
			|	КлючиАналитики.Контрагент КАК Контрагент,
			|	КлючиАналитики.Организация КАК Организация,
			|	ДокументРасчетов.Менеджер КАК Менеджер,
			|	ДокументРасчетов.Менеджер КАК Ответственный,
			|	0 КАК СуммаДокумента,
			|	Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток КАК КОплатеОстаток
			|	ПОМЕСТИТЬ ДокументыРасчетов
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДокументРасчетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
			|				,
			|				НЕ ЗаказКлиента = НЕОПРЕДЕЛЕНО
			|					И ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов) КАК Расчеты
			|		ПО (Расчеты.ЗаказКлиента = ДокументРасчетов.Ссылка)
			|			И (Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток > 0)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
			|		ПО (Расчеты.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики)";
		КонецЕсли;
	КонецЕсли;
	
	Если ЧтениеРасчетыСПоставщиками Тогда
		
		ТекстРасчеты = "РасчетыСПоставщиками";
		ТекстИзмерениеРасчеты = "ЗаказПоставщику";
		// Возврат товаров поставщику.
		Если ЧтениеВозвратТоваровПоставщику Тогда
			ТекстХО = "ВозвратДенежныхСредствОтПоставщика";
			ТекстХОПредставление = НСтр("ru = '""Возврат от поставщика""'");
			
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "ВозвратТоваровПоставщику", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + СокрЛП(Сред(ТекстЗапроса, 25));
	ТекстВТ = СтрНайти(ТекстЗапроса, "ПОМЕСТИТЬ ДокументыРасчетов");
	
	ТекстЗапросаНачало = Лев(ТекстЗапроса, ТекстВТ + 27);
	ТекстЗапросаКонец = Сред(ТекстЗапроса, ТекстВТ + 28);
	ТекстЗапросаКонец = СтрЗаменить(ТекстЗапросаКонец, "ПОМЕСТИТЬ ДокументыРасчетов", "");
	ТекстЗапроса = ТекстЗапросаНачало + ТекстЗапросаКонец + ";";
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Доверенности.ДокументОснование
	|ПОМЕСТИТЬ ВыданныеДоверенности
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенности
	|ГДЕ
	|	НЕ Доверенности.ПометкаУдаления
	|	И Доверенности.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыРасчетов.Ссылка КАК Ссылка,
	|	ДокументыРасчетов.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументыРасчетов.Дата КАК Дата,
	|	ДокументыРасчетов.Номер КАК Номер,
	|	ДокументыРасчетов.ТипРаспоряжения КАК ТипРаспоряжения,
	|	ДокументыРасчетов.Валюта КАК Валюта,
	|	ДокументыРасчетов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДокументыРасчетов.ХозяйственнаяОперацияПредставление КАК ХозяйственнаяОперацияПредставление,
	|	ДокументыРасчетов.Партнер КАК Партнер,
	|	ДокументыРасчетов.Партнер.Наименование КАК ПартнерПредставление,
	|	ДокументыРасчетов.Контрагент КАК Контрагент,
	|	ДокументыРасчетов.Организация КАК Организация,
	|	ДокументыРасчетов.Менеджер КАК Менеджер,
	|	ДокументыРасчетов.Ответственный КАК Ответственный,
	|	ДокументыРасчетов.СуммаДокумента КАК СуммаДокумента,
	|	ДокументыРасчетов.КОплатеОстаток КАК КОплатеОстаток,
	|	ЗНАЧЕНИЕ(Справочник.Приоритеты.ПустаяСсылка) КАК Приоритет,
	|	ВЫБОР
	|		КОГДА ВыданныеДоверенности.ДокументОснование ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДоверенность,
	|	ВЫБОР
	|		КОГДА ВыданныеДоверенности.ДокументОснование ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяДоверенность,
	|	1 КАК КартинкаПриоритета
	|ИЗ
	|	ДокументыРасчетов КАК ДокументыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыданныеДоверенности КАК ВыданныеДоверенности
	|		ПО ДокументыРасчетов.Ссылка = ВыданныеДоверенности.ДокументОснование";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаДоверенностиНаПолучениеДС()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоверенностьВыданная.Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ДоверенностьВыданная
	|ГДЕ
	|	ДоверенностьВыданная.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|	И ДоверенностьВыданная.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана),ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.НеВыдана))";
	
	Возврат ТекстЗапроса
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
