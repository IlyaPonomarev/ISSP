#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
	ЗаполнитьПоЗначениямАвтозаполнения();
	
	ОбщегоНазначенияПоддержкаПроектов.ЗаполнитьРеквизитыПоСкладу(ЭтотОбъект, "Склад");
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)	
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры.Шапка);
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры.ТабличнаяЧасть);
	
	ОбщегоНазначенияПоддержкаПроектов.ЗаполнитьРеквизитыПоСкладу(ЭтотОбъект, "Склад");
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, НепроверяемыеРеквизиты, Отказ);
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ПроверитьЗаполнениеСерийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры.Шапка, НепроверяемыеРеквизиты, Отказ);
	ЗапасыСервер.ПроверитьЗаполнениеСерийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры.ТабличнаяЧасть, НепроверяемыеРеквизиты, Отказ);
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		ЗапасыСервер.ПроверитьЗаполнениеПартийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры.ТабличнаяЧасть, НепроверяемыеРеквизиты, Отказ);
	Иначе
		ЗапасыСервер.ПроверитьЗаполнениеПартийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры.Шапка, НепроверяемыеРеквизиты, Отказ);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ПараметрыОкругления = ОбработкаТабличнойЧастиСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыОкругления.ТоварВШапке = Истина;
	ОбработкаТабличнойЧастиСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	ОбработкаТабличнойЧастиСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ПараметрыУчетаНоменклатуры.Шапка);
	ЗапасыСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ПараметрыУчетаНоменклатуры.ТабличнаяЧасть);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			Справочники.ПартииНоменклатуры.ЗаполнитьПартиюВКоллекции(ЭтотОбъект, Неопределено, Новый Структура("ПартияВШапке", Истина));
		Иначе
			Справочники.ПартииНоменклатуры.ЗаполнитьПартиюВКоллекции(ЭтотОбъект, Неопределено, Новый Структура("ПартияВШапке", Ложь));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеПоддержкаПроектов.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеПоддержкаПроектов.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	ИзменитьСерииПослеПроведения(Отказ);
КонецПроцедуры

Процедура ИзменитьСерииПослеПроведения(Отказ)
	Если Не Отказ Тогда
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
			СтруктураОтбора = Новый Структура("СтатусУказанияСерий", 6);
			СтрокиССериями = Товары.НайтиСтроки(СтруктураОтбора);
			Для Каждого Строка Из СтрокиССериями Цикл
				Если Не ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
					Продолжить;
				КонецЕсли;
				Серия = Строка.СерияНоменклатуры.ПолучитьОбъект();
				Серия.Поставка = Ссылка;
				Серия.ПометкаУдаления = Ложь;
				Серия.Записать();
			КонецЦикла;
		Иначе
			Если СтатусУказанияСерий = 6 Тогда
				Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
					Серия = СерияНоменклатуры.ПолучитьОбъект();
					Серия.Поставка = Ссылка;
					Серия.ПометкаУдаления = Ложь;
					Серия.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СерииНоменклатуры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	               |ГДЕ
	               |	(СерииНоменклатуры.Поставка = &Поставка
	               |				И НЕ СерииНоменклатуры.Ссылка В (&Серии)
	               |			ИЛИ СерииНоменклатуры.Поставка = Неопределено)
	               |	И СерииНоменклатуры.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Поставка", Ссылка);
	МассивСерий = Товары.Выгрузить().ВыгрузитьКолонку("СерияНоменклатуры");
	МассивСерий.Добавить(СерияНоменклатуры);
	Запрос.УстановитьПараметр("Серии", МассивСерий);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Серия = Выборка.Ссылка.ПолучитьОбъект();
		Серия.ПометкаУдаления = Истина;
		Серия.Записать();
	КонецЦикла;
КонецПроцедуры
#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение документа
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Автор = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	
	ЗаполнитьПоляПоУмолчанию();
	
КонецПроцедуры

Процедура ЗаполнитьПоляПоУмолчанию()
	
	Организация = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения()
	
	ОбщегоНазначенияПоддержкаПроектов.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "Организация, Склад");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Процедура ЗаполнитьСписокЗависимыхЗаказов()
	
КонецПроцедуры

Функция СписокРегистровДляКонтроля() Экспорт
	
	РегистрыДляКонтроля = Новый Массив;
	
	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
	РегистрыДляКонтроля.Добавить(Движения.СебестоимостьТоваров);
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РегистрыДляКонтроля.Добавить(Движения.СвободныеОстатки);
	КонецЕсли;
	
	Возврат РегистрыДляКонтроля;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет наборы значений доступа
// по объекту в таблице с полями:
//  - НомерНабора     Число                                     (необязательно, если набор один),
//  - ВидДоступа      ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//  - ЗначениеДоступа Неопределено, СправочникСсылка или др.    (обязательно),
//  - Чтение          Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Добавление      Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Изменение       Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Удаление        Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора).
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = 1;
	СтрокаТаб.ЗначениеДоступа = Организация;
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = 1;
	СтрокаТаб.ЗначениеДоступа = Склад;
	
КонецПроцедуры

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли