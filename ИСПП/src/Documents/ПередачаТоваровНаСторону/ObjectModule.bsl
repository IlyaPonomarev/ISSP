#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ЗаполнитьДокументНаОснованииПоступленияТоваров(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ЗаполнитьДокументНаОснованииПеремещенияТоваров(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
	ЗаполнитьПоЗначениямАвтозаполнения();
	
	ОбщегоНазначенияПоддержкаПроектов.ЗаполнитьРеквизитыПоСкладу(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
	ОбщегоНазначенияПоддержкаПроектов.ЗаполнитьРеквизитыПоСкладу(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, НепроверяемыеРеквизиты, Отказ);
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ПроверитьЗаполнениеСерийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	ЗапасыСервер.ПроверитьЗаполнениеПартийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	
	Если Документы.ПередачаТоваровНаСторону.ЭтоБезвозмезднаяПередача(ХозяйственнаяОперация) Тогда
		НепроверяемыеРеквизиты.Добавить("Контрагент");
		НепроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
		НепроверяемыеРеквизиты.Добавить("Товары.Сумма");
		НепроверяемыеРеквизиты.Добавить("Товары.СтавкаНДС");
		НепроверяемыеРеквизиты.Добавить("Товары.СуммаСНДС");
		
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(ЭтотОбъект,, НепроверяемыеРеквизиты, Отказ);
		
	Иначе
		НепроверяемыеРеквизиты.Добавить("СтатьяРасходов");
		НепроверяемыеРеквизиты.Добавить("АналитикаРасходов");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеПоддержкаПроектов.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбработкаТабличнойЧастиСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	СуммаДокумента = ЦенообразованиеПоддержкаПроектовКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС);
	
	ЗапасыСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
	Если Не Документы.ПередачаТоваровНаСторону.ЭтоБезвозмезднаяПередача(ХозяйственнаяОперация) Тогда
		СтатьяРасходов = Неопределено;
		АналитикаРасходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеПоддержкаПроектов.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеПоддержкаПроектов.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализации и заполнения документа
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Автор = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	
	Валюта = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗаполнитьПоляПоУмолчанию();
	
КонецПроцедуры

Процедура ЗаполнитьПоляПоУмолчанию()
	
	Организация = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	ПодразделениеОрганизации = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьПодразделениеПоУмолчанию(ПодразделениеОрганизации, Организация);
	Склад = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПодразделениеОрганизации);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения()
	
	ОбщегоНазначенияПоддержкаПроектов.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "Организация, Склад");
	ОбщегоНазначенияПоддержкаПроектов.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "ПодразделениеОрганизации", "Организация");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	ОбщегоНазначенияПоддержкаПроектов.ПроверитьЗаполнениеПодразделенияОрганизации(ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииПоступленияТоваров(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Документ.Ссылка КАК Основание,
	               |	Документ.Организация КАК Организация,
	               |	Документ.Склад КАК Склад,
	               |	Документ.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	НЕ Документ.Проведен КАК ЕстьОшибкиПроведен,
	               |	НЕОПРЕДЕЛЕНО КАК Статус,
	               |	ЛОЖЬ КАК ЕстьОшибкиСтатус,
	               |	Документ.ПроектЗадания КАК ПроектЗадания,
	               |	Документ.Гриф КАК Гриф
	               |ИЗ
	               |	Документ.ПоступлениеТоваров КАК Документ
	               |ГДЕ
	               |	Документ.Ссылка = &ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	Товары.СерияНоменклатуры КАК СерияНоменклатуры,
	               |	Товары.Партия КАК Партия,
	               |	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Товары.Количество КАК Количество,
	               |	Товары.Номенклатура.СтавкаНДС КАК СтавкаНДС
	               |ИЗ
	               |	Документ.ПоступлениеТоваров.Товары КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Товары.НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	ДопустимыеСтатусы = Новый Массив;
	Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[0].Выбрать();
	Шапка.Следующий();
	
	ОбщегоНазначенияПоддержкаПроектов.ПроверитьВозможностьВводаНаОсновании(
		Шапка.Основание,
		Шапка.ЕстьОшибкиПроведен,
		Шапка.Статус,
		Шапка.ЕстьОшибкиСтатус,
		ДопустимыеСтатусы);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТовары = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, Выборка);
	КонецЦикла;
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры);
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииПеремещенияТоваров(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Документ.Ссылка КАК Основание,
	               |	ВЫБОР
	               |		КОГДА Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаТоваров)
	               |			ТОГДА Документ.ОрганизацияПолучатель
	               |		ИНАЧЕ Документ.Организация
	               |	КОНЕЦ КАК Организация,
	               |	Документ.СкладПолучатель КАК Склад,
	               |	НЕ Документ.Проведен КАК ЕстьОшибкиПроведен,
	               |	Документ.Гриф КАК Гриф,
	               |	Документ.ПроектЗадания КАК ПроектЗадания
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК Документ
	               |ГДЕ
	               |	Документ.Ссылка = &ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	Товары.СерияНоменклатуры КАК СерияНоменклатуры,
	               |	Товары.Партия КАК Партия,
	               |	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Товары.Количество КАК Количество,
	               |	Товары.Номенклатура.СтавкаНДС КАК СтавкаНДС
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Товары.НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[0].Выбрать();
	Шапка.Следующий();
	
	ОбщегоНазначенияПоддержкаПроектов.ПроверитьВозможностьВводаНаОсновании(
		Шапка.Основание,
		Шапка.ЕстьОшибкиПроведен);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТовары = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, Выборка);
	КонецЦикла;
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры);
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииОприходованияТоваров(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Документ.Ссылка                    КАК Основание,
	|	Документ.Организация               КАК Организация,
	|	Документ.Склад                     КАК Склад,
	|	Документ.ПодразделениеОрганизации  КАК ПодразделениеОрганизации,
	|	НЕ Документ.Проведен               КАК ЕстьОшибкиПроведен,
	|	НЕОПРЕДЕЛЕНО                       КАК Статус,
	|	ЛОЖЬ                               КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                  КАК Номенклатура,
	|	Товары.СерияНоменклатуры             КАК СерияНоменклатуры,
	|	Товары.Партия                        КАК Партия,
	|	Товары.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	Товары.Количество                    КАК Количество,
	|	Товары.Номенклатура.СтавкаНДС        КАК СтавкаНДС
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	ДопустимыеСтатусы = Новый Массив;
	Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[0].Выбрать();
	Шапка.Следующий();
	
	ОбщегоНазначенияПоддержкаПроектов.ПроверитьВозможностьВводаНаОсновании(
		Шапка.Основание,
		Шапка.ЕстьОшибкиПроведен,
		Шапка.Статус,
		Шапка.ЕстьОшибкиСтатус,
		ДопустимыеСтатусы);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТовары = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, Выборка);
	КонецЦикла;
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры);
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция СписокРегистровДляКонтроля() Экспорт
	
	РегистрыДляКонтроля = Новый Массив;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыДляКонтроля.Добавить(Движения.СвободныеОстатки);
		РегистрыДляКонтроля.Добавить(Движения.СебестоимостьТоваров);
		
	КонецЕсли;
	
	Возврат РегистрыДляКонтроля;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет наборы значений доступа
// по объекту в таблице с полями:
//  - НомерНабора     Число                                     (необязательно, если набор один),
//  - ВидДоступа      ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//  - ЗначениеДоступа Неопределено, СправочникСсылка или др.    (обязательно),
//  - Чтение          Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Добавление      Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Изменение       Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Удаление        Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора).
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Организация;
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Склад;
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = ПодразделениеОрганизации;
	
КонецПроцедуры

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли