
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	ТипыДокументов = Новый ФиксированныйМассив(ШтрихкодированиеПечатныхФорм.ТипыОбъектовДинамическогоСписка(Список));
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ДоступныеОрганизации = Справочники.Организации.ПолучитьДанныеВыбора(Новый Структура("ТаблицаОбъекта", Метаданные.Документы.ПоступлениеТоваров.ПолноеИмя())).ВыгрузитьЗначения();
	Элементы.ОтборОрганизация.СписокВыбора.ЗагрузитьЗначения(ДоступныеОрганизации);
	
	ДоступныеСклады = Справочники.Склады.ПолучитьДоступные(Неопределено, Метаданные.Документы.ПоступлениеТоваров.ПолноеИмя());
	Элементы.ОтборСклад.СписокВыбора.ЗагрузитьЗначения(ДоступныеСклады);
	
	ИспользоватьСпецификацииКДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьСпецификацииКДоговорам");
	
	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("ИспользоватьСпецификацииКДоговорам", ИспользоватьСпецификацииКДоговорам);
	
	Если Не ИспользоватьСпецификацииКДоговорам Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаРаспоряженияНаОформление.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаОформлениеСоздатьПоступлениеТоваров.Видимость =
		ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваров);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Контрагент",
		ОтборКонтрагент,
		,
		,
		ЗначениеЗаполнено(ОтборКонтрагент));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Склад",
		ОтборСклад,
		,
		,
		ЗначениеЗаполнено(ОтборСклад));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		,
		,
		ЗначениеЗаполнено(ОтборОрганизация));

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"Контрагент",
		ОтборКонтрагент,
		,
		,
		ЗначениеЗаполнено(ОтборКонтрагент));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"Организация",
		ОтборОрганизация,
		,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоступлениеТоваров(Команда)
	
	ТекущаяСтрока = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено
	 Или ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.ПоступлениеТоваров.ФормаОбъекта", Новый Структура("Основание", ТекущаяСтрока.Ссылка));
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Контрагент",
		ОтборКонтрагент,
		,
		,
		ЗначениеЗаполнено(ОтборКонтрагент));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"Контрагент",
		ОтборКонтрагент,
		,
		,
		ЗначениеЗаполнено(ОтборКонтрагент));
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Склад",
		ОтборСклад,
		,
		,
		ЗначениеЗаполнено(ОтборСклад));
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"Организация",
		ОтборОрганизация,
		,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПоляДата(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаОформление");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкода)
	
	ШтрихкодированиеПечатныхФормКлиент.ПоказатьСсылкуПоШтрихкодуТабличногоДокумента(Элементы.Список, ДанныеШтрихкода.Штрихкод, ТипыДокументов);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти // СтандартныеПодсистемы

&НаКлиенте
Процедура ЗаполнитьНомера(Команда)
	
	Если Не Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо выбрать один документ поступления");
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПослеВводаНомеров", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ДокументПоступления", Элементы.Список.ТекущаяСтрока);
	ОткрытьФорму("Документ.ПоступлениеТоваров.Форма.ВвестиДанныеПоНомерам", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПослеВводаНомеров(Значение, Параметры) Экспорт
	ОповеститьОбИзменении(Тип("СправочникСсылка.СерииНоменклатуры"));
КонецПроцедуры
