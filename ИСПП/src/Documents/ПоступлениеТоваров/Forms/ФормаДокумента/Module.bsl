
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки; //используется для отвязки строки поступления от строки заказа

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.ГруппаДополнительныеРеквизиты.Имя);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	НастройкаФормПоддержкаПроектов.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	НастройкаФормПоддержкаПроектов.НастроитьОтображениеИтогов(Элементы.ГруппаСуммаВсего);
	
	// БуферОбменаТоварами
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, Не ОбработкаТабличнойЧастиСервер.БуферОбменаПустой());
	// Конец БуферОбменаТоварами
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастройкаФормПоддержкаПроектов.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	ПредыдущиеРеквизитыСтроки = Новый Структура;
	ПредыдущиеРеквизитыСтроки.Вставить("НоменклатураПоставщика");
	ПредыдущиеРеквизитыСтроки.Вставить("Номенклатура");
	ПредыдущиеРеквизитыСтроки.Вставить("НоменклатураЗаказа");
	ПредыдущиеРеквизитыСтроки.Вставить("СерияНоменклатуры");
	ПредыдущиеРеквизитыСтроки.Вставить("ЕдиницаИзмерения");
	ПредыдущиеРеквизитыСтроки.Вставить("Количество");
	ПредыдущиеРеквизитыСтроки.Вставить("КодСтроки");
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбработатьИзменениеХозяйственнойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
			
	Если ИмяСобытия = "ВведенШтрихкод" И Источник = УникальныйИдентификатор Тогда
		ОбработатьШтрихкоды(ОбщегоНазначенияПоддержкаПроектовКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
	КонецЕсли;
	
	Если Источник = "РегистрацияШтрихкодов"
	   И ИмяСобытия = "ЗарегистрированыШтрихкоды"
	   И Параметр.КлючВладельца = УникальныйИдентификатор Тогда
		Если Параметр.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
			ОбновитьСтрокиНенайденныхШтрихКодов(Параметр.ЗарегистрированныеШтрихкоды);
		КонецЕсли;
	КонецЕсли;
	
	// БуферОбменаТоварами
	Если ОбработкаТабличнойЧастиКлиент.ОбрабатыватьОповещениеОтБуфераОбмена(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ДоступностьБуфераОбмена = ОбработкаТабличнойЧастиКлиент.ОпределитьДоступностьВставкиИзБуфераОбменаПоСобытию(ИмяСобытия);
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьБуфераОбмена);
	КонецЕсли;
	// Конец БуферОбменаТоварами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ПодборТоваровКлиент.ОбработатьПодборТоваровВДокументПоступления(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ." + ИмяДокументаРаспоряжения + ".Форма.ПодборПоОстаткам" Тогда
		ОбработатьПодборПоЗаказу(ВыбранноеЗначение.АдресДанныхВХранилище);
	Иначе
		// БуферОбменаТоварами
		Если ОбработкаТабличнойЧастиКлиент.НужноОбработатьВставкуИзБуфераОбмена(ЭтотОбъект, ИсточникВыбора) Тогда
			ВставитьТоварыИзБуфераОбмена(ВыбранноеЗначение);
		КонецЕсли;
		// Конец БуферОбменаТоварами
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//НайтиСоздатьСерииНоменклатурыДоПроведения();
		
	НастройкаФормПоддержкаПроектов.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	НастройкаФормПоддержкаПроектов.ИзменитьЗаголовокПоХозяйственнойОперации(ЭтотОбъект);
	
	ЗаполнитьСлужебныеРеквизиты();
	ОбновитьФормуПоЗаказу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОповеститьОбИзменении(Тип("СправочникСсылка.СерииНоменклатуры"));	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика(Команда)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Не НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "ПоступлениеТоваров.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("ПослеРазбиенияСтроки", ЭтотОбъект, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.РазбитьСтрокуТЧ(Объект.Товары, ТекущаяСтрока, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОбработкаТабличнойЧастиКлиент.ПоказатьВводШтрихкода(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьОтЗаказа(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		КоличествоОтвязанных = 0;
		Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
			СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
			Если СтрокаТаблицы.КодСтроки <> 0 Тогда
				СтрокаТаблицы.КодСтроки = 0;
				СтрокаТаблицы.НоменклатураЗаказа = Неопределено;
				СтрокаТаблицы.ЦенаЗаказа = 0;
				ОбновитьОтклоненияОтЗаказаВСтроке(СтрокаТаблицы, ИспользоватьРаспоряженияНаОформление И Объект.ПоступлениеПоЗаказу);
				КоличествоОтвязанных = КоличествоОтвязанных + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
		ОбновитьНадписьОтклоненийОтЦенЗаказа();
		ОповеститьОбОкончанииОтвязкиСтрок(КоличествоОтвязанных);
		
	Иначе
		ТекстПредупреждения = НСтр("ru='Выберите строки, которые необходимо отвязать от заказа.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСЗаказом(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.КодСтроки <> 0 Или Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораСвязи = ПолучитьПараметрыПодбораИзЗаказа();
	ПараметрыВыбораСвязи.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
	
	Оповестить = Новый ОписаниеОповещения("СвязатьСЗаказомЗавершение", ЭтотОбъект, Элементы.Товары.ТекущаяСтрока);
	ОткрытьФорму("Документ.ПоступлениеТоваров.Форма.ФормаВыбораСтрокиЗаказа", ПараметрыВыбораСвязи, ЭтотОбъект,,,, Оповестить, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСЗаказомЗавершение(ДанныеСтрокиЗаказа, ТекущаяСтрока) Экспорт
	
	Если ДанныеСтрокиЗаказа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	ДанныеСтроки.КодСтроки = ДанныеСтрокиЗаказа.КодСтроки;
	Если ДанныеСтроки.Номенклатура <> ДанныеСтрокиЗаказа.Номенклатура Тогда
		ДанныеСтроки.НоменклатураЗаказа = ДанныеСтрокиЗаказа.Номенклатура;
	КонецЕсли;
	
	ЗаполнитьЦеныНоменклатурыЗаказов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущаяСтрока));
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Поставщик", Объект.Контрагент);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка", "Склад");
	ПараметрыПодбора.Вставить("Склад", Объект.Склад);
	ПараметрыПодбора.Вставить("ПодборВПоступление", Истина);
	ПараметрыПодбора.Вставить("Валюта", Объект.Валюта);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументПоступления(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборИзЗаказа(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не записан!");
		Возврат;
	КонецЕсли;	
	
	ПараметрыПодбора = ПолучитьПараметрыПодбораИзЗаказа();
	
	ФормаПодбора = ОткрытьФорму(
		"Документ." + ИмяДокументаРаспоряжения + ".Форма.ПодборПоОстаткам",
		ПараметрыПодбора,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	ЗаполнитьПоЗаказуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(Команда)
	
	Если Не ВзаимодействиеСПользователемКлиент.ПроверитьНаличиеСтрокВСписке(Объект.Товары, "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресТоваровВХранилище = ПоместитьТоварыПоставщикаВоВременноеХранилище();
	Оповестить = Новый ОписаниеОповещения("ЗаполнитьНоменклатуруПоНоменклатуреПоставщикаЗавершение", ЭтотОбъект);
	ЗакупкиКлиент.ОткрытьФормуЗаполненияНоменклатурыПоНоменклатуреПоставщика(Оповестить, АдресТоваровВХранилище, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНенайденныеШтрихкоды(Команда)
	
	ОбновитьСтрокиНенайденныхШтрихКодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНенайденныеШтрихкоды(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьНенайденныеШтрихкоды(Объект.Товары, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоПоступлениям(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ВызватьИсключение НСтр("ru = 'Для заполнения цен по последним поступлениям необходимо указать поставщика'");
	КонецЕсли;
	
	ЦеныЗаполнены = ЗаполнитьЦеныПоПоследнимПоступлениямСервер();
	
	Если ЦеныЗаполнены Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			НСтр("ru= 'В строках документа заполнены цены'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены не заполнены'"),
			,
			НСтр("ru= 'Ни в одной строке цена не заполнена'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтклоненияЦен(Команда)
	
	ПоказатьОтклоненияЦен = Не ПоказатьОтклоненияЦен;
	Элементы.ТоварыПоказатьОтклоненияЦен.Пометка = ПоказатьОтклоненияЦен; 
	
	Если ПоказатьОтклоненияЦен Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЦенаИзменилась", Истина);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	ОбработатьИзменениеВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтрагента();
	ОбработатьИзменениеВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКонтрагента();
	ОбработатьИзменениеВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ОбработатьИзменениеПодразделения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Склад <> Объект.Склад Тогда
		ОбработатьИзменениеСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ОбработатьИзменениеВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ОбработатьИзменениеЦенаВключаетНДС(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеПоЗаказуПриИзменении(Элемент)
	
	Если Объект.ПоступлениеПоЗаказу Тогда
		ВыбратьРаспоряжениеНаОформление();
	Иначе
		Оповещение = Новый ОписаниеОповещения("ОтвязатьОтЗаказаПоставщику", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Строки в списке Товары перестанут быть связанными со строками заказов. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	Объект.ПоступлениеПоЗаказу = Не Объект.ПоступлениеПоЗаказу;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ОбработатьИзменениеХозяйственнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ОбработатьИзменениеНалогообложенияНДС();
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущаяСтрока.КодСтроки = 0;
		ТекущаяСтрока.ЦенаЗаказа = 0;
		ТекущаяСтрока.НоменклатураЗаказа = Неопределено;
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ИспользоватьРаспоряженияНаОформление И Объект.ПоступлениеПоЗаказу);
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьНоменклатуруПоНоменклатуреПоставщика());
	СтруктураДействий.Вставить(
		Действия.Действие_ПроверитьСопоставленнуюНоменклатуруПоставщика(),
		Действия.ПолучитьПараметрыПроверкиСопоставленнойНоменклатурыПоставщика(
			Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("СтруктураДействий", СтруктураДействий);
	
	Если ТекущаяСтрока.КодСтроки <> 0 Тогда
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ДополнительныеПараметры.СтруктураДействий.Очистить();
		ВопросПользователюПриИзмененииРеквизитаСтроки(
			Новый ОписаниеОповещения("ТоварыНоменклатураПоставщикаПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ТекущаяСтрока);
		
	Иначе
		
		ТоварыНоменклатураПоставщикаПриИзмененииВопросПользователюЗавершение(Истина, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	СтруктураДействий = ДополнительныеПараметры.СтруктураДействий;
	
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуЗакупки(), Действия.ПолучитьПараметрыЗаполненияЦеныЗакупки(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя(), Действия.ПолучитьПараметрыЗаполненияЗарегистрированнойЦеныПроизводителя(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.Штрихкод = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре(), Объект.Контрагент);
	СтруктураДействий.Вставить(
		Действия.Действие_ПроверитьСопоставленнуюНоменклатуруПоставщика(),
		Действия.ПолучитьПараметрыПроверкиСопоставленнойНоменклатурыПоставщика(
			Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуЗакупки(), Действия.ПолучитьПараметрыЗаполненияЦеныЗакупки(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя(), Действия.ПолучитьПараметрыЗаполненияЗарегистрированнойЦеныПроизводителя(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.Штрихкод = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	Если ТекущаяСтрока.Количество > 0 Тогда
		ПересчитываемыеЦены = "Цена";
		Если ТекущаяСтрока.КодСтроки > 0 Тогда
			ПересчитываемыеЦены = ПересчитываемыеЦены + ", ЦенаЗаказа";
		КонецЕсли;
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦенуЗаУпаковку(), Действия.ПолучитьПараметрыПересчетаЦеныЗаУпаковку(ТекущаяСтрока.Количество, ПересчитываемыеЦены));
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
		ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ИспользоватьРаспоряженияНаОформление И Объект.ПоступлениеПоЗаказу);
	Если Объект.ПоступлениеПоЗаказу Тогда
		ОбновитьНадписьОтклоненийОтЦенЗаказа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦену());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти // Товары

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	ВалютаДокумента = Объект.Валюта;
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	
	Склад = Объект.Склад;
	УстановитьДоступностьЭлементовПоСкладу();
	
	ТаблицаОбъекта = Объект.Ссылка.Метаданные().ПолноеИмя();
	ОсновнойСклад = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьСкладПоУмолчанию(Неопределено, Объект.ПодразделениеОрганизации, ТаблицаОбъекта);
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
	ИспользоватьСпецификацииКДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьСпецификацииКДоговорам");
	ИспользоватьРаспоряженияНаОформление = ИспользоватьСпецификацииКДоговорам;
	Элементы.ГруппаЗаказ.Видимость = ИспользоватьРаспоряженияНаОформление;
	ОбновитьФормуПоЗаказу();
	УстановитьВидимостьЭлементовПоЗаказу();
	НастроитьОтображениеИтогов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеНомераГТД(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеЦенаВключаетНДС(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСуммаНДС(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСуммНДС(ЭтотОбъект);
		
	ЗаказыСервер.УстановитьОформлениеЦеныЗаказа(ЭтотОбъект);
	ЗаказыСервер.УстановитьОформлениеСтокиСверхЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСлужебныеРеквизиты(ДополнительныеПараметры) Экспорт
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД());
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСерийТоваровДокумента()
	
	СписокСерий = Новый Массив();
	
	Для Каждого Строка Из Объект.Товары Цикл
		Если Строка.СтатусУказанияСерий <> ЗапасыКлиентСерверПовтИсп.СтатусыУказанияСерий().СтатусСерииНеУказываются
		   И ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
			СписокСерий.Добавить(Строка.СерияНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокСерий;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСкладу()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	Перем ВсеЭлементы;
	Перем ВидимыеЭлементы;
	
	Документы.ПоступлениеТоваров.ЗаполнитьИменаРеквизитовПоТипуОперации(
		Объект.ХозяйственнаяОперация,
		ВсеЭлементы,
		ВидимыеЭлементы);
	
	ОбщегоНазначенияПоддержкаПроектовКлиентСервер.УстановитьВидимостьЭлементовФормыПоМассиву(Элементы, ВсеЭлементы, ВидимыеЭлементы);
	
	Элементы.ПоступлениеПоЗаказу.Видимость = 
		Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
	
	//НастройкаФормПоддержкаПроектов.ИзменитьЗаголовокПоХозяйственнойОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеИтогов()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		Элементы.СуммаНДС.ФорматРедактирования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧН='%1'", НСтр("ru = 'Без НДС'"));
		Элементы.СуммаСНДС.Заголовок = НСтр("ru = 'Всего'");
		Элементы.СуммаСНДС.Ширина = 14;
	Иначе
		Элементы.СуммаНДС.ФорматРедактирования = "";
		Элементы.СуммаСНДС.Заголовок = НСтр("ru = 'Всего с НДС'");
		Элементы.СуммаСНДС.Ширина = 10;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоПоследнимПоступлениямСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.НомерСтроки    КАК НомерСтроки,
	|	ИсходнаяТаблица.Номенклатура   КАК Номенклатура,
	|	ИсходнаяТаблица.Коэффициент    КАК Коэффициент
	|	
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка.МоментВремени          КАК МоментВремени,
	|	Товары.Номенклатура                  КАК Номенклатура,
	|	Товары.Цена                          КАК Цена,
	|	Товары.Ссылка.ЦенаВключаетНДС        КАК ЦенаВключаетНДС,
	|	Товары.СуммаНДС                      КАК СуммаНДС,
	|	Товары.СуммаСНДС                     КАК СуммаСНДС,
	|	Товары.Количество  КАК Количество,
	|	Товары.Ссылка.Валюта                 КАК Валюта
	|	
	|ПОМЕСТИТЬ ЦеныПоступлений
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаТовары
	|	ПО
	|		Товары.Номенклатура = ТаблицаТовары.Номенклатура
	|ГДЕ
	|	Товары.Ссылка.Проведен
	|	И Товары.Ссылка.Контрагент = &Контрагент
	|	И Товары.Ссылка.Дата <= &Дата
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПоступлений.Номенклатура         КАК Номенклатура,
	|	ЦеныПоступлений.Коэффициент          КАК Коэффициент,
	|	ЦеныПоступлений.Цена                 КАК Цена,
	|	ЦеныПоступлений.ЦенаВключаетНДС      КАК ЦенаВключаетНДС,
	|	ЦеныПоступлений.СуммаНДС             КАК СуммаНДС,
	|	ЦеныПоступлений.СуммаСНДС            КАК СуммаСНДС,
	|	ЦеныПоступлений.Количество           КАК Количество,
	|	ЦеныПоступлений.Валюта               КАК Валюта
	|	
	|ПОМЕСТИТЬ ЦеныПоследнихПоступлений
	|ИЗ
	|	ЦеныПоступлений КАК ЦеныПоступлений
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ЦеныПоступлений КАК Отбор
	|	ПО
	|		ЦеныПоступлений.Номенклатура = Отбор.Номенклатура
	|		И ЦеныПоступлений.МоментВремени < Отбор.МоментВремени
	|ГДЕ
	|	Отбор.МоментВремени ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки    КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Коэффициент
	|	* ВЫБОР
	|		КОГДА &ЦенаВключаетНДС = ЕСТЬNULL(ЦеныПоследнихПоступлений.ЦенаВключаетНДС, &ЦенаВключаетНДС)
	|			ТОГДА ЦеныПоследнихПоступлений.Цена
	|		КОГДА &ЦенаВключаетНДС
	|			ТОГДА ВЫРАЗИТЬ(ЦеныПоследнихПоступлений.СуммаСНДС / ЦеныПоследнихПоступлений.Количество КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ((ЦеныПоследнихПоступлений.СуммаСНДС - ЦеныПоследнихПоступлений.СуммаНДС) / ЦеныПоследнихПоступлений.Количество КАК ЧИСЛО(15, 2))
	|	КОНЕЦ
	|	/ ЕстьNULL(ЦеныПоследнихПоступлений.Коэффициент, 1)
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЦеныПоследнихПоступлений.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ЦеныПоследнихПоступлений КАК ЦеныПоследнихПоступлений
	|		
	|	ПО 
	|		ТаблицаТовары.Номенклатура = ЦеныПоследнихПоступлений.Номенклатура
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
	|	ПО 
	|		ЦеныПоследнихПоступлений.Валюта = КурсыВалютыЦены.Валюта
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	ПО
	|		ИСТИНА";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", Объект.Товары.Выгрузить(,"НомерСтроки, Номенклатура, Коэффициент"));
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		КэшированныеЗначения = Неопределено;
		
		Действия = ОбработкаТабличнойЧастиКлиентСервер;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
		ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекущаяСтрока = Объект.Товары[Выборка.НомерСтроки - 1];
			ТекущаяСтрока.Цена = Выборка.Цена;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ИспользоватьРаспоряженияНаОформление И Объект.ПоступлениеПоЗаказу);
			
		КонецЦикла;
		
		Если Объект.ПоступлениеПоЗаказу Тогда
			ОбновитьНадписьОтклоненийОтЦенЗаказа();
		КонецЕсли;
		
		ЦеныЗаполнены = Истина;
		
	Иначе
		ЦеныЗаполнены = Ложь;
	КонецЕсли;
	
	Возврат ЦеныЗаполнены;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(Знач АдресЗагруженныхДанных, КэшированныеЗначения)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя(), Действия.ПолучитьПараметрыЗаполненияЗарегистрированнойЦеныПроизводителя(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТаблицы);
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И ЗначениеЗаполнено(СтрокаТаблицы.Штрихкод) Тогда
			СтрокаТаблицы.Штрихкод = "";
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		
		ДействияПересчетСумм = Новый Структура;
		Если Не ЗначениеЗаполнено(НоваяСтрокаТовары.Сумма) Тогда
			ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСумму());
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтрокаТовары.СуммаНДС) Тогда
			ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтрокаТовары.СуммаСНДС) Тогда
			ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
		КонецЕсли;
		Если ДействияПересчетСумм.Количество() > 0 Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, ДействияПересчетСумм, КэшированныеЗначения);
		КонецЕсли;
		ОбновитьОтклоненияОтЗаказаВСтроке(НоваяСтрокаТовары, ИспользоватьРаспоряженияНаОформление И Объект.ПоступлениеПоЗаказу);
		
	КонецЦикла;
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщикаЗавершение(АдресВоВременномХранилище, ДополнительныеПараметры) Экспорт
	
	Если АдресВоВременномХранилище <> Неопределено Тогда
		ЗаполнитьНоменклатуруПоНоменклатуреПоставщикаСервер(АдресВоВременномХранилище, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыПоставщикаВоВременноеХранилище()
	
	Возврат ЗакупкиСервер.ПоместитьНоменклатуруПоставщикаВоВременноеХранилище(Объект.Товары);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщикаСервер(Знач АдресВоВременномХранилище, КэшированныеЗначения)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", ТекущаяСтрока.НомерСтроки));
		Если НайденныеСтроки.Количество() <> 1 Тогда
			Продолжить;
		Иначе
			СтрокаКоллекции = НайденныеСтроки[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ТекущаяСтрока, "Номенклатура, ЕдиницаИзмерения");
		
		Действия = ОбработкаТабличнойЧастиКлиентСервер;
		
		СтруктураДействий = Новый Структура;
		
		СтруктураДействий.Вставить(
			Действия.Действие_ПроверитьСопоставленнуюНоменклатуруПоставщика(),
			Действия.ПолучитьПараметрыПроверкиСопоставленнойНоменклатурыПоставщика(
				Объект,
				НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
		СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), СтрокаКоллекции.СерияНоменклатуры);
		СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), СтрокаКоллекции.ЕдиницаИзмерения);
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД());
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуЗакупки(), Действия.ПолучитьПараметрыЗаполненияЦеныЗакупки(Объект));
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя(), Действия.ПолучитьПараметрыЗаполненияЗарегистрированнойЦеныПроизводителя(Объект));
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
		ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения);
		
		Если ЗначениеЗаполнено(СтрокаКоллекции.Номенклатура) Тогда
			СтрокаКоллекции.Штрихкод = "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка штрихкодов
#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	
	ДействияСДобавленнымиСтроками = Новый Структура;
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре(), Объект.Контрагент);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЦенуЗакупки(), Действия.ПолучитьПараметрыЗаполненияЦеныЗакупки(Объект));
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя(), Действия.ПолучитьПараметрыЗаполненияЗарегистрированнойЦеныПроизводителя(Объект));
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьСумму());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСумму());
	
	ИзменятьКоличество = Не ТолькоПросмотр;
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиШтрихкодов(ДанныеШтрихкодов, ДействияСДобавленнымиСтроками, ДействияСИзмененнымиСтроками);
	ПараметрыДействия.ИзменятьКоличество = ИзменятьКоличество;
	ПараметрыДействия.ПараметрыУчетаНоменклатуры = Новый Структура(ПараметрыУчетаНоменклатуры);
	ПараметрыДействия.ПараметрыУчетаНоменклатуры.ИспользоватьПартии = Ложь;
	
	ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	Если ПараметрыДействия.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	
	Если ПараметрыДействия.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ПараметрыДействия.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбработатьШтрихкоды(ЭтотОбъект, Объект, ПараметрыДействия, КэшированныеЗначения);
	РассчитатьСостояниеЗаказа();
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиНенайденныхШтрихКодов(ЗарегистрированныеШтрихкоды = Неопределено)
	
	Если Не ОбработкаТабличнойЧастиКлиент.ЕстьНенайденныеШтрихкоды(Объект.Товары) Тогда
		Возврат;
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре(), Объект.Контрагент);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЦенуЗакупки(), Действия.ПолучитьПараметрыЗаполненияЦеныЗакупки(Объект));
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя(), Действия.ПолучитьПараметрыЗаполненияЗарегистрированнойЦеныПроизводителя(Объект));
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСумму());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиНенайденныхШтрихкодов();
	ПараметрыДействия.ДействияСИзмененнымиСтроками = ДействияСИзмененнымиСтроками;
	Если ЗарегистрированныеШтрихкоды <> Неопределено Тогда
		ПараметрыДействия.ЗарегистрированныеШтрихкоды = ЗарегистрированныеШтрихкоды;
	КонецЕсли;
	
	ОбновитьДанныеНенайденныхШтрихКодовНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	Если ПараметрыДействия.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	ОбработкаТабличнойЧастиКлиент.СообщитьОРезультатеОбновленияДанныхПоШтрихкодам(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНенайденныхШтрихКодовНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбновитьДанныеНенайденныхШтрихКодов(Объект, ПараметрыДействия, КэшированныеЗначения);
	РассчитатьСостояниеЗаказа();
	
КонецПроцедуры

#КонецОбласти // ОбработкаШтрихкодов

////////////////////////////////////////////////////////////////////////////////
// Обработка подбора
#Область ОбработкаПодбора

&НаСервере
Процедура ОбработатьПодбор(Знач АдресТоваровВХранилище, КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя(), Действия.ПолучитьПараметрыЗаполненияЗарегистрированнойЦеныПроизводителя(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	Товары = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	Для Каждого ВыбранныйТовар Из Товары Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранныйТовар);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбновитьОтклоненияОтЗаказаВСтроке(НоваяСтрока, ИспользоватьРаспоряженияНаОформление И Объект.ПоступлениеПоЗаказу);
		
	КонецЦикла;
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

#КонецОбласти // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// Работа с заказом поставщику
#Область Заказы

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтроки(ОписаниеОповещения, ТекущаяСтрока)
	
	// Если текущая строка не связана с заказом
	Если ТекущаяСтрока.КодСтроки = 0 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	// Если ни один из ключевых реквизитов не изменился
	Если ТекущаяСтрока.Номенклатура = ПредыдущиеРеквизитыСтроки.Номенклатура Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ТекстВопроса = НСтр("ru='Редактируемая строка перестанет быть связанной со строкой заказа. Продолжить?'");
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	// Если пользователь подтвердил изменение значения ключевого реквизита
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КодСтроки = 0;
		ДополнительныеПараметры.ТекущаяСтрока.ЦенаЗаказа = 0;
		ДополнительныеПараметры.ТекущаяСтрока.НоменклатураЗаказа = Неопределено;
		ОбновитьОтклоненияОтЗаказаВСтроке(ДополнительныеПараметры.ТекущаяСтрока, ИспользоватьРаспоряженияНаОформление И Объект.ПоступлениеПоЗаказу);
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Истина);
		
	Иначе
		
		// Если пользователь отказался менять связанную строку, возвращаем старые значения
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ТекущаяСтрока, ПредыдущиеРеквизитыСтроки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбораИзЗаказа()
	
	СписокКодовСтрок = Новый Массив;
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		Если ТекущаяСтрока.КодСтроки <> 0 Тогда
			Если СписокКодовСтрок.Найти(ТекущаяСтрока.КодСтроки) = Неопределено Тогда 
				СписокКодовСтрок.Добавить(ТекущаяСтрока.КодСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеСтрок = Новый Массив;
	Для Каждого КодСтроки Из СписокКодовСтрок Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", КодСтроки));
		Количество = 0;
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			Количество = Количество + ТекущаяСтрока.Количество;
		КонецЦикла;
		ДанныеСтрок.Добавить(Новый Структура("КодСтроки, Количество", КодСтроки, Количество));
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("РаспоряжениеНаОформление", Объект.ЗаказПоставщику);
	ПараметрыПодбора.Вставить("Валюта", Объект.Валюта);
	ПараметрыПодбора.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("ДанныеСтрок", ДанныеСтрок);
	
	Возврат ПараметрыПодбора;
	
КонецФункции

&НаСервере
Процедура ОбработатьПодборПоЗаказу(Знач АдресТоваровВХранилище)
	
	КэшированныеЗначения = Неопределено;
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияПересчетСумм = Новый Структура;
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", СтрокаТовара.КодСтроки));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекущаяСтрока = Объект.Товары.Добавить();
		ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
			ТекущаяСтрока = НайденныеСтроки[0];
		Иначе
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.Товары.Удалить(НайденнаяСтрока);
			КонецЦикла;
			ТекущаяСтрока = Объект.Товары.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		ТекущаяСтрока.Количество = СтрокаТовара.КоличествоВЕдиницахИзмерения;
		Если СтрокаТовара.ОстатокПоДокументу <> ТекущаяСтрока.Количество Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, ДействияПересчетСумм, КэшированныеЗначения);
		КонецЕсли;
		
		ТекущаяСтрока.ЦенаЗаказа = ТекущаяСтрока.Цена;
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ИспользоватьРаспоряженияНаОформление И Объект.ПоступлениеПоЗаказу);
		
	КонецЦикла;
	
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры);
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуСервер()
	
	Объект.Товары.Очистить();
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоОстаткамЗаказа();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры);
	
	ЗаполнитьЦеныНоменклатурыЗаказов();
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСостояниеЗаказа()
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ИспользоватьРаспоряженияНаОформление И Объект.ПоступлениеПоЗаказу);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ПоступлениеПоЗаказу)
	
	Если Не ПоступлениеПоЗаказу Или ТекущаяСтрока.КодСтроки = 0 Или ТекущаяСтрока.ЦенаЗаказа = 0 Или ТекущаяСтрока.Цена = ТекущаяСтрока.ЦенаЗаказа Тогда
		
		ТекущаяСтрока.ЦенаИзменилась = Ложь;
		ТекущаяСтрока.КартинкаИзмененияЦены = 8;
		ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 0;
		
	ИначеЕсли ТекущаяСтрока.Цена < ТекущаяСтрока.ЦенаЗаказа Тогда
		
		ТекущаяСтрока.ЦенаИзменилась = Истина;
		ТекущаяСтрока.КартинкаИзмененияЦены = 3;
		Если ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100 - (ТекущаяСтрока.ЦенаЗаказа * 100 / ТекущаяСтрока.Цена);
		Иначе
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.Цена > ТекущаяСтрока.ЦенаЗаказа Тогда
		
		ТекущаяСтрока.ЦенаИзменилась = Истина;
		ТекущаяСтрока.КартинкаИзмененияЦены = 1;
		Если ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100 - (ТекущаяСтрока.ЦенаЗаказа * 100 / ТекущаяСтрока.Цена);
		Иначе
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоступлениеПоЗаказу Тогда
		Если ТекущаяСтрока.КодСтроки = 0 Тогда
			ТекущаяСтрока.РасхождениеЗаказ = 1;
			ТекущаяСтрока.КартинкаРасхождениеЗаказ = 1;
		Иначе
			ТекущаяСтрока.РасхождениеЗаказ = 0;
			ТекущаяСтрока.КартинкаРасхождениеЗаказ = ?(ТекущаяСтрока.СтрокаОтсутствуетВЗаказе, 2, 0);
		КонецЕсли;
	Иначе
		ТекущаяСтрока.РасхождениеЗаказ = 0;
		ТекущаяСтрока.КартинкаРасхождениеЗаказ = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОкончанииОтвязкиСтрок(КоличествоОтработанныхСтрок, СтрокиОтвязаны = Истина)
	
	Если СтрокиОтвязаны Тогда
		ТекстОповещения = НСтр("ru='В документе от заказа отвязано строк (%%Количество%%).'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Количество%%", КоличествоОтработанныхСтрок);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки отвязаны'"),
			,
			ТекстОповещения,
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отвязаны'"),
			,
			НСтр("ru='Ни одна строка не была отвязана.'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРаспоряжениеНаОформление()
	
	ОтборЗаказов = Новый Структура;
	ОтборЗаказов.Вставить("Организация"       , Объект.Организация);
	ОтборЗаказов.Вставить("Контрагент"        , Объект.Контрагент);
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ОтборЗаказов.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли;
	ОтборЗаказов.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("Отбор", ОтборЗаказов);
	
	Оповещение = Новый ОписаниеОповещения("СвязатьСЗаказомПоставщику", ЭтотОбъект);
	ОткрытьФорму("Документ.ПоступлениеТоваров.Форма.ФормаВыбораРаспоряжения", ПараметрыФормыВыбора, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСЗаказомПоставщику(Заказ, ДополнительныеПараметры) Экспорт
	
	Если Заказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ЗаказПоставщику = Заказ;
	СвязатьСЗаказомПоставщикуСервер();
	
КонецПроцедуры

&НаСервере
Процедура СвязатьСЗаказомПоставщикуСервер()
	
	Объект.ПоступлениеПоЗаказу = Истина;
	ЗаполнитьИмяДокументаРаспоряжения();
	
	ПоляЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ЗаказПоставщику,
		"Контрагент, ДоговорКонтрагента, ЦенаВключаетНДС");
	
	Если Объект.ЦенаВключаетНДС <> ПоляЗаказа.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = ПоляЗаказа.ЦенаВключаетНДС;
		ОбработатьИзменениеЦенаВключаетНДС(Неопределено);
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ПривязатьСтрокиПоступленияКРаспоряжению();
		ОбновитьФормуПоЗаказу();
	Иначе
		Если ТипЗнч(Объект.ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ЗаполнитьПоЗаказуСервер();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовПоЗаказу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьОтЗаказаПоставщику(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОтвязатьОтЗаказаПоставщикуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОтвязатьОтЗаказаПоставщикуСервер()
	
	Объект.ПоступлениеПоЗаказу = Ложь;
	Объект.ЗаказПоставщику = Неопределено;
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		ТекущаяСтрока.КодСтроки = 0;
		ТекущаяСтрока.НоменклатураЗаказа = Неопределено;
	КонецЦикла;
	
	ОбновитьФормуПоЗаказу();
	УстановитьВидимостьЭлементовПоЗаказу();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоЗаказу()
	
	СкрываемыеЭлементы = Новый Массив;
	СкрываемыеЭлементы.Добавить(Элементы.ТоварыОтвязатьОтЗаказа.Имя);
	СкрываемыеЭлементы.Добавить(Элементы.ТоварыКомандаПодборИзЗаказа.Имя);
	СкрываемыеЭлементы.Добавить(Элементы.ТоварыЗаполнитьПоЗаказу.Имя);
	СкрываемыеЭлементы.Добавить(Элементы.ТоварыКодСтроки.Имя);
	СкрываемыеЭлементы.Добавить(Элементы.ТоварыЦенаЗаказа.Имя);
	СкрываемыеЭлементы.Добавить(Элементы.ТоварыКартинкаИзмененияЦены.Имя);
	СкрываемыеЭлементы.Добавить(Элементы.ТоварыПроцентОтклоненияОтЦеныЗаказа.Имя);
	СкрываемыеЭлементы.Добавить(Элементы.ТоварыПоказатьОтклоненияЦен.Имя);
	
	СкрываемыеЭлементы.Добавить(Элементы.ТоварыКонтекстноеМенюОтвязатьОтЗаказа.Имя);
	СкрываемыеЭлементы.Добавить(Элементы.ТоварыКонтекстноеМенюСвязатьСЗаказом.Имя);
	
	ОбщегоНазначенияПоддержкаПроектовКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, СкрываемыеЭлементы, "Видимость", ИспользоватьРаспоряженияНаОформление И Объект.ПоступлениеПоЗаказу);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоЗаказу()
	
	ЗаполнитьИмяДокументаРаспоряжения();
	ЗаполнитьЦеныНоменклатурыЗаказов();
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИмяДокументаРаспоряжения()
	
	ИмяДокументаРаспоряжения = "";
	Если Объект.ЗаказПоставщику <> Неопределено Тогда
		ИмяДокументаРаспоряжения = Объект.ЗаказПоставщику.Метаданные().Имя;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗависимыеРеквизитыФормыПоЗаказу(КоличествоРасхождений, НадписьРасхождениеЗаказ, КартинкаРасхождениеЗаказ)
	
	Если КоличествоРасхождений > 0 Тогда
		КартинкаРасхождениеЗаказ.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
		НадписьРасхождениеЗаказ = СтрЗаменить(НСтр("ru='Строк сверх заказа: %КоличествоРасхождений%'"), "%КоличествоРасхождений%", КоличествоРасхождений);
	Иначе
		КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
		НадписьРасхождениеЗаказ = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныНоменклатурыЗаказов(Знач ОтборСтрок = Неопределено)
	
	Если ОтборСтрок = Неопределено Тогда
		ОбрабатываемыеСтроки = Объект.Товары;
	Иначе
		ОбрабатываемыеСтроки = Новый Массив;
		Для Каждого ИдентификаторСтроки Из ОтборСтрок Цикл
			ОбрабатываемыеСтроки.Добавить(Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла;
		ОтборСтрок = ОбрабатываемыеСтроки;
	КонецЕсли;
	
	Если Не Объект.ПоступлениеПоЗаказу Тогда
		Для Каждого ТекСтрока Из ОбрабатываемыеСтроки Цикл
			ТекСтрока.ЦенаЗаказа = 0;
			ОбновитьОтклоненияОтЗаказаВСтроке(ТекСтрока, Объект.ПоступлениеПоЗаказу);
		КонецЦикла;
		ОбновитьНадписьОтклоненийОтЦенЗаказа();
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&ЗаказПоставщику         КАК ЗаказПоставщику,
	|	Товары.КодСтроки         КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА Товары.НоменклатураЗаказа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура
	|		ИНАЧЕ Товары.НоменклатураЗаказа
	|	КОНЕЦ                    КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	1       КАК Коэффициент
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.КодСтроки <> 0
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка,
	|	Заказ.Валюта КАК Валюта,
	|	Заказ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТоварыЗаказа.КодСтроки КАК КодСтроки,
	|	ТоварыЗаказа.Номенклатура КАК Номенклатура,
	|	ТоварыЗаказа.Сумма КАК Сумма,
	|	ТоварыЗаказа.СуммаНДС КАК СуммаНДС,
	|	ТоварыЗаказа.Количество КАК Количество,
	|	1 КАК Коэффициент,
	|	ТоварыЗаказа.Цена КАК Цена
	|ПОМЕСТИТЬ ТоварыЗаказа
	|ИЗ
	|	#РаспоряжениеТовары КАК ТоварыЗаказа
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		#Распоряжение КАК Заказ
	|		ПО
	|			Заказ.Ссылка = ТоварыЗаказа.Ссылка
	|ГДЕ
	|	ТоварыЗаказа.Ссылка В (&ЗаказПоставщику)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТоварыЗаказа.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтрокаОтсутствуетВЗаказе,
	|	ТаблицаТовары.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыЗаказа.ЦенаВключаетНДС, &ЦенаВключаетНДС) <> &ЦенаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыЗаказа.ЦенаВключаетНДС
	|						ТОГДА (ТоварыЗаказа.Сумма - ТоварыЗаказа.СуммаНДС) / ТоварыЗаказа.Количество
	|					ИНАЧЕ (ТоварыЗаказа.Сумма + ТоварыЗаказа.СуммаНДС) / ТоварыЗаказа.Количество
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(ТоварыЗаказа.Цена, 0)
	|	КОНЕЦ
	|	* ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыЗаказа.Коэффициент, 0) = 0
	|			ТОГДА 0 
	|		КОГДА ТоварыЗаказа.Коэффициент = ТаблицаТовары.Коэффициент
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаТовары.Коэффициент / ТоварыЗаказа.Коэффициент
	|	КОНЕЦ
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЕСТЬNULL(ТоварыЗаказа.Валюта, &Валюта)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсВалютыЗаказа.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыЗаказа.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсВалютыЗаказа.Курс * КурсВалюты.Кратность)
	|						/ (КурсВалюты.Курс * КурсВалютыЗаказа.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЦенаЗаказа
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТоварыЗаказа КАК ТоварыЗаказа
	|		ПО
	|			ТаблицаТовары.ЗаказПоставщику = ТоварыЗаказа.Ссылка
	|			И ТаблицаТовары.КодСтроки = ТоварыЗаказа.КодСтроки
	|			И ТаблицаТовары.Номенклатура = ТоварыЗаказа.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &Валюта) КАК КурсВалюты
	|		ПО
	|			ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента) КАК КурсВалютыЗаказа
	|		ПО
	|			КурсВалютыЗаказа.Валюта = ТоварыЗаказа.Валюта
	|";
	
	ИмяТаблицыЗаказа = Объект.ЗаказПоставщику.Метаданные().ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РаспоряжениеТовары", ИмяТаблицыЗаказа + ".Товары");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Распоряжение", ИмяТаблицыЗаказа);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(ОтборСтрок, "КодСтроки, Номенклатура, НоменклатураЗаказа, ЕдиницаИзмерения"));
	Запрос.УстановитьПараметр("ЗаказПоставщику", Объект.ЗаказПоставщику);
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	
	ЦеныЗаказа = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекущаяСтрока Из ОбрабатываемыеСтроки Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.КодСтроки) Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЗаказПоставщику", Объект.ЗаказПоставщику);
			СтруктураОтбора.Вставить("КодСтроки", ТекущаяСтрока.КодСтроки);
			СтруктураОтбора.Вставить("Номенклатура", ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураЗаказа), ТекущаяСтрока.НоменклатураЗаказа, ТекущаяСтрока.Номенклатура));
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", ТекущаяСтрока.ЕдиницаИзмерения);
			НайденныеСтроки = ЦеныЗаказа.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, НайденныеСтроки[0], "ЦенаЗаказа, СтрокаОтсутствуетВЗаказе");
			КонецЕсли;
		Иначе
			ТекущаяСтрока.ЦенаЗаказа = 0;
		КонецЕсли;
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Объект.ПоступлениеПоЗаказу);
	КонецЦикла;
	
	ОбновитьНадписьОтклоненийОтЦенЗаказа();
	
КонецПроцедуры

&НаСервере
Процедура ПривязатьСтрокиПоступленияКРаспоряжению()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СерияНоменклатуры КАК СерияНоменклатуры
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.КодСтроки = 0
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.Номенклатура              КАК Номенклатура,
	|	ТаблицаЗаказы.КодСтроки                 КАК КодСтроки,
	|	ТаблицаЗаказы.Количество                КАК КОформлениюОстаток
	|ПОМЕСТИТЬ ЗаказыПоставщикам
	|ИЗ
	|	&ЗаказыПоставщикам КАК ТаблицаЗаказы
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*)                        КАК КоличествоДублей,
	|	ЗаказыПоставщикам.Номенклатура       КАК Номенклатура
	|ПОМЕСТИТЬ ДублиТоваров
	|ИЗ
	|	ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|;
	|		
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПоставщикам.Номенклатура       КАК Номенклатура,
	|	ЗаказыПоставщикам.КодСтроки          КАК КодСтроки,
	|	ЗаказыПоставщикам.КОформлениюОстаток КАК КОформлениюОстаток,
	|	0                                    КАК Распределено,
	|	ДублиТоваров.КоличествоДублей        КАК КоличествоДублей
	|ИЗ
	|	ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДублиТоваров
	|		ПО
	|			ЗаказыПоставщикам.Номенклатура = ДублиТоваров.Номенклатура
	|";
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.ЗаказПоставщику);
	ОстаткиПоРаспоряжению = Менеджер.ПолучитьРезультатЗапросаПоОстаткам(Объект.ЗаказПоставщику, Объект.Ссылка);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(, "КодСтроки, Номенклатура, СерияНоменклатуры"));
	Запрос.УстановитьПараметр("ЗаказыПоставщикам", ОстаткиПоРаспоряжению.Выгрузить());
	
	ТаблицаНераспределенныхТоваров = Новый ТаблицаЗначений();
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("КодСтроки");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Количество");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураПоиска.Вставить("КодСтроки", 0);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		НераспределенноеКоличество = Выборка.КОформлениюОстаток;
		
		// Если дублей нет, распределяем строку заказа по строкам накладной
		Если Выборка.КоличествоДублей < 2 Тогда
			
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка, "КодСтроки");
				НераспределенноеКоличество = НераспределенноеКоличество - ТекущаяСтрока.Количество;
				
				Если НераспределенноеКоличество <= 0 Тогда
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
		// Если дубли есть, распределяем строки заказов по строкам накладной с учетом количества
		Иначе
			
			// На первом проходе заполним только если количество в строке заказа и накладной совпадают
			
			НайденаПодходящаяСтрока = Ложь;
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				Если ТекущаяСтрока.Количество = Выборка.КОформлениюОстаток Тогда
					
					НайденаПодходящаяСтрока = Истина;
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка, "КодСтроки");
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
			Если Не НайденаПодходящаяСтрока Тогда
				
				НоваяСтрока = ТаблицаНераспределенныхТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Количество = НераспределенноеКоличество;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределим дубли товаров, нераспределенные на первом проходе
	Если ТаблицаНераспределенныхТоваров.Количество() > 0 Тогда
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("КодСтроки", 0);
		
		СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТовары Из СтрокиТовары Цикл
			
			// Найдем нужные строки в таблице нераспределенных товаров
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
			
			НайденныеСтроки = ТаблицаНераспределенныхТоваров.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.Номенклатура = СтрокаТовары.Номенклатура
				   И НайденнаяСтрока.Количество > 0 Тогда
					
					ЗаполнитьЗначенияСвойств(СтрокаТовары, НайденнаяСтрока, "КодСтроки");
					
					// Уменьшим нераспределенное количество в таблице
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаТовары.Количество;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьОтклоненийОтЦенЗаказа()
	
	Если Объект.ПоступлениеПоЗаказу
	   И Объект.Товары.НайтиСтроки(Новый Структура("ЦенаИзменилась", Истина)).Количество() > 0 Тогда
		
		НадписьОтклонениеЦен = НСтр("ru='Цены отличаются от заказа'");
		Картинка = БиблиотекаКартинок.Предупреждение;
		ТекстПодсказки = НСтр("ru='Для установки фильтра по строкам с отклонением цены 
		|воспользуйтесь командой ""Показать отклонения цен"" в группе команд ""Цены""'");
	Иначе
		НадписьОтклонениеЦен = "";
		Картинка =  Новый Картинка();
		ТекстПодсказки = "";
	КонецЕсли;
	
	Элементы.КартинкаОтклонениеЦенЗаказ.Картинка  = Картинка;
	Элементы.НадписьОтклонениеЦенЗаказ.Подсказка  = ТекстПодсказки;
	Элементы.КартинкаОтклонениеЦенЗаказ.Подсказка = ТекстПодсказки;
	
КонецПроцедуры

#КонецОбласти // Заказы

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов
#Область ОбработкаИзмененияРеквизитов

&НаСервере
Процедура ЗаполнитьПодразделениеПоУмолчанию()
	
	Подразделение = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьПодразделениеПоУмолчанию(
		Объект.ПодразделениеОрганизации, Объект.Организация, ТаблицаОбъекта);
	Если Объект.ПодразделениеОрганизации <> Подразделение Тогда
		Объект.ПодразделениеОрганизации = Подразделение;
		ОбработатьИзменениеПодразделения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Объект.ДоговорКонтрагента = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьДоговорПоУмолчанию(
		Объект.ДоговорКонтрагента,
		Объект.Контрагент,
		Объект.Организация);
	ОбработатьИзменениеДоговораКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизации()
	
	ЗаполнитьПодразделениеПоУмолчанию();
	ЗаполнитьДоговорПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПодразделения()
	
	ОбщегоНазначенияПоддержкаПроектов.ИзменитьСкладПриНеобходимости(
		Объект.ПодразделениеОрганизации, Объект.Склад, ОсновнойСклад, ТаблицаОбъекта);
	ОбработатьИзменениеСклада();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеКонтрагента()
	
	ЗаполнитьДоговорПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДоговораКонтрагента()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ЗакупкиСервер.ПолучитьОсновныеРеквизитыДоговора(Объект.ДоговорКонтрагента);
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = РеквизитыДоговора.Организация;
			ЗаполнитьПодразделениеПоУмолчанию();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Контрагент;
		КонецЕсли;
		
		Объект.Валюта = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		
		Объект.ПроектЗадания = Объект.ДоговорКонтрагента.ПроектЗадания;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСклада()
	
	Если Склад = Объект.Склад Тогда
		Возврат;
	КонецЕсли;
	
	Склад = Объект.Склад;
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры);
	
	УстановитьДоступностьЭлементовПоСкладу();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеХозяйственнойОперации()
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		ОбработатьИзменениеНалогообложенияНДС();
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
			ОтвязатьОтЗаказаПоставщикуСервер();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНалогообложенияНДС()
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Объект.Товары, СтруктураДействий, Неопределено);
	
	НастроитьОтображениеИтогов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеЦенаВключаетНДС(КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗагрузкуДанныхИзТСД(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеВеса(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоВЕдиницахИзмерения = РезультатВыполнения.Вес;
		ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеВалюты()
	
	Оповещение = Новый ОписаниеОповещения("ПересчитатьСуммыВВалютуДокумента", ЭтотОбъект);
	ВзаимодействиеСПользователемКлиент.ПроверитьНеобходимостьПересчетаВВалюту(Объект.Товары, Объект.Валюта, ВалютаДокумента, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРазбиенияСтроки(НоваяСтрока, ТекущаяСтрока) Экспорт
	
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	ПриИзмененииКоличестваВСтрокеСпискаТовары(НоваяСтрока);
	
	Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыВВалютуДокумента(Ответ, ДополнительныеПараметры) Экспорт
	
	Если ВалютаДокумента <> Объект.Валюта Тогда
		
		ПересчитатьСуммы = (Ответ = КодВозвратаДиалога.Да);
		ПересчитатьСуммыВВалютуСервер(Объект.Валюта, ПересчитатьСуммы);
		Если ПересчитатьСуммы Тогда
			ВзаимодействиеСПользователемКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		КонецЕсли;
		
		ВалютаДокумента = Объект.Валюта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыВВалютуСервер(Знач НоваяВалюта, ПересчитатьСуммы)
	
	СтараяВалюта = ВалютаДокумента;
	КурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, Объект.Дата);
	КурсНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, Объект.Дата);
	
	Если ПересчитатьСуммы Тогда
		ОбработкаТабличнойЧастиСервер.ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Товары,
			Объект.ЦенаВключаетНДС,
			КурсовСтаройВалюты,
			КурсНовойВалюты);
	КонецЕсли;
		
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		ТекущаяСтрока.ЦенаЗаказа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
			ТекущаяСтрока.ЦенаЗаказа, КурсовСтаройВалюты, КурсНовойВалюты);
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ИспользоватьРаспоряженияНаОформление И Объект.ПоступлениеПоЗаказу);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработкаИзмененияРеквизитов

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбменаТоварами

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ТаблицаТовары = Элементы.Товары;
	Если ОбработкаТабличнойЧастиКлиент.ВозможноКопированиеСтрок(ТаблицаТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиВБуферОбмена(ТаблицаТовары.Имя);
		ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(ТаблицаТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ВставитьТоварыИзБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБуфераОбмена(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОткрытьБуферОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиВБуферОбмена(Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличнойЧастиСервер.СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, Объект[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары = Неопределено)
	
	ТаблицаТовары = Объект.Товары;
	КоличествоТоваровДоВставки = ТаблицаТовары.Количество();
	
	ВставитьТоварыИзБуфераОбменаСервер(ВыбранныеТовары);
	
	КоличествоВставленных = ТаблицаТовары.Количество() - КоличествоТоваровДоВставки;
	ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТоварыИзБуфераОбменаСервер(Знач ВыбранныеТовары = Неопределено)
	
	ТабличнаяЧасть = Объект.Товары;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПризнакВедетсяУчетПоГТД());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуЗакупки(), Действия.ПолучитьПараметрыЗаполненияЦеныЗакупки(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗарегистрированнуюЦенуПроизводителя(), Действия.ПолучитьПараметрыЗаполненияЗарегистрированнойЦеныПроизводителя(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ДанныеВставлены = ОбработкаТабличнойЧастиСервер.ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары, ТабличнаяЧасть, СтруктураДействий);
	Если ДанныеВставлены Тогда
		Модифицированность = Истина;
		
		РассчитатьСостояниеЗаказа();
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(ТабличнаяЧасть.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ЕстьДанныеВБуфереОбмена)
	
	Элементы = Форма.Элементы;
	Элементы.ТоварыБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
КонецПроцедуры

#КонецОбласти // БуферОбменаТоварами

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти // СтандартныеПодсистемы

&НаКлиенте
Процедура СоздатьСерии(Команда)
	Если Модифицированность = Истина Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо записать документ!");
		Возврат;
	КонецЕсли;
	ЕстьИзменения = Ложь;
	НайтиСоздатьСерииНоменклатурыДоПроведения(ЕстьИзменения);
	Если ЕстьИзменения Тогда
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НайтиСоздатьСерииНоменклатурыДоПроведения(ЕстьИзменения)
	СтруктураОтбора = Новый Структура("СтатусУказанияСерий", 6);
	СтрокиССериями = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	Если Объект.Ссылка.Пустая() Тогда
		Для Каждого Строка Из СтрокиССериями Цикл
			Если ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
			Серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			Серия.КодГода = Прав(Формат(Год(Объект.Дата),"ЧГ"), 2);
			Серия.КодЦентра = Объект.Центр.Код;
			Серия.КодДО = Объект.ПроектЗадания.ДобывающаяОрганизация.Код;
			Серия.КодГрифа = Строка.Гриф.Код;
			Серия.Владелец = Строка.Номенклатура;
			Серия.ПроектЗадания = Объект.ПроектЗадания;
			Серия.Записать();
			
			Строка.СерияНоменклатуры = Серия.Ссылка;
			ЕстьИзменения = Истина;
		КонецЦикла;
	Иначе
		Таблица = Объект.Товары.Выгрузить(СтрокиССериями);
		Таблица.Свернуть("Номенклатура", "Количество");
		Для Каждого Строка Из Таблица Цикл
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	СУММА(1) КАК КоличествоСерий
			               |ИЗ
			               |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			               |ГДЕ
			               |	СерииНоменклатуры.Владелец = &Владелец
			               |	И СерииНоменклатуры.Поставка = &Поставка
			               |	И НЕ СерииНоменклатуры.ПометкаУдаления
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	СерииНоменклатуры.Владелец,
			               |	СерииНоменклатуры.Поставка";
			Запрос.УстановитьПараметр("Владелец", Строка.Номенклатура);
			Запрос.УстановитьПараметр("Поставка", Объект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураОтбора = Новый Структура("Номенклатура", Строка.Номенклатура);
				СтрокиПоНоменклатуре = Объект.Товары.НайтиСтроки(СтруктураОтбора);
				Если Выборка.КоличествоСерий < Строка.Количество И Строка.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
					МассивСерий = Новый Массив();
					Для Каждого Строка Из СтрокиПоНоменклатуре Цикл
						Если ЗначениеЗаполнено(Строка.СерияНоменклатуры) И МассивСерий.Найти(Строка.СерияНоменклатуры) = Неопределено Тогда
							МассивСерий.Добавить(Строка.СерияНоменклатуры);
							Продолжить;
						КонецЕсли;
						Серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
						Серия.КодГода = Прав(Формат(Год(Объект.Дата),"ЧГ"), 2);
						Серия.КодЦентра = Объект.Центр.Код;
						Серия.КодДО = Объект.ПроектЗадания.ДобывающаяОрганизация.Код;
						Серия.КодГрифа = Строка.Гриф.Код;
						Серия.Владелец = Строка.Номенклатура;
						Серия.Поставка = Объект.Ссылка;
						Серия.ПроектЗадания = Объект.ПроектЗадания;
						Серия.Записать();
						
						Строка.СерияНоменклатуры = Серия.Ссылка;
						ЕстьИзменения = Истина;
					КонецЦикла;
				Иначе
					МассивИспользованных = Новый Массив();
					Для Каждого СтрокаПоНом Из СтрокиПоНоменклатуре Цикл
						Запрос = Новый Запрос();
						Запрос.Текст = "ВЫБРАТЬ
						               |	СерииНоменклатуры.Ссылка КАК Ссылка
						               |ИЗ
						               |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
						               |ГДЕ
						               |	СерииНоменклатуры.Владелец = &Владелец
						               |	И СерииНоменклатуры.Поставка = &Поставка
									   |	И НЕ СерииНоменклатуры.ПометкаУдаления
						               |	И НЕ СерииНоменклатуры.Ссылка В (&Ссылка)";
						Запрос.УстановитьПараметр("Владелец", СтрокаПоНом.Номенклатура);
						Запрос.УстановитьПараметр("Поставка", Объект.Ссылка);
						Запрос.УстановитьПараметр("Ссылка", МассивИспользованных);
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							Если МассивИспользованных.Найти(Выборка.Ссылка) = Неопределено Тогда
								СтрокаПоНом.СерияНоменклатуры = Выборка.Ссылка;
								МассивИспользованных.Добавить(Выборка.Ссылка);
								ЕстьИзменения = Истина;
							Иначе
								Серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
								Серия.КодГода = Прав(Формат(Год(Объект.Дата),"ЧГ"), 2);
								Серия.КодЦентра = Объект.Центр.Код;
								Серия.КодДО = Объект.ПроектЗадания.ДобывающаяОрганизация.Код;
								Серия.КодГрифа = СтрокаПоНом.Гриф.Код;
								Серия.Владелец = СтрокаПоНом.Номенклатура;
								Серия.Поставка = Объект.Ссылка;
								Серия.ПроектЗадания = Объект.ПроектЗадания;
								Серия.Записать();
								
								СтрокаПоНом.СерияНоменклатуры = Серия.Ссылка;
								ЕстьИзменения = Истина
							КонецЕсли;
						Иначе
							Серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
							Серия.КодГода = Прав(Формат(Год(Объект.Дата),"ЧГ"), 2);
							Серия.КодЦентра = Объект.Центр.Код;
							Серия.КодДО = Объект.ПроектЗадания.ДобывающаяОрганизация.Код;
							Серия.КодГрифа = СтрокаПоНом.Гриф.Код;
							Серия.Владелец = СтрокаПоНом.Номенклатура;
							Серия.Поставка = Объект.Ссылка;
							Серия.ПроектЗадания = Объект.ПроектЗадания;
							Серия.Записать();
							
							СтрокаПоНом.СерияНоменклатуры = Серия.Ссылка;
							ЕстьИзменения = Истина;	
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				СтруктураОтбора = Новый Структура("Номенклатура", Строка.Номенклатура);
				СтрокиПоНоменклатуре = Объект.Товары.НайтиСтроки(СтруктураОтбора);
				Для Каждого Строка Из СтрокиПоНоменклатуре Цикл
					Если ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
						Продолжить;
					КонецЕсли;
					Серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
					Серия.КодГода = Прав(Формат(Год(Объект.Дата),"ЧГ"), 2);
					Серия.КодЦентра = Объект.Центр.Код;
					Серия.КодДО = Объект.ПроектЗадания.ДобывающаяОрганизация.Код;
					Серия.КодГрифа = Строка.Гриф.Код;
					Серия.Владелец = Строка.Номенклатура;
					Серия.Поставка = Объект.Ссылка;
					Серия.ПроектЗадания = Объект.ПроектЗадания;
					Серия.Записать();
					
					Строка.СерияНоменклатуры = Серия.Ссылка;
					ЕстьИзменения = Истина;
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомера(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для заполнения учетных и заводских номеров документ должен быть записан!");
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПослеВводаНомеров", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ДокументПоступления", Объект.Ссылка);
	ОткрытьФорму("Документ.ПоступлениеТоваров.Форма.ВвестиДанныеПоНомерам", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПослеВводаНомеров(Значение, Параметры) Экспорт
	ОповеститьОбИзменении(Тип("СправочникСсылка.СерииНоменклатуры"));
	ЭтаФорма.Прочитать();
КонецПроцедуры

&НаСервере
Процедура РазбитьВсеНаСервере(ЕстьИзменения)
	СтруктураОтбора = Новый Структура("СтатусУказанияСерий", 6);
	СтрокиССериями = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	Для Каждого Строка Из СтрокиССериями Цикл
		Если Не Строка.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Количество > 1 Тогда
			Серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			Серия.КодДО = Объект.ПроектЗадания.ДобывающаяОрганизация.Код;
			Серия.КодЦентра = Объект.Центр.Код;
			Серия.КодГрифа = Строка.Гриф.Код;
			Серия.Владелец = Строка.Номенклатура;
			Серия.ПроектЗадания = Объект.ПроектЗадания;
			Серия.Записать();
			
			Строка.СерияНоменклатуры = Серия.Ссылка;
			
			СуммаСНДС = Строка.СуммаСНДС;
			Количество = Строка.Количество;
			Сумма = Строка.Сумма;
			СуммаНДС = Строка.СуммаНДС;
			Для Счетчик = 0 По Строка.Количество - 2 Цикл
				НоваяСтрока = Объект.Товары.Вставить(Строка.НомерСтроки + Счетчик);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "СерияНоменклатуры, Сумма, СуммаСНДС, СуммаНДС, Количество");
				НоваяСтрока.Количество = 1;
				НоваяСтрока.Цена = Строка.Цена;
				НоваяСтрока.СуммаСНДС = СуммаСНДС / Количество;
				НоваяСтрока.Сумма = Сумма / Количество;
				НоваяСтрока.СуммаНДС = СуммаНДС / Количество;
				
				Строка.СуммаСНДС = Строка.СуммаСНДС - НоваяСтрока.СуммаСНДС;
				Строка.Сумма = Строка.Сумма - НоваяСтрока.Сумма;
				Строка.СуммаНДС = Строка.СуммаНДС - НоваяСтрока.СуммаНДС;
				Строка.Количество = Строка.Количество - НоваяСтрока.Количество;
				
				Серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
				Серия.КодДО = Объект.ПроектЗадания.ДобывающаяОрганизация.Код;
				Серия.КодЦентра = Объект.Центр.Код;
				Серия.КодГрифа = НоваяСтрока.Гриф.Код;
				Серия.Владелец = НоваяСтрока.Номенклатура;
				Серия.ПроектЗадания = Объект.ПроектЗадания;
				Серия.Записать();
				
				НоваяСтрока.СерияНоменклатуры = Серия.Ссылка;
			КонецЦикла;
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазбитьВсе(Команда)
	ЕстьИзменения = Ложь;
	РазбитьВсеНаСервере(ЕстьИзменения);
	Если ЕстьИзменения Тогда
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ГрифПриИзмененииНаСервере()
	Гриф = Объект.Гриф;
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.Гриф = Гриф;
	конецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ГрифПриИзменении(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьГрифВТЧ", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Установить гриф во все строки документа?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГрифВТЧ(Результат, Параметры = Неопределено) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ГрифПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый НастройкиКомпоновкиДанных();
	
	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение = Элементы.Товары.ТекущиеДанные.Номенклатура;
	
	ГруппаОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ЭлементОтбора = ГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроектЗадания");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение = Объект.ПроектЗадания;

	
	//ЭлементОтбора = ГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Поставка");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	//ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	//
	//ЭлементОтбора = ГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Поставка");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	//ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Документ.ПоступлениеТоваров.ПустаяСсылка");

	//ЭлементОтбора = ГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Поставка");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	//ЭлементОтбора.ПравоеЗначение = Неопределено;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСерию", ЭтаФорма);
	ОткрытьФорму("Справочник.СерииНоменклатуры.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСерию(Результат, Параметры = Неопределено) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Элементы.Товары.ТекущиеДанные.СерияНоменклатуры = Результат;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦену(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьЦену", ЭтаФорма);
	Число = 0;
	ПоказатьВводЧисла(ОписаниеОповещения, Число, "Введите цену, которая будет установлена в текущую строку и далее", 12, 2);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦену(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	НачальнаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ОбщееКоличество = Объект.Товары.Количество();
	Для Счетчик = НачальнаяСтрока По ОбщееКоличество - 1 Цикл
		Элементы.Товары.ТекущиеДанные.Цена = Результат;
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(Элементы.Товары.ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		Элементы.Товары.ТекущаяСтрока = Счетчик + 1;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссии(Команда)
	ВзаимодействиеСПользователемКлиент.ОткрытьПодборЧленовКомиссии(Элементы.СоставКомиссии);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПостоянноДействующихКомиссий(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборКомиссии", ЭтотОбъект);
	ВзаимодействиеСПользователемКлиент.ВыбратьПостоянноДействующуюКомиссию(ЭтотОбъект, Объект.Организация, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКомиссии(ВыбранноеЗначение, НеИспользуется) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборКомиссииСервер(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборКомиссииСервер(Комиссия)
	
	ОбработкаТабличнойЧастиСервер.ЗаполнитьДанныеКомиссииИзПостоянноДействующейКомиссии(Комиссия, Объект, Объект.СоставКомиссии);
	
КонецПроцедуры
