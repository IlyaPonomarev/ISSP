#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.СпецификацияКДоговору") Тогда
		ЗаполнитьДокументНаОснованииСпецификацииКДоговору(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ВходнойКонтроль") Тогда
		ЗаполнитьДокументНаОснованииВходногоКонтроля(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПроектЗадания") Или ТипДанныхЗаполнения = Тип("ДокументСсылка.ГЗ") Тогда
		ЗаполнитьПоПроекту(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
	ЗаполнитьПоЗначениямАвтозаполнения();
	
	ОбщегоНазначенияПоддержкаПроектов.ЗаполнитьРеквизитыПоСкладу(ЭтотОбъект);
	
	Если Товары.Количество() > 0 Тогда
		ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Согласован = Ложь;
	
	ДатаВходящегоДокумента = Дата(1, 1, 1);
	НомерВходящегоДокумента = "";
	ПредъявленСчетФактура = Ложь;
	ДатаВходящегоСчетаФактуры = Дата(1, 1, 1);
	НомерВходящегоСчетаФактуры = "";
	
	ПоступлениеПоЗаказу = Ложь;
	ЗаказПоставщику = Неопределено;
	Для Каждого ТекущаяСтрока Из Товары Цикл
		ТекущаяСтрока.КодСтроки = 0;
		ТекущаяСтрока.НоменклатураЗаказа = Неопределено;
	КонецЦикла;
	
	ИнициализироватьДокумент();
	
	ОбщегоНазначенияПоддержкаПроектов.ЗаполнитьРеквизитыПоСкладу(ЭтотОбъект);
	
	Если Товары.Количество() > 0 Тогда
		ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//Если Не Валюта = ПроектЗадания.Валюта И Не ПроектЗадания.ЗаСчетСредствФОИВ Тогда
		//Отказ = Истина;
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Валюта поступления отличается от валюты проекта!");
	//КонецЕсли;
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, НепроверяемыеРеквизиты, Отказ);
	
	ВсеРеквизиты = Неопределено;
	РеквизитыОперации = Неопределено;
	Документы.ПоступлениеТоваров.ЗаполнитьИменаРеквизитовПоТипуОперации(ХозяйственнаяОперация, ВсеРеквизиты, РеквизитыОперации);
	ОбщегоНазначенияПоддержкаПроектовКлиентСервер.ЗаполнитьНепроверяемыеРеквизиты(НепроверяемыеРеквизиты, ВсеРеквизиты, РеквизитыОперации);
	
	ОперацияНеОблагаетсяНДС = ЭтоОперацияБезвозмездногоПоступления(ХозяйственнаяОперация)
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
		
	Если Не ПоступлениеПоЗаказу Тогда
		НепроверяемыеРеквизиты.Добавить("ЗаказПоставщику");
	КонецЕсли;	
		
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ПроверитьЗаполнениеСерийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияНоменклатурыПоставщика(ЭтотОбъект, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
	СтруктураОтбора = Новый Структура("СтатусУказанияСерий", 6);
	СтрокиССериями = Товары.НайтиСтроки(СтруктураОтбора);
	НоменклатураПоСериям = Товары.Выгрузить(СтрокиССериями);
	НоменклатураПоСериям.Свернуть("Номенклатура, СерияНоменклатуры", "Количество");
	Для Каждого Строка Из НоменклатураПоСериям Цикл
		Если Строка.Количество > 1 И Строка.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для нескольких строк с номенклатурой '" + Строка(Строка.Номенклатура) + "' указана одна и та же серия '" + Строка(Строка.СерияНоменклатуры) + "'.");
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеПоддержкаПроектов.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбработкаТабличнойЧастиСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	СуммаДокумента = ЦенообразованиеПоддержкаПроектовКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС);
	
	ЗапасыСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
	ВсеРеквизиты = Неопределено;
	РеквизитыОперации = Неопределено;
	Документы.ПоступлениеТоваров.ЗаполнитьИменаРеквизитовПоТипуОперации(ХозяйственнаяОперация, ВсеРеквизиты, РеквизитыОперации);
	ОбщегоНазначенияПоддержкаПроектов.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ВсеРеквизиты, РеквизитыОперации);
	
	ОперацияНеОблагаетсяНДС = ЭтоОперацияБезвозмездногоПоступления(ХозяйственнаяОперация)
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
	Если ОперацияНеОблагаетсяНДС Тогда
		НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Справочники.ПартииНоменклатуры.ЗаполнитьПартиюВКоллекции(ЭтотОбъект, Контрагент);
		ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(Товары, Отказ);
	КонецЕсли;
	
	ЗаполнитьСписокЗависимыхЗаказов(); 
	
	Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		Если ПроектЗадания <> ЗаказПоставщику.ПроектЗадания Тогда
			ПроектЗадания = ЗаказПоставщику.ПроектЗадания;
		КонецЕсли;
	Иначе
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//НайтиСоздатьСерииНоменклатурыДоПроведения(Отказ);
	
	ПроведениеПоддержкаПроектов.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	
	//ИзменитьСерииПослеПроведения(Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеПоддержкаПроектов.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура НайтиСоздатьСерииНоменклатурыДоПроведения(Отказ)
	СтруктураОтбора = Новый Структура("СтатусУказанияСерий, СерияНоменклатуры", 6, Справочники.СерииНоменклатуры.ПустаяСсылка());
	СтрокиССериями = Товары.НайтиСтроки(СтруктураОтбора);
	Если ЭтоНовый() Тогда
		Для Каждого Строка Из СтрокиССериями Цикл
			Серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			Серия.КодГода = Прав(Формат(Год(Дата),"ЧГ"), 2);
			Серия.КодЦентра = Центр.Код;
			Серия.КодДО = ПроектЗадания.ДобывающаяОрганизация.Код;
			Серия.КодГрифа = Строка.Гриф.Код;
			Серия.Владелец = Строка.Номенклатура;
			Серия.Записать();
			
			Строка.СерияНоменклатуры = Серия.Ссылка;
		КонецЦикла;
	Иначе
		Таблица = Товары.Выгрузить(СтрокиССериями);
		Таблица.Свернуть("Номенклатура", "Количество");
		Для Каждого Строка Из Таблица Цикл
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	СУММА(1) КАК КоличествоСерий
			               |ИЗ
			               |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
			               |ГДЕ
			               |	СерииНоменклатуры.Владелец = &Владелец
			               |	И СерииНоменклатуры.Поставка = &Поставка
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	СерииНоменклатуры.Владелец,
			               |	СерииНоменклатуры.Поставка";
			Запрос.УстановитьПараметр("Владелец", Строка.Номенклатура);
			Запрос.УстановитьПараметр("Поставка", Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Количество < Строка.Количество Тогда
					СтруктураОтбора = Новый Структура("Номенклатура", Строка.Номенклатура);
					СтрокиПоНоменклатуре = Товары.НайтиСтроки(СтруктураОтбора);
					Для Каждого Строка Из СтрокиПоНоменклатуре Цикл
						Если ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
							Продолжить;
						КонецЕсли;
						Серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
						Серия.КодГода = Прав(Формат(Год(Дата),"ЧГ"), 2);
						Серия.КодЦентра = Центр.Код;
						Серия.КодДО = ПроектЗадания.ДобывающаяОрганизация.Код;
						Серия.КодГрифа = Строка.Гриф.Код;
						Серия.Владелец = Строка.Номенклатура;
						Серия.Записать();
						
						Строка.СерияНоменклатуры = Серия.Ссылка;	
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьСерииПослеПроведения(Отказ)
	БылоИзменениеВладельцаСерий = Ложь;
	Если Не Отказ Тогда
		СтруктураОтбора = Новый Структура("СтатусУказанияСерий", 6);
		СтрокиССериями = Товары.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из СтрокиССериями Цикл
			Если Не ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
			Серия = Строка.СерияНоменклатуры.ПолучитьОбъект();
			Серия.Поставка = Ссылка;
			Серия.ПометкаУдаления = Ложь;
			Если Не НеИзменятьСерии Тогда
				Серия.КодГода = Прав(Формат(Год(Дата),"ЧГ"), 2);
				Серия.КодЦентра = Центр.Код;
				Серия.КодДО = ПроектЗадания.ДобывающаяОрганизация.Код;
				Серия.КодГрифа = Строка.Гриф.Код;
			КонецЕсли;
			Если Не Серия.Владелец = Строка.Номенклатура Тогда
				Серия.Владелец = Строка.Номенклатура;
				БылоИзменениеВладельцаСерий = Истина;
			КонецЕсли;
			Серия.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Если БылоИзменениеВладельцаСерий Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Зарегистрировано изменение владельца серий номенклатуры!");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СерииНоменклатуры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	               |ГДЕ
	               |	(СерииНоменклатуры.Поставка = &Поставка
	               |				И НЕ СерииНоменклатуры.Ссылка В (&Серии)
	               |			ИЛИ СерииНоменклатуры.Поставка = Неопределено)
	               |	И СерииНоменклатуры.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Поставка", Ссылка);
	Запрос.УстановитьПараметр("Серии", Товары.Выгрузить().ВыгрузитьКолонку("СерияНоменклатуры"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Серия = Выборка.Ссылка.ПолучитьОбъект();
		Серия.ПометкаУдаления = Истина;
		Серия.Записать();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение документа
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Автор = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = Валюта;
	КонецЕсли;
	
	ЗаполнитьПоляПоУмолчанию();
	
КонецПроцедуры

Процедура ЗаполнитьПоляПоУмолчанию()
	
	Организация = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	ПодразделениеОрганизации = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьПодразделениеПоУмолчанию(ПодразделениеОрганизации, Организация);
	Склад = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПодразделениеОрганизации);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения()
	
	ОбщегоНазначенияПоддержкаПроектов.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "Организация, Склад");
	ОбщегоНазначенияПоддержкаПроектов.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "ПодразделениеОрганизации", "Организация");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	ОбщегоНазначенияПоддержкаПроектов.ПроверитьЗаполнениеДоговораКонтрагента(ЭтотОбъект);
	ОбщегоНазначенияПоддержкаПроектов.ПроверитьЗаполнениеПодразделенияОрганизации(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		ВалютаВзаиморасчетов = Валюта;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоОстаткамЗаказа() Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗаказПоставщику);
	РезультатЗапроса = Менеджер.ПолучитьРезультатЗапросаПоОстаткам(ЗаказПоставщику, Ссылка);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по документу ""%Спецификация%"" .'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Спецификация%", ЗаказПоставщику);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс",      Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	КурсНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияПересчетСумм = Новый Структура;
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(ЭтотОбъект);
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТовара = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, Выборка);
		
		НеобходимПересчетСумм = (Выборка.Количество <> Выборка.КоличествоПоДокументу);
		
		Если Выборка.ЦенаВключаетНДС <> ЦенаВключаетНДС Тогда
			Если Выборка.ЦенаВключаетНДС Тогда
				СтрокаТовара.Сумма = Выборка.СуммаСНДС - Выборка.СуммаНДС;
			Иначе
				СтрокаТовара.Сумма = Выборка.СуммаСНДС
			КонецЕсли;
			СтрокаТовара.Цена = СтрокаТовара.Сумма / Выборка.КоличествоПоДокументу;
		КонецЕсли;
		
		Если Выборка.Валюта <> Валюта Тогда
			
			НеобходимПересчетСумм = Истина;
			ПараметрыОтбора = Новый Структура("Валюта, Дата", Выборка.Валюта, НачалоДня(Выборка.Дата));
			КурсыВалюты = ТаблицаКурсовВалют.НайтиСтроки(ПараметрыОтбора);
			
			Если КурсыВалюты.Количество() = 0 Тогда
				КурсВалюты = ТаблицаКурсовВалют.Добавить();
				КурсВалюты.Валюта = Выборка.Валюта;
				КурсВалюты.Дата = НачалоДня(Выборка.Дата);
				
				ПараметрыКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата);
				КурсВалюты.Курс = ПараметрыКурса.Курс;
				КурсВалюты.Кратность = ПараметрыКурса.Кратность;
			Иначе
				КурсВалюты = КурсыВалюты[0];
				
			КонецЕсли;
			
			СтрокаТовара.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТовара.Цена, КурсВалюты, КурсНовойВалюты);
			
		КонецЕсли;
		
		Если НеобходимПересчетСумм Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, ДействияПересчетСумм, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСпецификацииКДоговору(ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                   КАК ЗаказПоставщику,
	|	ДанныеДокумента.Организация                              КАК Организация,
	|	ДанныеДокумента.ПодразделениеОрганизации                 КАК ПодразделениеОрганизации,
	|	ДанныеДокумента.ПроектЗадания				         	 КАК ПроектЗадания,
	|	ДанныеДокумента.Партнер                                  КАК Партнер,
	|	ДанныеДокумента.Контрагент                               КАК Контрагент,
	|	ДанныеДокумента.ДоговорКонтрагента                       КАК ДоговорКонтрагента,
	|	ДанныеДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов  КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Валюта                                   КАК Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС                          КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.НалогообложениеНДС                       КАК НалогообложениеНДС,
	|	НЕ ДанныеДокумента.Проведен                              КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Статус В (&ДопустимыеСтатусы)
	|				ИЛИ ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификацийКДоговорам.Закрыт)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                    КАК ЕстьОшибкиСтатус,
	|	ДанныеДокумента.Статус                                   КАК Статус
	|ИЗ
	|	Документ.СпецификацияКДоговору КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ДопустимыеСтатусы = Новый Массив();
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыСпецификацийКДоговорам.КВыполнению);
	Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыЗаказа = РезультатЗапроса.Выбрать();
	РеквизитыЗаказа.Следующий();
	
	ОбщегоНазначенияПоддержкаПроектов.ПроверитьВозможностьВводаНаОсновании(
		РеквизитыЗаказа.ЗаказПоставщику,
		РеквизитыЗаказа.ЕстьОшибкиПроведен,
		РеквизитыЗаказа.Статус,
		РеквизитыЗаказа.ЕстьОшибкиСтатус,
		ДопустимыеСтатусы);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
	ПоступлениеПоЗаказу = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииВходногоКонтроля(ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                   КАК ЗаказПоставщику,
	|	ДанныеДокумента.Организация                              КАК Организация,
	|	ДанныеДокумента.ПроектЗадания				         	 КАК ПроектЗадания
	|ИЗ
	|	Документ.СпецификацияКДоговору КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ДопустимыеСтатусы = Новый Массив();
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыСпецификацийКДоговорам.КВыполнению);
	Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыЗаказа = РезультатЗапроса.Выбрать();
	РеквизитыЗаказа.Следующий();
	
	ОбщегоНазначенияПоддержкаПроектов.ПроверитьВозможностьВводаНаОсновании(
		РеквизитыЗаказа.ЗаказПоставщику,
		РеквизитыЗаказа.ЕстьОшибкиПроведен,
		РеквизитыЗаказа.Статус,
		РеквизитыЗаказа.ЕстьОшибкиСтатус,
		ДопустимыеСтатусы);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
	ПоступлениеПоЗаказу = Истина;
	
КонецПроцедуры


Процедура ЗаполнитьПоПроекту(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения,,"Номер,Дата,Гриф,Ответственный,Автор,Проведен");
	ЭтотОбъект.ПроектЗадания = ДанныеЗаполнения;
	Если Не ДанныеЗаполнения.ПроизвольныйПредметПроекта Тогда
		Для Каждого Строка Из ДанныеЗаполнения.ПредметыПроекта Цикл
			Если Строка.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
				Для Счетчик = 1 По Строка.Количество Цикл
					НоваяСтрока = ЭтотОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,,"Количество");
					НоваяСтрока.Количество = 1;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Номенклатура,"ЕдиницаИзмерения, СтавкаНДС");
				КонецЦикла;
			Иначе
				НоваяСтрока = ЭтотОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Номенклатура,"ЕдиницаИзмерения, СтавкаНДС");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция СписокРегистровДляКонтроля() Экспорт
	
	РегистрыДляКонтроля = Новый Массив;
	
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
		РегистрыДляКонтроля.Добавить(Движения.СебестоимостьТоваров);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РегистрыДляКонтроля.Добавить(Движения.ЗаказыПоставщикам);
	КонецЕсли;
	
	Возврат РегистрыДляКонтроля;
	
КонецФункции

Функция ЭтоОперацияБезвозмездногоПоступления(Операция)
	
	БезвозмездноеПоступление = Новый Массив;
	БезвозмездноеПоступление.Добавить(Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеВнутриведомственное);
	БезвозмездноеПоступление.Добавить(Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеМежбюджетное);
	БезвозмездноеПоступление.Добавить(Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеПрочее);
	
	Возврат БезвозмездноеПоступление.Найти(Операция) <> Неопределено;
	
КонецФункции

Процедура ЗаполнитьСписокЗависимыхЗаказов()
	
	Если Не ЭтоНовый() Тогда
		РеквизитыДоЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ПоступлениеПоЗаказу, ЗаказПоставщику");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	ИзменитьСерииПослеПроведения(Отказ);
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли