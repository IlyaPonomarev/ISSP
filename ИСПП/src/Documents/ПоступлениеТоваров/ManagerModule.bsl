#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Имена реквизитов, от значений которых зависят параметры учета номенклатуры
//
// Возвращаемое значение:
//   Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУчетаНоменклатуры() Экспорт
	
	Возврат "Склад";
	
КонецФункции

// Возвращает параметры учета для номенклатуры, указанной в документе
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
// Возвращаемое значение:
//   Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУчетаНоменклатуры
//
Функция ПараметрыУчетаНоменклатуры(Объект) Экспорт
	
	ПараметрыУчета = ЗапасыСервер.ПараметрыУчетаНоменклатуры();
	ПараметрыУчета.ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ПараметрыУчетаНаСкладе = СкладыСервер.ПараметрыУчетаНоменклатуры(Объект.Склад);
	ПараметрыУчета.ИспользоватьСерии = ПараметрыУчетаНаСкладе.ИспользоватьСерииНоменклатуры;
	ПараметрыУчета.ИспользоватьПартии = ПараметрыУчетаНаСкладе.ИспользоватьПартии;
	ПараметрыУчета.Склад = Объект.Склад;
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыУчета;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания параметров учета номенклатуры
//
// Параметры:
//   ПараметрыУчетаНоменклатуры - Структура - состав полей задается в функции ЗапасыСервер.ПараметрыУчетаНоменклатуры
//
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры) Экспорт
	
	Возврат ЗапасыСервер.ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры);
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьИменаРеквизитовПоТипуОперации(ХозяйственнаяОперация, ВсеРеквизиты, РеквизитыОперации) Экспорт

	ВсеРеквизиты = Новый Массив;
	ВсеРеквизиты.Добавить("ПодотчетноеЛицо");
	ВсеРеквизиты.Добавить("ПринятьНДСКВычету");
	ВсеРеквизиты.Добавить("Контрагент");
	ВсеРеквизиты.Добавить("ДоговорКонтрагента");
	ВсеРеквизиты.Добавить("НалогообложениеНДС");

	РеквизитыОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		РеквизитыОперации.Добавить("ПодотчетноеЛицо");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
		РеквизитыОперации.Добавить("ПринятьНДСКВычету");
		РеквизитыОперации.Добавить("Контрагент");
		РеквизитыОперации.Добавить("ДоговорКонтрагента");
		РеквизитыОперации.Добавить("НалогообложениеНДС");
	Иначе
		РеквизитыОперации.Добавить("Контрагент");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Загрузка из файла.
#Область ЗагрузкаИзФайла

//@skip-check module-empty-method
//@skip-check doc-comment-parameter-section
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(ПараметрыЗагрузкиИзФайла) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов.
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
//@skip-check doc-comment-type
//@skip-check doc-comment-field-in-description-suggestion
//@skip-check doc-comment-field-type
//@skip-check doc-comment-field-type-strict
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Товары =  ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	СтавкиНДС = Новый Соответствие;
	Для Каждого Значение Из Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления Цикл
		СтавкиНДС.Вставить(ВРег(СтрЗаменить(Значение.Синоним, " ", "")), Перечисления.СтавкиНДС[Значение.Имя]);
	КонецЦикла;
	
	//@skip-check unknown-method-property
	ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(ЗагружаемыеДанные.ВыгрузитьКолонку("Штрихкод"));
	ТаблицаНоменклатуры = ЗаполнитьТаблицуНоменклатуры(ДополнительныеПараметры.Контрагент);
	ПодобраннаяНоменклатура = Новый Соответствие;
	
	//НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		СтрокаПоискаШтрихкод       = СтрЗаменить(СтрокаТаблицы.Штрихкод, " ", "");
		СтрокаПоискаАртикул        = ВРег(СтрЗаменить(СтрокаТаблицы.Артикул, " ", ""));
		СтрокаПоискаНоменклатура   = ВРег(СтрЗаменить(СтрокаТаблицы.НоменклатураНаименование, " ", ""));
		
		ПохожаяНоменклатура = Новый Массив;
		
		Если ЗначениеЗаполнено(СтрокаПоискаШтрихкод) Тогда
			
			НайденнаяСтрока = ДанныеПоШтрихкодам.Получить(СтрокаПоискаШтрихкод);
			Если НайденнаяСтрока.Количество() > 0 Тогда
				ПохожаяНоменклатура.Добавить(НайденнаяСтрока.Номенклатура);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаПоискаАртикул) Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск",
				СтрокаПоискаАртикул,
				СтрокаПоискаНоменклатура));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск",
				СтрокаПоискаАртикул,
				СтрокаПоискаНоменклатура));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск", 
						СтрокаПоискаАртикул));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск, НоменклатураПоставщикаПоиск", 
							СтрокаПоискаАртикул, 
							СтрокаПоискаНоменклатура));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск", 
									СтрокаПоискаАртикул));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если ПохожаяНоменклатура.Найти(НайденнаяСтрока.Номенклатура) = Неопределено Тогда
					ПохожаяНоменклатура.Добавить(НайденнаяСтрока.Номенклатура);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаПоискаНоменклатура) Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоиск", СтрокаПоискаНоменклатура));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НоменклатураПоставщикаПоиск", СтрокаПоискаНоменклатура));
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если ПохожаяНоменклатура.Найти(НайденнаяСтрока.Номенклатура) = Неопределено Тогда
					ПохожаяНоменклатура.Добавить(НайденнаяСтрока.Номенклатура);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Товар = Товары.Добавить();
		Товар.Идентификатор = СтрокаТаблицы.Идентификатор;
		Товар.Штрихкод = СтрокаПоискаШтрихкод;
		Если ПохожаяНоменклатура.Количество() = 1 Тогда
			Товар.Номенклатура = ПохожаяНоменклатура[0];
		ИначеЕсли ПохожаяНоменклатура.Количество() > 1 Тогда
			Неоднозначность = СписокНеоднозначностей.Добавить();
			Неоднозначность.Колонка = "Номенклатура";
			Неоднозначность.Идентификатор = СтрокаТаблицы.Идентификатор;
			ПараметрыПоиска = Новый Структура("Штрихкод, Артикул, НоменклатураНаименование");
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаТаблицы);
			ПодобраннаяНоменклатура.Вставить(ОбщегоНазначения.ЗначениеВСтрокуXML(ПараметрыПоиска), ПохожаяНоменклатура);
		КонецЕсли;
		Товар.Количество = СтрокаТаблицы.Количество;
		Товар.Цена = СтрокаТаблицы.Цена;
		Товар.ЦенаПроизводителя = СтрокаТаблицы.ЦенаПроизводителя;
		Товар.Сумма = СтрокаТаблицы.Сумма;
		Товар.СтавкаНДС = СтавкиНДС.Получить(ВРег(СтрЗаменить(СтрокаТаблицы.СтавкаНДС, " ", "")));
		Товар.СуммаНДС = СтрокаТаблицы.СуммаНДС;
		Товар.СуммаСНДС = СтрокаТаблицы.СуммаСНДС;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	ДополнительныеПараметры.Вставить("ПодобраннаяНоменклатура", ПодобраннаяНоменклатура);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//  ПолноеИмяТабличнойЧасти  - Строка    - полное имя табличной части, в которую загружаются данные.
//  СписокНеоднозначностей    - Массив   - Массив для заполнения с неоднозначными данными.
//  ИмяКолонки                - Строка   - Имя колонки, в который возникла неоднозначность.
//  ЗагружаемыеЗначенияСтрока - Строка   - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
//@skip-check doc-comment-collection-item-type
//@skip-check doc-comment-type
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда
		Неоднозначности = ДополнительныеПараметры.ПодобраннаяНоменклатура.Получить(ОбщегоНазначения.ЗначениеВСтрокуXML(ЗагружаемыеЗначенияСтрока));
		Если Неоднозначности <> Неопределено Тогда
			СписокНеоднозначностей = Неоднозначности;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьТаблицуНоменклатуры(Контрагент)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Код КАК Код,
	|	Данные.Артикул КАК Артикул,
	|	Данные.Артикул КАК АртикулПоиск,
	|	Данные.Наименование КАК Наименование,
	|	Данные.Наименование КАК НаименованиеПоиск,
	|	Данные.НаименованиеПолное КАК НаименованиеПолное,
	|	Данные.НаименованиеПолное КАК НаименованиеПолноеПоиск,
	|	Данные.Ссылка КАК Номенклатура,
	|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика,
	|	НоменклатураПоставщиков.Наименование КАК НоменклатураПоставщикаПоиск,
	|	НоменклатураПоставщиков.Артикул КАК АртикулПоставщика,
	|	НоменклатураПоставщиков.Артикул КАК АртикулПоставщикаПоиск
	|	
	|ИЗ
	|	Справочник.Номенклатура КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО Данные.Ссылка = НоменклатураПоставщиков.Номенклатура
	|			И НЕ НоменклатураПоставщиков.ПометкаУдаления
	|			И НоменклатураПоставщиков.Владелец = &Контрагент
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
		ТекСтрока.Код = ВРег(СтрЗаменить(ТекСтрока.Код, " ", ""));
		ТекСтрока.АртикулПоиск = ВРег(СтрЗаменить(ТекСтрока.АртикулПоиск, " ", ""));
		ТекСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеПоиск, " ", ""));
		ТекСтрока.НаименованиеПолноеПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеПолноеПоиск, " ", ""));
		ТекСтрока.НоменклатураПоставщикаПоиск = ВРег(СтрЗаменить(ТекСтрока.НоменклатураПоставщикаПоиск, " ", ""));
		ТекСтрока.АртикулПоставщикаПоиск = ВРег(СтрЗаменить(ТекСтрока.АртикулПоставщикаПоиск, " ", ""));
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры
	
КонецФункции

#КонецОбласти // ЗагрузкаИзФайла

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
//@skip-check module-empty-method
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти // СтандартныеПодсистемы

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьНалогообложениеНДСДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваров
	|ГДЕ
	|	НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	И НЕ ПометкаУдаления
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьНалогообложениеНДСОтложено(Параметры) Экспорт
	
	МетаданныеОбъекта = ПустаяСсылка().Метаданные();
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	//МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Документ = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Документ = Неопределено
			 Или ЗначениеЗаполнено(Документ.НалогообложениеНДС) Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
				Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			ИначеЕсли ЗначениеЗаполнено(Документ.ХозяйственнаяОперация) Тогда
				Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			Иначе
				Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Документ);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,
				Выборка.Ссылка,
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти // ОбновлениеИнформационнойБазы

////////////////////////////////////////////////////////////////////////////////
// Проведение
#Область Проведение

// Инициализирует таблицы значений, содержащие данные для проведения документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//Параметры:
//ДополнительныеСвойства - Структура
//Регистры - Неопределено 
Процедура СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства);
	
	ИнициализироватьКлючиАналитикиВидаУчета(ОсновныеДанныеДокумента);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(ОсновныеДанныеДокумента);
	
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаТовары());
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаТоварыНаСкладах(), Метаданные.РегистрыНакопления.ТоварыНаСкладах);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаСвободныеОстатки(), Метаданные.РегистрыНакопления.СвободныеОстатки);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаТоварыСебестоимость());
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаЗакупки(), Метаданные.РегистрыНакопления.Закупки);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаСебестоимостьТоваров(), Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаЗаказыПоставщикам(), Метаданные.РегистрыНакопления.ЗаказыПоставщикам);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаИсполнениеПроектов(), Метаданные.РегистрыНакопления.ИсполнениеПроектов);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаТаблицаПоступило(), Метаданные.РегистрыНакопления.ИсполнениеЗаявокПредприятий);
	
	Запрос = Новый Запрос(ПроведениеПоддержкаПроектов.ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры));
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ПроведениеПоддержкаПроектов.ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, Запрос.ВыполнитьПакет(), Регистры);
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Период", "Дата");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("ПроектЗадания");
	ЗапрашиваемыеДанные.Вставить("Склад");
	ЗапрашиваемыеДанные.Вставить("ПодразделениеОрганизации");
	ЗапрашиваемыеДанные.Вставить("Контрагент");
	ЗапрашиваемыеДанные.Вставить("ДоговорКонтрагента");
	ЗапрашиваемыеДанные.Вставить("Валюта");
	ЗапрашиваемыеДанные.Вставить("ПоступлениеПоЗаказу");
	ЗапрашиваемыеДанные.Вставить("ЗаказПоставщику");
	ЗапрашиваемыеДанные.Вставить("ХозяйственнаяОперация");
	ЗапрашиваемыеДанные.Вставить("ПодотчетноеЛицо");
	ЗапрашиваемыеДанные.Вставить("ДоговорГрузоотправителя");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроведениеПоддержкаПроектов.ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства),
		ЗапрашиваемыеДанные);
	
	ОсновныеДанныеДокумента.Вставить("ПоступлениеПоСпецификации", Ложь);
	ОсновныеДанныеДокумента.Вставить("Спецификация", Документы.СпецификацияКДоговору.ПустаяСсылка());
	
	Если ОсновныеДанныеДокумента.ПоступлениеПоЗаказу Тогда
		ТипЗаказа = ТипЗнч(ОсновныеДанныеДокумента.ЗаказПоставщику);
		Если ТипЗаказа = Тип("ДокументСсылка.СпецификацияКДоговору") Тогда
			ОсновныеДанныеДокумента.Вставить("Спецификация", ОсновныеДанныеДокумента.ЗаказПоставщику);
			ОсновныеДанныеДокумента.Вставить("ПоступлениеПоСпецификации", Истина);
		Иначе
			//@skip-check wrong-string-literal-content
			ОсновныеДанныеДокумента.Вставить("Спецификация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновныеДанныеДокумента.ЗаказПоставщику, "СпецификацияКДоговору"));
		КонецЕсли;
	КонецЕсли;
	
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ОсновныеДанныеДокумента.Валюта, ОсновныеДанныеДокумента.Период);
	КоэффициентПересчетаВВалютуРегл = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	ОсновныеДанныеДокумента.Вставить("КоэффициентПересчетаВВалютуРегл", КоэффициентПересчетаВВалютуРегл);
	ОсновныеДанныеДокумента.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	СтруктураКурсаПроекта = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ОсновныеДанныеДокумента.ПроектЗадания.Валюта, ОсновныеДанныеДокумента.Период);
	КоэффициентПересчетаВВалютуПроекта = СтруктураКурсаПроекта.Курс / СтруктураКурсаПроекта.Кратность;
	ОсновныеДанныеДокумента.Вставить("КоэффициентПересчетаВВалютуПроекта", КоэффициентПересчетаВВалютуПроекта);
	ОсновныеДанныеДокумента.Вставить("ВалютаПроекта", ОсновныеДанныеДокумента.ПроектЗадания.Валюта);
	
	ЗапасыСервер.ПриПодготовкеОсновныхДанныхДляПроведения(ДополнительныеСвойства, ОсновныеДанныеДокумента);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТовары()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                        КАК НомерСтроки,
	|	&Организация                                     КАК Организация,
	|	&Склад                                           КАК Склад,
	|	ТаблицаТовары.КодСтроки                          КАК КодСтроки,
	|	ТаблицаТовары.НоменклатураЗаказа                 КАК НоменклатураЗаказа,
	|	ТаблицаТовары.Номенклатура                       КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетПоСериям, &СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                            КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартий В (&СтатусУчетПоПартиям, &СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                            КАК Партия,
	|	ТаблицаТовары.Количество                         КАК Количество,
	|	ТаблицаТовары.ЕдиницаИзмерения                   КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Сумма                              КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС                          КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС                           КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаСНДСРегл,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                            КАК СерияНоменклатурыДляСебестоимости,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартий В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                            КАК ПартияДляСебестоимости
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыНаСкладах()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Организация               КАК Организация,
	|	ТаблицаТовары.Склад                     КАК Склад,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.Количество                КАК Количество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСвободныеОстатки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Организация               КАК Организация,
	|	ТаблицаТовары.Склад                     КАК Склад,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.Количество                КАК ВНаличии
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТоварыСебестоимость()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                                 КАК НомерСтроки,
	|	ТаблицаТовары.Организация                                 КАК Организация,
	|	ТаблицаТовары.Склад                                       КАК Склад,
	|	ТаблицаТовары.Номенклатура                                КАК Номенклатура,
	|	ТаблицаТовары.НоменклатураЗаказа                          КАК НоменклатураЗаказа,
	|	ТаблицаТовары.СерияНоменклатурыДляСебестоимости           КАК СерияНоменклатуры,
	|	ТаблицаТовары.ПартияДляСебестоимости                      КАК Партия,
	|	ТаблицаТовары.СтавкаНДС                                   КАК СтавкаНДС,
	|	ТаблицаТовары.Количество                                  КАК Количество,
	|	ТаблицаТовары.СуммаСНДСРегл                               КАК Стоимость,
	|	ТаблицаТовары.СуммаСНДСРегл - ТаблицаТовары.СуммаНДСРегл  КАК СтоимостьБезНДС,
	|	ТаблицаТовары.СуммаНДСРегл                                КАК СуммаНДС,
	|	ТаблицаТовары.СуммаСНДСРегл                               КАК СтоимостьРегл
	|ПОМЕСТИТЬ ВтТаблицаТоварыСебестоимость
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗакупки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                 КАК НомерСтроки,
	|	&Период                                   КАК Период,
	|	&ХозяйственнаяОперация                    КАК ХозяйственнаяОперация,
	|	ТаблицаТовары.Организация                 КАК Организация,
	|	&ПроектЗадания               			  КАК ПроектЗадания,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|			ТОГДА &ПодотчетноеЛицо
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ                                     КАК Контрагент,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ &ДоговорКонтрагента
	|	КОНЕЦ                                     КАК ДоговорКонтрагента,
	|	АналитикаУчетаНоменклатуры.КлючАналитики  КАК АналитикаУчетаНоменклатуры,
	|	&Ссылка                                   КАК ДокументЗакупки,
	|	&ПодразделениеОрганизации                 КАК ПодразделениеОрганизации,
	|	ТаблицаТовары.СтавкаНДС                   КАК СтавкаНДС,
	|	ТаблицаТовары.Склад                       КАК Склад,
	|	&ЗаказПоставщику                          КАК ЗаказПоставщику,
	|	&Спецификация                             КАК Спецификация,
	|	&Ссылка                                   КАК ДокументДвижения,
	|	ТаблицаТовары.НоменклатураЗаказа          КАК НоменклатураЗаказа,
	|	ТаблицаТовары.Количество                  КАК Количество,
	|	ТаблицаТовары.Стоимость                   КАК Сумма,
	|	ТаблицаТовары.СтоимостьБезНДС             КАК СуммаБезНДС,
	|	ТаблицаТовары.СуммаНДС                    КАК СуммаНДС,
	|	ТаблицаТовары.Стоимость                   КАК Стоимость,
	|	ТаблицаТовары.СтоимостьБезНДС             КАК СтоимостьБезНДС,
	|	ТаблицаТовары.СтоимостьРегл               КАК СтоимостьРегл
	|ИЗ
	|	ВтТаблицаТоварыСебестоимость КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|		ПО
	|			ТаблицаТовары.Номенклатура = АналитикаУчетаНоменклатуры.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатуры = АналитикаУчетаНоменклатуры.СерияНоменклатуры
	|			И ТаблицаТовары.Партия = АналитикаУчетаНоменклатуры.Партия
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСебестоимостьТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                   КАК НомерСтроки,
	|	&Период                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	АналитикаУчетаНоменклатуры.КлючАналитики    КАК АналитикаУчетаНоменклатуры,
	|	АналитикаВидаУчета.КлючАналитики            КАК АналитикаВидаУчета,
	|	ТаблицаТовары.Количество                    КАК Количество,
	|	ТаблицаТовары.Стоимость                     КАК Стоимость,
	|	ТаблицаТовары.СтоимостьБезНДС               КАК СтоимостьБезНДС,
	|	ТаблицаТовары.СтоимостьРегл                 КАК СтоимостьРегл,
	|	&ХозяйственнаяОперация                      КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаВидаУчета,
	|	0                                           КАК КорКоличество
	|ИЗ
	|	ВтТаблицаТоварыСебестоимость КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|		ПО
	|			ТаблицаТовары.Номенклатура = АналитикаУчетаНоменклатуры.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатуры = АналитикаУчетаНоменклатуры.СерияНоменклатуры
	|			И ТаблицаТовары.Партия = АналитикаУчетаНоменклатуры.Партия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|		ПО
	|			ТаблицаТовары.Организация = АналитикаВидаУчета.Организация
	|			И ТаблицаТовары.Склад = АналитикаВидаУчета.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаказыПоставщикам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                        КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	НЕОПРЕДЕЛЕНО                             КАК ЗаказПоставщику,
	|	&Спецификация                            КАК Спецификация,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.НоменклатураЗаказа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Номенклатура
	|		ИНАЧЕ ТаблицаТовары.НоменклатураЗаказа
	|	КОНЕЦ                                    КАК Номенклатура,
	|	0                                        КАК КодСтроки,
	|	ТаблицаТовары.КодСтроки                  КАК КодСтрокиСпецификации,
	|	0                                        КАК ПоСпецификации,
	|	0                                        КАК Заказано,
	|	ТаблицаТовары.Количество                 КАК КОформлению
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ПоступлениеПоСпецификации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                        КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	НЕОПРЕДЕЛЕНО                             КАК ЗаказПоставщику,
	|	&Спецификация                            КАК Спецификация,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.НоменклатураЗаказа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Номенклатура
	|		ИНАЧЕ ТаблицаТовары.НоменклатураЗаказа
	|	КОНЕЦ                                    КАК Номенклатура,
	|	0                                        КАК КодСтроки,
	|	ТаблицаТовары.КодСтроки                  КАК КодСтрокиСпецификации,
	|	ТаблицаТовары.Количество                 КАК ПоСпецификации,
	|	0                                        КАК Заказано,
	|	ТаблицаТовары.Количество                 КАК КОформлению
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ПоступлениеПоСпецификации
	|	И ТаблицаТовары.КодСтроки <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3                                        КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	НЕОПРЕДЕЛЕНО                             КАК ЗаказПоставщику,
	|	&Спецификация                            КАК Спецификация,
	|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
	|	0                                        КАК КодСтроки,
	|	0                                        КАК КодСтрокиСпецификации,
	|	0                                        КАК ПоСпецификации,
	|	0                                        КАК Заказано,
	|	ТаблицаТовары.Количество                 КАК КОформлению
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ПоступлениеПоСпецификации
	|	И ТаблицаТовары.КодСтроки = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПоступило()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПоступлениеТоваровТовары.Ссылка.ЗаказПоставщику КАК СпецификацияКДоговору,
	               |	ПоступлениеТоваровТовары.Ссылка.Склад КАК Предприятие,
	               |	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	               |	ПоступлениеТоваровТовары.Количество КАК Количество,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипОперацииИсполненияЗаявкиПредприятия.Поступление) КАК ТипОперации,
	               |	&Период КАК Период,
	               |	ПоступлениеТоваровТовары.СерияНоменклатуры КАК СерияНоменклатуры
				   |ИЗ
	               |	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	               |ГДЕ
	               |	ПоступлениеТоваровТовары.Ссылка = &Ссылка
	               |	И ПоступлениеТоваровТовары.Ссылка.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.СпецификацияКДоговору.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартий В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия
	|ПОМЕСТИТЬ втТаблицаАналитики
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Партия
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("СтатусУчетСебестоимостиПоСериям", Реквизиты.СтатусУчетСебестоимостиПоСериям);
	Запрос.УстановитьПараметр("СтатусУчетСебестоимостиПоПартиям", Реквизиты.СтатусУчетСебестоимостиПоПартиям);
	Запрос.Выполнить();
	
	Справочники.КлючиАналитикиУчетаНоменклатуры.ИнициализироватьКлючиАналитики(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиВидаУчета(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&Склад КАК Склад
	|ПОМЕСТИТЬ втТаблицаАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Склад
	|";
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Склад", Реквизиты.Склад);
	Запрос.Выполнить();
	
	Справочники.КлючиАналитикиВидаУчета.ИнициализироватьКлючиАналитики(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Функция ТекстЗапросаИсполнениеПроектов()
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 			 КАК ВидДвижения,
	|	&Период                                          КАК Период,
	|	ТаблицаТовары.НомерСтроки                        КАК НомерСтроки,
	|	&Организация                                     КАК Организация,
	|	&ПроектЗадания                                   КАК ПроектЗадания,
	|	NULL 											 КАК Договор,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл / &КоэффициентПересчетаВВалютуПроекта КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	&ВалютаПроекта                         		     КАК Валюта,
	|	0                         				 		 КАК СуммаПеречислено
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Порядок,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 			 КАК ВидДвижения,
	|	&Период                                          КАК Период,
	|	ТаблицаТовары.НомерСтроки                        КАК НомерСтроки,
	|	&Организация                                     КАК Организация,
	|	&ПроектЗадания                                   КАК ПроектЗадания,
	|	&ДоговорГрузоотправителя 						 КАК Договор,
	|	0					                             КАК Сумма,
	|	&ВалютаРегламентированногоУчета    				 КАК Валюта,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаПеречислено
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ЕСТЬNULL(ТаблицаТовары.Ссылка.ПроектЗадания.ЗаСчетСредствФОИВ, ЛОЖЬ) = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3 КАК Порядок,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 			 КАК ВидДвижения,
	|	&Период                                          КАК Период,
	|	1                        						 КАК НомерСтроки,
	|	&Организация                                     КАК Организация,
	|	&ПроектЗадания                                   КАК ПроектЗадания,
	|	NULL 											 КАК Договор,
	|	ВЫРАЗИТЬ(ДокументПоступлениеТоваров.ДополнительныеРасходы * &КоэффициентПересчетаВВалютуРегл / &КоэффициентПересчетаВВалютуПроекта КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	&ВалютаПроекта                         		     КАК Валюта,
	|	0                         				 		 КАК СуммаПеречислено
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ДокументПоступлениеТоваров
	|ГДЕ
	|	ДокументПоступлениеТоваров.Ссылка = &Ссылка
	|	И НЕ ДокументПоступлениеТоваров.ДополнительныеРасходы = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4 КАК Порядок,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 			 КАК ВидДвижения,
	|	&Период                                          КАК Период,
	|	1                        						 КАК НомерСтроки,
	|	&Организация                                     КАК Организация,
	|	&ПроектЗадания                                   КАК ПроектЗадания,
	|	&ДоговорГрузоотправителя 						 КАК Договор,
	|	0					                             КАК Сумма,
	|	&ВалютаРегламентированногоУчета    				 КАК Валюта,
	|	ВЫРАЗИТЬ(ДокументПоступлениеТоваров.ДополнительныеРасходы * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаПеречислено
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ДокументПоступлениеТоваров
	|ГДЕ
	|	ДокументПоступлениеТоваров.Ссылка = &Ссылка
	|	И ЕСТЬNULL(ДокументПоступлениеТоваров.ПроектЗадания.ЗаСчетСредствФОИВ, ЛОЖЬ) = ИСТИНА
	|	И НЕ ДокументПоступлениеТоваров.ДополнительныеРасходы = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Проведение

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//Возвращаемое значение:
//ТаблицаЗначений
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюПоддержкаПроектов.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	Обработки.ПечатьПриходныйОрдер0504207.ДобавитьПечатнуюФорму(ПечатныеФормы);
	Обработки.ПечатьМ4.ДобавитьПечатнуюФорму(ПечатныеФормы);
	Обработки.ПечатьТОРГ12.ДобавитьПечатнуюФорму(ПечатныеФормы);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	МенеджерПечати      = МетаданныеДокумента.ПолноеИмя();
	МетаданныеМакетов   = МетаданныеДокумента.Макеты;
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "ВедомостьНаОприходование", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_Накладная.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_Накладная);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "ТОРГ4", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_ТОРГ4.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_ТОРГ4);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "Расписка", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_Расписка.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_Расписка);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "АктПриемки", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_АктПриемки.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_АктПриемки);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "ОписьКАктуПриемки", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_ОписьКАктуПриемки.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_ОписьКАктуПриемки);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	//ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Обработки.ПечатьЭтикетокИЦенников.ДоступныеПечатныеФормы() , ПечатныеФормы);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ПолучитьТекстЗапросаДанныеДляПечати()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Документ.Ссылка КАК Ссылка,
	               |	Документ.Номер КАК НомерДокумента,
	               |	Документ.Дата КАК ДатаДокумента,
	               |	Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	               |	Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |	Документ.Организация КАК Организация,
	               |	Документ.Контрагент КАК Контрагент,
	               |	Документ.ДоговорКонтрагента КАК Договор,
	               |	ВЫБОР
	               |		КОГДА Документ.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК УчитыватьНДС,
	               |	Документ.Контрагент КАК Отправитель,
	               |	ВЫБОР
	               |		КОГДА Документ.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |			ТОГДА Документ.Контрагент
	               |		ИНАЧЕ Документ.Грузоотправитель
	               |	КОНЕЦ КАК Грузоотправитель,
	               |	ВЫБОР
	               |		КОГДА Документ.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |			ТОГДА Документ.Организация
	               |		ИНАЧЕ Документ.Грузополучатель
	               |	КОНЕЦ КАК Грузополучатель,
	               |	Документ.Организация КАК Получатель,
	               |	Документ.ПодразделениеОрганизации КАК Подразделение,
	               |	Документ.ПодразделениеОрганизации.Представление КАК ПредставлениеПодразделения,
	               |	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтправитель,
	               |	Документ.Склад КАК Склад,
	               |	Документ.Склад КАК СкладПолучатель,
	               |	Документ.Склад.Представление КАК СкладПредставление,
	               |	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
	               |	"""" КАК АдресДоставки,
	               |	Документ.Валюта КАК Валюта,
	               |	Документ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	               |	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Исполнитель,
	               |	"""" КАК ИсполнительДолжность,
	               |	НЕОПРЕДЕЛЕНО КАК ОтпускРазрешил,
	               |	НЕОПРЕДЕЛЕНО КАК ОтпускПроизвел,
	               |	"""" КАК ДоверенностьНомер,
	               |	"""" КАК ДоверенностьДата,
	               |	"""" КАК ДоверенностьВыдана,
	               |	"""" КАК ДоверенностьЛицо,
	               |	Документ.Товары.(
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	               |		Номенклатура.Описание КАК Описание,
	               |		Номенклатура.Код КАК ТоварКод,
	               |		СерияНоменклатуры КАК Серия,
	               |		Партия КАК Партия,
	               |		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		ЕдиницаИзмерения.КодОКЕИ КАК КодПоОКЕИ,
	               |		Количество КАК Количество,
	               |		Количество КАК КоличествоШтук,
	               |		0 КАК КоличествоМест,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма,
	               |		СтавкаНДС КАК СтавкаНДС,
	               |		СуммаНДС КАК СуммаНДС,
	               |		ЛОЖЬ КАК ЭтоВозвратнаяТара
	               |	) КАК Товары,
	               |	Документ.Центр.ДиректорДляПечати КАК ДиректорЦентра,
	               |	Документ.Центр.ПолноеНаименование КАК НаименованиеЦентра
	               |ИЗ
	               |	Документ.ПоступлениеТоваров КАК Документ
	               |ГДЕ
	               |	Документ.Ссылка В(&ТекущийДокумент)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//@skip-check module-unused-method
Функция ПолучитьТекстЗапросаПоГруппамБухУчета()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаГруппБухУчета.Документ                   КАК Документ,
	|	ТаблицаГруппБухУчета.ГруппаБухгалтерскогоУчета  КАК ГруппаБухгалтерскогоУчета,
	|	СУММА(ТаблицаГруппБухУчета.Сумма)               КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка                                  КАК Документ,
	|		ТаблицаТовары.Номенклатура.ВидНоменклатуры.ГруппаБухгалтерскогоУчета  КАК ГруппаБухгалтерскогоУчета,
	|		ТаблицаТовары.Сумма + ВЫБОР
	|			КОГДА (НЕ ТаблицаТовары.Ссылка.ЦенаВключаетНДС)
	|				ТОГДА ТаблицаТовары.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ                                                 КАК Сумма
	|	ИЗ
	|		Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка В(&ТекущийДокумент)) КАК ТаблицаГруппБухУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ,
	|	ГруппаБухгалтерскогоУчета
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьКурсыВалютДокументов(МассивДокументов)
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Документ.Дата, ДЕНЬ) КАК Дата,
	|	Документ.Валюта КАК Валюта
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивДокументов)
	|	И Документ.Валюта <> &ВалютаРегламентированногоУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Валюта,
	|	НАЧАЛОПЕРИОДА(Документ.Дата, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюта,
	|	Дата
	|");
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс", Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КурсыВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата);
		НоваяСтрока.Курс = КурсыВалюты.Курс;
		НоваяСтрока.Кратность = КурсыВалюты.Кратность;
		
	КонецЦикла;
	
	Возврат ТаблицаКурсовВалют;
	
КонецФункции

Функция КоэффициентПересчетаВалюты(ДанныеПечати, ТаблицаКурсовВалют, ВалютаРегламентированногоУчета)
	
	КоэффициентПересчета = 1;
	Если ДанныеПечати.Валюта <> ВалютаРегламентированногоУчета Тогда
		
		СтруктураПоиска = Новый Структура("Валюта, Дата", ДанныеПечати.Валюта, НачалоДня(ДанныеПечати.ДатаДокумента));
		Массив = ТаблицаКурсовВалют.НайтиСтроки(СтруктураПоиска);
		Если Массив.Количество() > 0 Тогда
			КоэффициентПересчета = ?(Массив[0].Кратность <> 0, Массив[0].Курс / Массив[0].Кратность, 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоэффициентПересчета;
	
КонецФункции

#Область ПечатьВедомость

Функция ПечатьВедомостьНаОприходование(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_Накладная);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив;
	
	ИмяОбластьШапка  = "ШапкаТаблицыСКодом";
	ИмяОбластьСтрока = "СтрокаСКодом";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиВедомостьНаОприходование(Шапка);
		
		// Вывод области Заголовок
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Заголовок", ПараметрыИзШапки);
		
		// Вывод области РеквизитыШапки
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "РеквизитыШапки", ПараметрыИзШапки);
		
		// Вывод области ШапкаТаблицы
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, ИмяОбластьШапка, ПараметрыИзШапки);
		
		// Инициализация итогов по документу
		ПараметрыИтого = Новый Структура;
		ПараметрыИтого.Вставить("Сумма"   , 0);
		ПараметрыИтого.Вставить("СуммаНДС", 0);
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		КлючиПараметров = ФормированиеПечатныхФормПоддержкаПроектов.ПолучитьИменаКолонокТаблицы(ВыборкаСтрокТовары);
		
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластьСтрока);
		
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		НомерСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ДанныеСтроки = Новый Структура(КлючиПараметров);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаСтрокТовары);
			
			ТоварНаименование = ОбщегоНазначенияПоддержкаПроектов.ПолучитьПредставлениеНоменклатурыДляПечати(
				ВыборкаСтрокТовары.ТоварНаименование,
				ВыборкаСтрокТовары.Серия,
				,
				ВыборкаСтрокТовары.Описание);
			
			ДанныеСтроки.Вставить("ТоварНаименование", ТоварНаименование);
			
			ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Итого"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("СуммаПрописью"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Подписи"));
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть(ИмяОбластьШапка));
			КонецЕсли;
			
			// Вывод области Строка
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			ФормированиеПечатныхФормПоддержкаПроектов.РассчитатьИтоги(ДанныеСтроки, ПараметрыИтого);
			
		КонецЦикла;
		
		// Вывод области Итого
		ПараметрыИтого.Вставить("НДС", ?(Шапка.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":");
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Итого", ПараметрыИтого);
		
		// Вывод области СуммаПрописью
		СуммаКПрописи = ПараметрыИтого.Сумма + ?(Шапка.ЦенаВключаетНДС, 0, ПараметрыИтого.СуммаНДС);
		ФорматированнаяСумма = ОбщегоНазначенияПоддержкаПроектов.ФорматСумм(СуммаКПрописи, Шапка.Валюта);
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего наименований %1, на сумму %2'"), КоличествоСтрок, ФорматированнаяСумма);
		
		ПараметрыСуммаПрописью = Новый Структура;
		ПараметрыСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ПараметрыСуммаПрописью.Вставить("СуммаПрописью" , РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.Валюта));
		
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "СуммаПрописью", ПараметрыСуммаПрописью);
		
		// Вывод области Подписи
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подписи", ПараметрыИзШапки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиВедомостьНаОприходование(Шапка)
	
	КлючиПараметров = ФормированиеПечатныхФормПоддержкаПроектов.ПолучитьИменаКолонокТаблицы(Шапка);
	
	Параметры = Новый Структура(КлючиПараметров);
	ЗаполнитьЗначенияСвойств(Параметры, Шапка);
	
	// Данные заголовка
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Накладная № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
	
	СведенияОПолучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.ДатаДокумента);
	ПолучательПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе, "ПолноеНаименование,");
	
	СведенияОбОтправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Отправитель, Шапка.ДатаДокумента);
	ОтправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе, "ПолноеНаименование,");
	
	Параметры.Вставить("ТекстЗаголовка"          , ТекстЗаголовка);
	Параметры.Вставить("ПолучательПредставление" , ПолучательПредставление);
	Параметры.Вставить("ОтправительПредставление", ОтправительПредставление);
	
	// Данные шапки таблицы
	Параметры.Вставить("ИмяКолонкиКодов", НСтр("ru = 'Код'"));
	
	// Данные подписей документа
	МОЛ = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Шапка.Склад, Шапка.ДатаДокумента);
	
	Параметры.Вставить("Получил", МОЛ.ФИО);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти // ПечатьВедомость

#Область ПечатьРасписка

Функция ПечатьРасписка(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_Расписка);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Для Экз = 1 По 4 Цикл
			
			Если Не Экз = 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
			
			// Получение параметров для заполнения
			ПараметрыИзШапки = ПолучитьПараметрыШапкиРасписка(Шапка);
			ПараметрыИзШапки.Вставить("Экземпляр", Экз);
			
			// Вывод области Шапка
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Шапка", ПараметрыИзШапки);
			
			ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
				
			//КоличествоСтрок = ВыборкаСтрокТовары.Количество();
			НомерСтроки = 0;
			Количество = 0;
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				Количество = Количество + ВыборкаСтрокТовары.Количество;
				ДанныеСтроки = Новый Структура("НомерПП, Номенклатура", НомерСтроки, ВыборкаСтрокТовары.Номенклатура);
			    ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
				ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
					
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				// Вывод области Строка
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
			КонецЦикла;
			
			ПараметрыИзШапки.Вставить("ЧислоУпаковок", Количество);
			ПараметрыИзШапки.Вставить("Количество", Количество);
			
			// Вывод области Подписи
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подвал", ПараметрыИзШапки);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиРасписка(Шапка)
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("НомерРасписки", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
	Параметры.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, "ДЛФ=Д"));
	Параметры.Вставить("ДО", Шапка.Ссылка.ПроектЗадания.ДобывающаяОрганизация);
	Параметры.Вставить("ОрганизацияПолучатель", Шапка.Организация);
	Параметры.Вставить("ФИОПредставителя", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(Шапка.Ссылка.Ответственный.ФизическоеЛицо)));
	Параметры.Вставить("ДолжностьПредставителя", Шапка.Ссылка.Ответственный.ФизическоеЛицо.Уточнение);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти // ПечатьРасписка

#Область ПечатьАктПриемки

Функция ПечатьАктПриемки(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_АктПриемки);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив();
	
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов);
	
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	//ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаСоставКомиссии = ДанныеДляПечати.РезультатПоСоставуКомиссии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
			
			// Получение параметров для заполнения
			ПараметрыИзШапки = ПолучитьПараметрыШапкиАктПриемки(Шапка, ВыборкаСоставКомиссии);
					
			// Вывод области Шапка
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Шапка", ПараметрыИзШапки);
			
			ВыгрузкаСтрокТовары = Шапка.Ссылка.Товары.Выгрузить();
			
			ТоварыПоНоменклатуре = ВыгрузкаСтрокТовары.Скопировать();
			ТоварыПоНоменклатуре.Свернуть("Номенклатура, СерияНоменклатуры", "Количество");
				
			//КоличествоСтрок = ВыгрузкаСтрокТовары.Количество();
			НомерСтроки = 0;
			Количество = 0;
			Для Каждого ВыборкаСтрокТовары Из ТоварыПоНоменклатуре Цикл
				//Для Каждого ВыборкаСтрокТовары Из ВыгрузкаСтрокТовары Цикл
					
					НомерСтроки = НомерСтроки + 1;
					Количество = Количество + ВыборкаСтрокТовары.Количество;
					//@skip-check structure-consructor-too-many-keys
					ДанныеСтроки = Новый Структура;
					ДанныеСтроки.Вставить("НомерПП", НомерСтроки);
					
					РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаСтрокТовары.Номенклатура, "Наименование, Производитель");
					
					ДанныеСтроки.Вставить("Номенклатура", РеквизитыНоменклатуры.Наименование);
					ДанныеСтроки.Вставить("Производитель", РеквизитыНоменклатуры.Производитель);
					ДанныеСтроки.Вставить("Количество", ВыборкаСтрокТовары.Количество);
													
					РекСерии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаСтрокТовары.СерияНоменклатуры, "КодГрифа, КодДО, КодГода, КодЦентра, УчетныйНомер, НомерМСИ");
					
					ПредставлениеРегНомера = РекСерии.КодГрифа + РекСерии.КодГрифа + РекСерии.КодГода + РекСерии.КодЦентра + РекСерии.УчетныйНомер;
					
					ДанныеСтроки.Вставить("ПредставлениеРегНомера", ПредставлениеРегНомера);
					ДанныеСтроки.Вставить("УчетныйНомер", РекСерии.НомерМСИ);
									   
				    ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
					ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
						
					Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					// Вывод области Строка
					ТабличныйДокумент.Вывести(ОбластьСтрока);
					
				//КонецЦикла;
			КонецЦикла;
			
			ПараметрыИзШапки.Вставить("КоличествоУпаковок", ТоварыПоНоменклатуре.Количество());
			ПараметрыИзШапки.Вставить("Количество", Количество);
			
			// Вывод области Подписи
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ПодвалТаблицы", ПараметрыИзШапки);
			
			Для Каждого СтрокаКомиссии Из ПараметрыИзШапки.ТаблицаКомиссии Цикл
				ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "СтрокаКомиссия", СтрокаКомиссии);	
			КонецЦикла;		
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиАктПриемки(Шапка, ВыборкаСоставКомиссии)

	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Шапка.Организация, Шапка.ДатаДокумента);
		
	Параметры = Новый Структура();
	
	Параметры.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
	Параметры.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, "ДФ='«dd» MMMM yyyy ""г.""';"));
	Параметры.Вставить("НомерРасписки", Шапка.НомерВходящегоДокумента);
	Параметры.Вставить("ДатаРасписки", Формат(Шапка.ДатаВходящегоДокумента, "ДЛФ=Д"));
	//@skip-check wrong-string-literal-content
	Параметры.Вставить("НаименованиеДО", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шапка.Ссылка, "ПроектЗадания.ДобывающаяОрганизация.Код"));
	Параметры.Вставить("НомерЗадания", Шапка.Ссылка.ПроектЗадания.НомерПроекта);
	Параметры.Вставить("Гриф", Шапка.Ссылка.Гриф.ПолноеНаименование);
	Параметры.Вставить("ДиректорЦентра", Шапка.ДиректорЦентра);
	Параметры.Вставить("НаименованиеЦентра", Шапка.НаименованиеЦентра);
	Параметры.Вставить("РуководительФИО"         , ОтветственныеЛица.РуководительНаименование);
	Параметры.Вставить("РуководительДолжность"   , ОтветственныеЛица.РуководительДолжность);
	Параметры.Вставить("ПредставлениеОрганизации"   , Шапка.ПредставлениеОрганизации);
	
	ПредставлениеПриказа = Формат(Шапка.ДатаПриказа, "ДЛФ=DD") + " № " + Шапка.НомерПриказа;
	
	Параметры.Вставить("ПредставлениеПриказа", ПредставлениеПриказа);
	
	//Состав комиссии
	
	ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка); 
	
	ВыборкаСоставКомиссии.Сбросить();
	
	СоставКомиссии = "";
		
	ТаблицаКомиссии = Новый ТаблицаЗначений();
	ТаблицаКомиссии.Колонки.Добавить("Должность");
	ТаблицаКомиссии.Колонки.Добавить("ФИО");
	
	Если ВыборкаСоставКомиссии.НайтиСледующий(ПараметрыПоиска) Тогда
		ВыборкаСтрокКомиссия = ВыборкаСоставКомиссии.Выбрать();
		
		Пока ВыборкаСтрокКомиссия.Следующий() Цикл
			
			СоставКомиссии = СоставКомиссии + ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаСтрокКомиссия.ЧленКомиссии) + ", ";
			
			СтрокаКомиссии = ТаблицаКомиссии.Добавить();
			СтрокаКомиссии.Должность = ВыборкаСтрокКомиссия.Должность;
			СтрокаКомиссии.ФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВыборкаСтрокКомиссия.ЧленКомиссии); 
						
		КонецЦикла;
		
	КонецЕсли;
	
	СоставКомиссии = Лев(СоставКомиссии, СтрДлина(СоставКомиссии)-2);
	
	Параметры.Вставить("СоставКомиссии", СоставКомиссии);
	
	Параметры.Вставить("ТаблицаКомиссии", ТаблицаКомиссии);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти // ПечатьАктПриемки

#Область ПечатьОписьКАктуПриемки

Функция ПечатьОписьКАктуПриемки(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_ОписьКАктуПриемки);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив();
	
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов);
	
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	//ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаСоставКомиссии = ДанныеДляПечати.РезультатПоСоставуКомиссии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Для Экз = 1 По 4 Цикл
			
			Если Не Экз = 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
			
			// Получение параметров для заполнения
			ПараметрыИзШапки = ПолучитьПараметрыШапкиОписьКАктуПриемки(Шапка, ВыборкаСоставКомиссии);
			ПараметрыИзШапки.Вставить("Экземпляр", Экз);
			
			// Вывод области Шапка
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Шапка", ПараметрыИзШапки);
			
			ВыгрузкаСтрокТовары = Шапка.Ссылка.Товары.Выгрузить();
				
			//КоличествоСтрок = ВыгрузкаСтрокТовары.Количество();
			
			ТоварыПоНоменклатуре = ВыгрузкаСтрокТовары.Скопировать();
			ТоварыПоНоменклатуре.Свернуть("Номенклатура, СерияНоменклатуры", "Количество");
			
			НомерСтроки = 0;
			Количество = 0;
			
			Для Каждого ВыборкаСтрокТовары Из ТоварыПоНоменклатуре Цикл
				//Для Каждого ВыборкаСтрокТовары Из ВыгрузкаСтрокТовары Цикл
					
					НомерСтроки = НомерСтроки + 1;
					Количество = Количество + ВыборкаСтрокТовары.Количество;
					//@skip-check structure-consructor-too-many-keys
					ДанныеСтроки = Новый Структура("НомерПП, НомерУпаковки, Номенклатура, Производитель, Серия, Количество", Строка(НомерСтроки) + ".1", НомерСтроки, ВыборкаСтрокТовары.Номенклатура, ВыборкаСтрокТовары.Номенклатура.Производитель, ВыборкаСтрокТовары.СерияНоменклатуры, ВыборкаСтрокТовары.Количество);
				    ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
					ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
					
					ОбластьСтрокаУпаковка = Макет.ПолучитьОбласть("СтрокаУпаковка");
					ОбластьСтрокаУпаковка.Параметры.Заполнить(ДанныеСтроки);
						
					Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					// Вывод области Строка
					ТабличныйДокумент.Вывести(ОбластьСтрокаУпаковка);
					ТабличныйДокумент.Вывести(ОбластьСтрока);
					
				//КонецЦикла;
			КонецЦикла;
			
			ПараметрыИзШапки.Вставить("КоличествоУпаковок", ТоварыПоНоменклатуре.Количество());
			ПараметрыИзШапки.Вставить("Количество", Количество);
			
			// Вывод области Подписи
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подвал", ПараметрыИзШапки);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиОписьКАктуПриемки(Шапка, ВыборкаСоставКомиссии)
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
	Параметры.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, "ДЛФ=Д"));
	Параметры.Вставить("ДО", Шапка.Ссылка.ПроектЗадания.ДобывающаяОрганизация);
	Параметры.Вставить("НомерЗадания", Шапка.Ссылка.ПроектЗадания.НомерПроекта);
	Параметры.Вставить("Гриф", Шапка.Ссылка.Гриф);
	Параметры.Вставить("НаименованиеЦентра", Шапка.НаименованиеЦентра); 
	
		//Состав комиссии
	
	ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка); 
	
	ВыборкаСоставКомиссии.Сбросить();
	
	СоставКомиссии1 = "";
	//Разделитель = "";
	
	Если ВыборкаСоставКомиссии.НайтиСледующий(ПараметрыПоиска) Тогда
		ВыборкаСтрокКомиссия = ВыборкаСоставКомиссии.Выбрать();
		
		Пока ВыборкаСтрокКомиссия.Следующий() Цикл
			СоставКомиссии1 = СоставКомиссии1 +  ВыборкаСтрокКомиссия.Представление + ", ";
			Параметры.Вставить("КомиссияДолжность" + ВыборкаСтрокКомиссия.НомерСтроки, ВыборкаСтрокКомиссия.Должность);
			Параметры.Вставить("КомиссияФИО" + ВыборкаСтрокКомиссия.НомерСтроки, ВыборкаСтрокКомиссия.Представление);
			//Разделитель = ";";
		КонецЦикла;
	КонецЕсли;
	
	СоставКомиссии1 = Лев(СоставКомиссии1, СтрДлина(СоставКомиссии1)-2);
	
	Параметры.Вставить("СоставКомиссии1", СоставКомиссии1);

	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти // ПечатьОписьКактуПриемки

#Область ПечатьТОРГ4

Функция ПечатьТОРГ4(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_ТОРГ4);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	ВалютаПечати       = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ТаблицаКурсовВалют = ПолучитьКурсыВалютДокументов(МассивОбъектов);
	
	МассивВыводимыхОбластей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиТОРГ4(Шапка);
		
		// Вывод области Заголовок
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьСоШтрихкодом(ТабличныйДокумент, Макет, "Заголовок", ПараметрыИзШапки);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Вывод области ШапкаТаблицы
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ШапкаТаблицы", ПараметрыИзШапки);
		
		// Инициализация итогов
		ПараметрыИтогоПоСтранице = ПолучитьОписаниеИтоговТОРГ4();
		ПараметрыИтогоПоАкту     = ПолучитьОписаниеИтоговТОРГ4();
		
		// Формирование многострочной части
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		КлючиПараметров = ФормированиеПечатныхФормПоддержкаПроектов.ПолучитьИменаКолонокТаблицы(ВыборкаСтрокТовары);
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		НомерСтроки = 0;
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ДанныеСтроки = Новый Структура(КлючиПараметров);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаСтрокТовары);
			
			КоэффициентПересчета = КоэффициентПересчетаВалюты(Шапка, ТаблицаКурсовВалют, ВалютаПечати);
			
			ТоварНаименование = ОбщегоНазначенияПоддержкаПроектов.ПолучитьПредставлениеНоменклатурыДляПечати(
				ВыборкаСтрокТовары.ТоварНаименование,
				ВыборкаСтрокТовары.Серия,
				,
				ВыборкаСтрокТовары.Описание);
			
			СуммаСНДС = Окр((ВыборкаСтрокТовары.Сумма + ?(Шапка.ЦенаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС)) * КоэффициентПересчета, 2);
			
			Если Шапка.ЦенаВключаетНДС Тогда
				Цена = ВыборкаСтрокТовары.Цена * КоэффициентПересчета;
			Иначе
				Цена = ?(ВыборкаСтрокТовары.Количество = 0, 0, СуммаСНДС / ВыборкаСтрокТовары.Количество);
			КонецЕсли;
			
			ДанныеСтроки.Вставить("ТоварНаименование", ТоварНаименование);
			ДанныеСтроки.Вставить("Цена"             , Цена);
			ДанныеСтроки.Вставить("Сумма"            , СуммаСНДС);
			
			ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("ИтогоПоСтранице"));
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("ИтогоПоСтранице"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("ИтогоПоАкту"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("ЧленыКомиссии"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Подписи"));
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
				
				// Вывод области ИтогоПоСтранице
				ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ИтогоПоСтранице", ПараметрыИтогоПоСтранице);
				ФормированиеПечатныхФормПоддержкаПроектов.ОбнулитьИтоги(ПараметрыИтогоПоСтранице);
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Вывод области ШапкаТаблицы
				ПараметрыИзШапки.НомерСтраницы = ПараметрыИзШапки.НомерСтраницы + 1;
				ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ШапкаТаблицы", ПараметрыИзШапки);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			ФормированиеПечатныхФормПоддержкаПроектов.РассчитатьИтоги(ДанныеСтроки, ПараметрыИтогоПоСтранице);
			ФормированиеПечатныхФормПоддержкаПроектов.РассчитатьИтоги(ДанныеСтроки, ПараметрыИтогоПоАкту);
			
		КонецЦикла;
		
		// Вывод области ИтогоПоСтранице
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ИтогоПоСтранице", ПараметрыИтогоПоСтранице);
		
		// Вывод области ИтогоПоАкту
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ИтогоПоАкту", ПараметрыИтогоПоАкту);
		
		// Вывод области ЧленыКомиссии
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ЧленыКомиссии");
		
		// Вывод области Подписи
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подписи", ПараметрыИзШапки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиТОРГ4(Шапка)
	
	КлючиПараметров = ФормированиеПечатныхФормПоддержкаПроектов.ПолучитьИменаКолонокТаблицы(Шапка);
	
	Параметры = Новый Структура(КлючиПараметров);
	ЗаполнитьЗначенияСвойств(Параметры, Шапка);
	
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
	
	СведенияОбОтправителе    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Отправитель, Шапка.ДатаДокумента);
	ОтправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе);
	ОтправительОписание      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	
	СведенияОГрузоотправителе     = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	ГрузоотправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	СведенияОПолучателе     = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.ДатаДокумента);
	ПолучательПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе);
	
	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Шапка.Организация, Шапка.ДатаДокумента);
	
	РеквизитыСопроводительногоДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'сопроводительный документ № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
	
	МОЛ = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Шапка.Склад, Шапка.ДатаДокумента);
	
	// Данные области Заголовок
	Параметры.Вставить("НомерДокумента"                     , НомерДокумента);
	Параметры.Вставить("ОтправительПредставление"           , ОтправительПредставление);
	Параметры.Вставить("ОтправительОписание"                , ОтправительОписание);
	Параметры.Вставить("ОтправительОКПО"                    , СведенияОбОтправителе.КодПоОКПО);
	Параметры.Вставить("ГрузоотправительПредставление"      , ГрузоотправительПредставление);
	Параметры.Вставить("ГрузоотправительОКПО"               , СведенияОГрузоотправителе.КодПоОКПО);
	Параметры.Вставить("ПолучательПредставление"            , ПолучательПредставление);
	Параметры.Вставить("ПолучательОКПО"                     , СведенияОПолучателе.КодПоОКПО);
	Параметры.Вставить("РуководительФИО"                    , ОтветственныеЛица.РуководительНаименование);
	Параметры.Вставить("РуководительДолжность"              , ОтветственныеЛица.РуководительДолжность);
	Параметры.Вставить("РеквизитыСопроводительногоДокумента", РеквизитыСопроводительногоДокумента);
	
	// Инициализация данных шапки таблицы
	Параметры.Вставить("НомерСтраницы", 1);
	
	// Данные области Подписи
	Параметры.Вставить("МОЛФИО"      , МОЛ.ФИО);
	Параметры.Вставить("МОЛДолжность", МОЛ.Должность);
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьОписаниеИтоговТОРГ4()
	
	ОписаниеИтого = Новый Структура;
	ОписаниеИтого.Вставить("КоличествоМест", 0);
	ОписаниеИтого.Вставить("КоличествоШтук", 0);
	ОписаниеИтого.Вставить("МассаБрутто"   , 0);
	ОписаниеИтого.Вставить("МассаНетто"    , 0);
	ОписаниеИтого.Вставить("Сумма"         , 0);
	
	Возврат ОписаниеИтого;
	
КонецФункции

#КонецОбласти // ПечатьТОРГ4

Функция ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("РезультатПоШапке"         , РезультатыЗапросов[РезультатыЗапросов.ВГраница() - 2]);
	ДанныеДляПечати.Вставить("РезультатПоТабличнойЧасти", РезультатыЗапросов[РезультатыЗапросов.ВГраница() - 1]);
	ДанныеДляПечати.Вставить("РезультатПоСоставуКомиссии", РезультатыЗапросов[РезультатыЗапросов.ВГраница()]);
	ДанныеДляПечати.Вставить("ТаблицаКурсовВалют"       , ПолучитьКурсыВалютДокументов(МассивОбъектов));
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечати()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК НомерДокумента,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	Документ.Организация КАК Организация,
	|	Документ.Контрагент КАК Контрагент,
	|	Документ.ДоговорКонтрагента КАК Договор,
	|	ВЫБОР
	|		КОГДА Документ.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	Документ.Контрагент КАК Отправитель,
	|	ВЫБОР
	|		КОГДА Документ.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Документ.Контрагент
	|		ИНАЧЕ Документ.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА Документ.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Документ.Организация
	|		ИНАЧЕ Документ.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	Документ.Организация КАК Получатель,
	|	Документ.ПодразделениеОрганизации КАК Подразделение,
	|	Документ.ПодразделениеОрганизации.Представление КАК ПредставлениеПодразделения,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтправитель,
	|	Документ.Склад КАК Склад,
	|	Документ.Склад КАК СкладПолучатель,
	|	Документ.Склад.Представление КАК СкладПредставление,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчет,
	|	"""" КАК АдресДоставки,
	|	Документ.Валюта КАК Валюта,
	|	Документ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Исполнитель,
	|	"""" КАК ИсполнительДолжность,
	|	НЕОПРЕДЕЛЕНО КАК ОтпускРазрешил,
	|	НЕОПРЕДЕЛЕНО КАК ОтпускПроизвел,
	|	"""" КАК ДоверенностьНомер,
	|	"""" КАК ДоверенностьДата,
	|	"""" КАК ДоверенностьВыдана,
	|	"""" КАК ДоверенностьЛицо,
	|	Документ.ПроектЗадания КАК ПроектЗадания,
	|	Документ.ДатаПриказа КАК ДатаПриказа,
	|	Документ.НомерПриказа КАК НомерПриказа,
	|	Документ.Центр.ДиректорДляПечати КАК ДиректорЦентра,
	|	Документ.Центр.ПолноеНаименование КАК НаименованиеЦентра,
	|	Документ.Организация.НаименованиеПолное КАК ПредставлениеОрганизации
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В (&ТекущийДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Документ,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	Товары.Номенклатура.Описание КАК Описание,
	|	Товары.Номенклатура.Код КАК ТоварКод,
	|	Товары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	Товары.Партия КАК Партия,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмерения.КодОКЕИ КАК КодПоОКЕИ,
	|	Товары.Количество КАК Количество,
	|	Товары.Количество КАК КоличествоБазовых,
	|	Товары.Количество КАК КоличествоШтук,
	|	0 КАК КоличествоМест,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В (&ТекущийДокумент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	НомерСтроки
	|ИТОГИ
	|ПО
	|	Документ";
				   
				   СхемаЗапроса = Новый СхемаЗапроса;
				   СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
				   Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
				   Запрос.УстановитьТекстЗапроса("
				   |ВЫБРАТЬ
				   |	СоставКомиссии.Ссылка                     КАК Документ,
				   |	СоставКомиссии.НомерСтроки                КАК НомерСтроки,
				   |	СоставКомиссии.ЧленКомиссии               КАК ЧленКомиссии,
				   |	СоставКомиссии.ЧленКомиссии.Наименование  КАК Представление,
				   |	СоставКомиссии.Председатель               КАК Председатель,
				   |	СоставКомиссии.Должность                  КАК Должность
				   |ИЗ
				   |	Документ.ПоступлениеТоваров.СоставКомиссии КАК СоставКомиссии
				   |ГДЕ
				   |	СоставКомиссии.Ссылка В (&ТекущийДокумент)
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Ссылка,
				   |	Председатель УБЫВ,
				   |	НомерСтроки
				   |ИТОГИ ПО
				   |	Документ
				   |");
				   
				   ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
				   
				   Возврат ТекстЗапроса;
				   
			   КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Печать этикеток, ценников и стеллажных карточек
#Область ПечатьЭтикетокИЦенников

//Функция ТекстЗапросаДанныеДляПечатиЭтикетокИЦенников()
//	
//	Возврат "
//	|ВЫБРАТЬ
//	|	ТаблицаТоваров.Ссылка.Дата                          КАК ДатаДокумента,
//	|	ТаблицаТоваров.Ссылка.Организация                   КАК Организация,
//	|	ТаблицаТоваров.Ссылка.Склад                         КАК Склад,
//	|	ТаблицаТоваров.Ссылка.Контрагент                    КАК Поставщик,
//	|	ТаблицаТоваров.Номенклатура                         КАК Номенклатура,
//	|	ВЫБОР
//	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий В (&СтатусУчетПоСериям, &СтатусУчетСебестоимостиПоСериям)
//	|			ТОГДА ТаблицаТоваров.СерияНоменклатуры
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
//	|	КОНЕЦ                                               КАК СерияНоменклатуры,
//	|	ВЫБОР
//	|		КОГДА ТаблицаТоваров.СтатусУказанияПартий В (&СтатусУчетПоПартиям, &СтатусУчетСебестоимостиПоПартиям)
//	|			ТОГДА ТаблицаТоваров.Партия
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
//	|	КОНЕЦ                                               КАК Партия,
//	|	ТаблицаТоваров.ЕдиницаИзмерения                     КАК Упаковка,
//	|	ВЫРАЗИТЬ(ВЫБОР
//	|		КОГДА ТаблицаТоваров.Ссылка.ЦенаВключаетНДС
//	|			ТОГДА ТаблицаТоваров.Цена
//	|		ИНАЧЕ (ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС) / ТаблицаТоваров.Количество
//	|	КОНЕЦ КАК ЧИСЛО(15, 2))                             КАК Цена,
//	|	СУММА(ТаблицаТоваров.Количество)  КАК Количество
//	|ИЗ
//	|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТоваров
//	|ГДЕ
//	|	ТаблицаТоваров.Ссылка В(&МассивДокументов)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ТаблицаТоваров.Ссылка.Дата,
//	|	ТаблицаТоваров.Номенклатура,
//	|	ВЫБОР
//	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий В (&СтатусУчетПоСериям, &СтатусУчетСебестоимостиПоСериям)
//	|			ТОГДА ТаблицаТоваров.СерияНоменклатуры
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
//	|	КОНЕЦ,
//	|	ВЫБОР
//	|		КОГДА ТаблицаТоваров.СтатусУказанияПартий В (&СтатусУчетПоПартиям, &СтатусУчетСебестоимостиПоПартиям)
//	|			ТОГДА ТаблицаТоваров.Партия
//	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
//	|	КОНЕЦ,
//	|	ТаблицаТоваров.ЕдиницаИзмерения,
//	|	ТаблицаТоваров.Ссылка.Организация,
//	|	ТаблицаТоваров.Ссылка.Склад,
//	|	ТаблицаТоваров.Ссылка.Контрагент,
//	|	ВЫРАЗИТЬ(ВЫБОР
//	|		КОГДА ТаблицаТоваров.Ссылка.ЦенаВключаетНДС
//	|			ТОГДА ТаблицаТоваров.Цена
//	|		ИНАЧЕ (ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС) / ТаблицаТоваров.Количество
//	|	КОНЕЦ КАК ЧИСЛО(15, 2))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	Документ.Организация  КАК Организация,
//	|	Документ.Склад        КАК Склад
//	|ИЗ
//	|	Документ.ПоступлениеТоваров КАК Документ
//	|ГДЕ
//	|	Документ.Ссылка В(&МассивДокументов)
//	|";
//	
//КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//	
// Параметры:
// МассивДокументов	
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище
//
//Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = ТекстЗапросаДанныеДляПечатиЭтикетокИЦенников();
//	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
//	ЗапасыСервер.УстановитьСтатусыПараметровУчетаВПараметрахЗапроса(Запрос);
//	
//	МассивРезультатов = Запрос.ВыполнитьПакет();
//	
//	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
//	МассивОрганизаций = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
//	МассивСкладов     = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
//	
//	// Подготовка структуры действий для обработки печати ценников и этикеток
//	СтруктураДействий = Новый Структура;
//	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1,МассивОрганизаций[0], Неопределено));
//	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1,МассивСкладов[0], МассивСкладов));
//	
//	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток
//	СтруктураРезультат = Новый Структура;
//	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
//	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
//	
//	Возврат СтруктураРезультат;
//	
//КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище
//
//Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = ТекстЗапросаДанныеДляПечатиЭтикетокИЦенников();
//	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
//	ЗапасыСервер.УстановитьСтатусыПараметровУчетаВПараметрахЗапроса(Запрос);
//	
//	МассивРезультатов = Запрос.ВыполнитьПакет();
//	
//	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
//	МассивОрганизаций = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
//	МассивСкладов     = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
//	
//	// Подготовка структуры действий для обработки печати ценников и этикеток
//	СтруктураДействий = Новый Структура;
//	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1,МассивОрганизаций[0], Неопределено));
//	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1,МассивСкладов[0], МассивСкладов));
//	
//	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток
//	СтруктураРезультат = Новый Структура;
//	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
//	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
//	
//	Возврат СтруктураРезультат;
//	
//КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище
//
//Функция ПолучитьДанныеДляПечатиСтеллажныхКарточек(МассивДокументов) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = ТекстЗапросаДанныеДляПечатиЭтикетокИЦенников();
//	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
//	ЗапасыСервер.УстановитьСтатусыПараметровУчетаВПараметрахЗапроса(Запрос);
//	
//	МассивРезультатов = Запрос.ВыполнитьПакет();
//	
//	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
//	МассивОрганизаций = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
//	МассивСкладов     = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
//	
//	// Подготовка структуры действий для обработки печати ценников и этикеток
//	СтруктураДействий = Новый Структура;
//	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1,МассивОрганизаций[0], Неопределено));
//	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1,МассивСкладов[0], МассивСкладов));
//	
//	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток
//	СтруктураРезультат = Новый Структура;
//	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
//	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
//	
//	Возврат СтруктураРезультат;
//	
//КонецФункции

#КонецОбласти // ПечатьЭтикетокИЦенников

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//	НастройкиФормы - Неопределено
Процедура ДобавитьКомандыСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииПоддержкаПроектов.ДобавитьКомандыСоздатьНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//	НастройкиФормы - Неопределено
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыПоддержкаПроектов.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

#КонецОбласти // СлужебныеПроцедурыИФункции



#КонецЕсли