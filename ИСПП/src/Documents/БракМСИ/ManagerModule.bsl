#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Имена реквизитов, от значений которых зависят параметры учета номенклатуры
//
// Возвращаемое значение:
//   Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУчетаНоменклатуры() Экспорт
	
	Возврат "Склад";
	
КонецФункции

// Возвращает параметры учета для номенклатуры, указанной в документе
//
// Параметры
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
// Возвращаемое значение
//   Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУчетаНоменклатуры
//
Функция ПараметрыУчетаНоменклатуры(Объект) Экспорт
	
	ПараметрыУчета = ЗапасыСервер.ПараметрыУчетаНоменклатуры();
	ПараметрыУчета.ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ПараметрыУчетаНаСкладе = СкладыСервер.ПараметрыУчетаНоменклатуры(Объект.Склад);
	ПараметрыУчета.ИспользоватьСерии = ПараметрыУчетаНаСкладе.ИспользоватьСерииНоменклатуры;
	ПараметрыУчета.ИспользоватьПартии = ПараметрыУчетаНаСкладе.ИспользоватьПартии;
	ПараметрыУчета.Склад = Объект.Склад;
	
	Возврат ПараметрыУчета;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания параметров учета номенклатуры
//
// Параметры
//   ПараметрыУчетаНоменклатуры - Структура - состав полей задается в функции ЗапасыСервер.ПараметрыУчетаНоменклатуры
//
// Возвращаемое значение
//   Строка - текст запроса
//
Функция ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры) Экспорт
	
	Возврат ЗапасыСервер.ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры);
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение
#Область Проведение

// Инициализирует таблицы значений, содержащие данные для проведения документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства);
	
	ИнициализироватьКлючиАналитикиВидаУчета(ОсновныеДанныеДокумента);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(ОсновныеДанныеДокумента);
	
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаТовары());
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтАналитика());
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтАналитикаУчетныеЦены());
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаДвиженияНоменклатураДоходыРасходы(), Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаТаблицаСписано(), Метаданные.РегистрыНакопления.ИсполнениеЗаявокПредприятий);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаТаблицаДетализацииСписанияПоТипам(), Метаданные.РегистрыНакопления.ДетализацияСписанияМСИПоТипам);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаБракНаСкладах(), Метаданные.РегистрыНакопления.БракНаСкладах);
	
	//ДВИЖЕНИЯ ОТКЛЮЧЕНЫ, НО В БУДУЩЕМ МОГУТ ПОНАДОБИТЬСЯ
	
	//ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаТоварыНаСкладах(), Метаданные.РегистрыНакопления.ТоварыНаСкладах);
	//ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаСвободныеОстатки(), Метаданные.РегистрыНакопления.СвободныеОстатки);
	//ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаСебестоимостьТоваров(), Метаданные.РегистрыНакопления.СебестоимостьТоваров);

	
	Запрос = Новый Запрос(ПроведениеПоддержкаПроектов.ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры));
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ПроведениеПоддержкаПроектов.ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, Запрос.ВыполнитьПакет(), Регистры);
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Период", "Дата");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("Склад");
	ЗапрашиваемыеДанные.Вставить("ПодразделениеОрганизации");
	ЗапрашиваемыеДанные.Вставить("СтатьяРасходов");
	ЗапрашиваемыеДанные.Вставить("АналитикаРасходов");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроведениеПоддержкаПроектов.ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства),
		ЗапрашиваемыеДанные);
	
	ОсновныеДанныеДокумента.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.СписаниеТоваров);
	
	ОсновныеДанныеДокумента.Вставить("Граница", Новый Граница(ОсновныеДанныеДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	
	ЗапасыСервер.ПриПодготовкеОсновныхДанныхДляПроведения(ДополнительныеСвойства, ОсновныеДанныеДокумента);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТовары()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                               КАК НомерСтроки,
	|	&Организация                                            КАК Организация,
	|	ТаблицаТовары.Номенклатура                              КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетПоСериям, &СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                   КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                                    КАК Партия,
	|	ТаблицаТовары.Количество                                КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                   КАК СерияНоменклатурыДляСебестоимости,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартий В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                   КАК ПартияДляСебестоимости
	|ПОМЕСТИТЬ
	|	ВтТаблицаТовары
	|ИЗ
	|	Документ.БракМСИ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыНаСкладах()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Организация               КАК Организация,
	|	&Склад                                  КАК Склад,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.Количество                КАК Количество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСвободныеОстатки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Организация               КАК Организация,
	|	&Склад                                  КАК Склад,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.Количество                КАК ВНаличии
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаБракНаСкладах()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Организация               КАК Организация,
	|	&Склад                                  КАК Склад,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.Количество                КАК Количество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтАналитика()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Номенклатура                                               КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатурыДляСебестоимости                          КАК СерияНоменклатуры,
	|	ТаблицаТовары.ПартияДляСебестоимости                                     КАК Партия,
	|	АналитикаУчетаНоменклатуры.КлючАналитики                                 КАК АналитикаУчетаНоменклатуры,
	|	АналитикаВидаУчета.КлючАналитики                                         КАК АналитикаВидаУчета
	|ПОМЕСТИТЬ
	|	ВтАналитика
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|		ПО
	|			ТаблицаТовары.Номенклатура                        = АналитикаУчетаНоменклатуры.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимости = АналитикаУчетаНоменклатуры.СерияНоменклатуры
	|			И ТаблицаТовары.ПартияДляСебестоимости            = АналитикаУчетаНоменклатуры.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|		ПО
	|			АналитикаВидаУчета.Организация                = ТаблицаТовары.Организация
	|			И АналитикаВидаУчета.Склад                    = &Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	АналитикаВидаУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтАналитикаУчетныеЦены()
	
	ТекстЗапросаУчетныеЦены = 
	"ВЫБРАТЬ
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры			 						КАК АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.АналитикаВидаУчета					 						КАК АналитикаВидаУчета,
	|	ВЫБОР КОГДА СебестоимостьТоваров.КоличествоОстаток = 0
	|		ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(СебестоимостьТоваров.СтоимостьОстаток КАК ЧИСЛО(20, 9)) / ВЫРАЗИТЬ(СебестоимостьТоваров.КоличествоОстаток КАК ЧИСЛО(20, 9))
	|	КОНЕЦ 																			КАК УчетнаяЦена,
	|	ВЫБОР КОГДА СебестоимостьТоваров.КоличествоОстаток = 0                                         
	|		ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(СебестоимостьТоваров.СтоимостьБезНДСОстаток КАК ЧИСЛО(20, 9)) / ВЫРАЗИТЬ(СебестоимостьТоваров.КоличествоОстаток КАК ЧИСЛО(20, 9))
	|	КОНЕЦ 																			КАК УчетнаяЦенаБезНДС
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(
	|			&Граница,
	|			(АналитикаВидаУчета, АналитикаУчетаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					Врем.АналитикаВидаУчета,
	|					Врем.АналитикаУчетаНоменклатуры
	|				ИЗ
	|					ВтАналитика КАК Врем)) КАК СебестоимостьТоваров";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура								КАК Номенклатура,
	|	Аналитика.СерияНоменклатуры							КАК СерияНоменклатуры,
	|	Аналитика.Партия									КАК Партия,
	|	Аналитика.АналитикаУчетаНоменклатуры		 		КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.АналитикаВидаУчета		 				КАК АналитикаВидаУчета,
	|	ЕстьNULL(УчетныеЦеныНоменклатуры.УчетнаяЦена, 0)	КАК УчетнаяЦена,
	|	ЕстьNULL(УчетныеЦеныНоменклатуры.УчетнаяЦенаБезНДС, 0)	КАК УчетнаяЦенаБезНДС
	|ПОМЕСТИТЬ ВтАналитикаУчетныеЦены
	|ИЗ
	|	ВтАналитика КАК Аналитика
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			(" + ТекстЗапросаУчетныеЦены + ") КАК УчетныеЦеныНоменклатуры
	|		ПО 
	|			Аналитика.АналитикаУчетаНоменклатуры = УчетныеЦеныНоменклатуры.АналитикаУчетаНоменклатуры
	|			И Аналитика.АналитикаВидаУчета		 = УчетныеЦеныНоменклатуры.АналитикаВидаУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|   СерияНоменклатуры,
	|   Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСебестоимостьТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                         КАК НомерСтроки,
	|	&Период                                           КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)            КАК ВидДвижения,
	|	Аналитика.АналитикаУчетаНоменклатуры              КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.АналитикаВидаУчета                      КАК АналитикаВидаУчета,
	|	ТаблицаТовары.Количество                          КАК Количество,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦена 	КАК Стоимость,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦенаБезНДС 	КАК СтоимостьБезНДС,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦена 	КАК СтоимостьРегл,
	|	&ХозяйственнаяОперация                            КАК ХозяйственнаяОперация,
	|	&Ссылка                                           КАК ДокументДвижения,
	|	&СтатьяРасходов                                   КАК СтатьяРасходов,
	|	&АналитикаРасходов                                КАК АналитикаРасходов
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтАналитикаУчетныеЦены КАК Аналитика
	|		ПО
	|			ТаблицаТовары.Номенклатура                        = Аналитика.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимости = Аналитика.СерияНоменклатуры
	|			И ТаблицаТовары.ПартияДляСебестоимости            = Аналитика.Партия
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураДоходыРасходы()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                         КАК НомерСтроки,
	|	&Период                                           КАК Период,
	|	&ХозяйственнаяОперация                            КАК ХозяйственнаяОперация,
	|	&СтатьяРасходов                                   КАК СтатьяДоходовРасходов,
	|	&АналитикаРасходов                                КАК АналитикаРасходов,
	|	Аналитика.АналитикаВидаУчета                      КАК АналитикаВидаУчета,
	|	Аналитика.АналитикаУчетаНоменклатуры              КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.Количество                          КАК Количество,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦена 	КАК Стоимость,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦенаБезНДС 	КАК СтоимостьБезНДС,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦена 	КАК СтоимостьРегл,
	|	&Ссылка                                           КАК ДокументДвижения
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтАналитикаУчетныеЦены КАК Аналитика
	|		ПО
	|			ТаблицаТовары.Номенклатура                        = Аналитика.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимости = Аналитика.СерияНоменклатуры
	|			И ТаблицаТовары.ПартияДляСебестоимости            = Аналитика.Партия
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСписано()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СписаниеНедостачТоваровТовары.Партия.ДокументОприходования.ЗаказПоставщику КАК СпецификацияКДоговору,
	               |	СписаниеНедостачТоваровТовары.Ссылка.Склад КАК Предприятие,
	               |	СписаниеНедостачТоваровТовары.Номенклатура КАК Номенклатура,
	               |	СписаниеНедостачТоваровТовары.Количество КАК Количество,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипОперацииИсполненияЗаявкиПредприятия.Списание) КАК ТипОперации,
	               |	&Период КАК Период,
	               |	СписаниеНедостачТоваровТовары.СерияНоменклатуры КАК СерияНоменклатуры
	               |ИЗ
	               |	Документ.БракМСИ.Товары КАК СписаниеНедостачТоваровТовары
	               |ГДЕ
	               |	СписаниеНедостачТоваровТовары.Ссылка = &Ссылка
	               |	И СписаниеНедостачТоваровТовары.Партия.ДокументОприходования ССЫЛКА Документ.ПоступлениеТоваров
	               |	И СписаниеНедостачТоваровТовары.Партия.ДокументОприходования.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.СпецификацияКДоговору.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДетализацииСписанияПоТипам()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СписаниеНедостачТоваровТовары.Партия.ДокументОприходования.ЗаказПоставщику КАК СпецификацияКДоговору,
	|	СписаниеНедостачТоваровТовары.Ссылка.Склад КАК Предприятие,
	|	СписаниеНедостачТоваровТовары.Номенклатура КАК Номенклатура,
	|	СписаниеНедостачТоваровТовары.Количество КАК Количество,
	|	СписаниеНедостачТоваровТовары.Ссылка.ВидАктаСписания КАК ТипСписания,
	|	&Период КАК Период,
	|	СписаниеНедостачТоваровТовары.Изделие КАК Изделие,
	|	СписаниеНедостачТоваровТовары.Образец КАК Образец,
	|	СписаниеНедостачТоваровТовары.Ссылка.Склад КАК Склад,
	|	СписаниеНедостачТоваровТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	СписаниеНедостачТоваровТовары.Партия,
	|	АналитикаУчетаНоменклатуры.КлючАналитики КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	Документ.БракМСИ.Товары КАК СписаниеНедостачТоваровТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|		ПО СписаниеНедостачТоваровТовары.Номенклатура = АналитикаУчетаНоменклатуры.Номенклатура
	|		И СписаниеНедостачТоваровТовары.СерияНоменклатуры = АналитикаУчетаНоменклатуры.СерияНоменклатуры
	|		И СписаниеНедостачТоваровТовары.Партия = АналитикаУчетаНоменклатуры.Партия
	|ГДЕ
	|	СписаниеНедостачТоваровТовары.Ссылка = &Ссылка
	|	И СписаниеНедостачТоваровТовары.Партия.ДокументОприходования ССЫЛКА Документ.ПоступлениеТоваров
	|	И
	|		СписаниеНедостачТоваровТовары.Партия.ДокументОприходования.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.СпецификацияКДоговору.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартий В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия
	|ПОМЕСТИТЬ
	|	втТаблицаАналитики
	|ИЗ
	|	Документ.БракМСИ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Партия
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусУчетСебестоимостиПоСериям", Реквизиты.СтатусУчетСебестоимостиПоСериям);
	Запрос.УстановитьПараметр("СтатусУчетСебестоимостиПоПартиям", Реквизиты.СтатусУчетСебестоимостиПоПартиям);
	Запрос.Выполнить();
	
	Справочники.КлючиАналитикиУчетаНоменклатуры.ИнициализироватьКлючиАналитики(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиВидаУчета(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	&Склад КАК Склад
	|ПОМЕСТИТЬ втТаблицаАналитики
	|ИЗ
	|	Документ.БракМСИ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Склад
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Склад", Реквизиты.Склад);
	Запрос.Выполнить();
	
	Справочники.КлючиАналитикиВидаУчета.ИнициализироватьКлючиАналитики(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

#КонецОбласти // Проведение

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюПоддержкаПроектов.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	Обработки.ПечатьАктСписания0504230.ДобавитьПечатнуюФорму(ПечатныеФормы);
	Обработки.ПечатьТОРГ16.ДобавитьПечатнуюФорму(ПечатныеФормы);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	МенеджерПечати      = МетаданныеДокумента.ПолноеИмя();
	МетаданныеМакетов    = МетаданныеДокумента.Макеты;
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "ВедомостьНаСписание", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_Накладная.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_Накладная);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "АктСписанияТоваров", МенеджерПечати);
	ПечатнаяФорма.Представление = НСтр("ru='Акт списания товаров (форма АП-20)'");
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_АктСписанияТоваров);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "АктСписания", МенеджерПечати);
	ПечатнаяФорма.Представление = НСтр("ru='Акт выбраковки'");
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_АктСписания);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "ОписьКАктуСписания", МенеджерПечати);
	ПечатнаяФорма.Представление = НСтр("ru='Опись к акту выбраковки'");
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_ОписьКАктуСписания);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);

	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ПечатьВедомостьНаСписание(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_Накладная);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив;
	
	ВалютаПечати = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПолучатьЦены");
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиВедомостьНаСписание(Шапка);
		
		// Вывод области Заголовок
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Заголовок", ПараметрыИзШапки);
		
		// Вывод области РеквизитыШапки
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "РеквизитыШапки", ПараметрыИзШапки);
		
		// Вывод области ШапкаТаблицы
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ШапкаТаблицы", ПараметрыИзШапки);
		
		// Инициализация итогов по документу
		ПараметрыИтого = Новый Структура;
		ПараметрыИтого.Вставить("Сумма", 0);
		
		ВыборкаПоДокументам.Сбросить();
		ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка);
		Если ВыборкаПоДокументам.НайтиСледующий(ПараметрыПоиска) Тогда
			ВыборкаСтрокТовары = ВыборкаПоДокументам.Выбрать();
			
			КлючиПараметров = ФормированиеПечатныхФормПоддержкаПроектов.ПолучитьИменаКолонокТаблицы(ВыборкаСтрокТовары);
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			
			КоличествоСтрок = ВыборкаСтрокТовары.Количество();
			НомерСтроки = 0;
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				ДанныеСтроки = Новый Структура(КлючиПараметров);
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаСтрокТовары);
				
				ТоварНаименование = ОбщегоНазначенияПоддержкаПроектов.ПолучитьПредставлениеНоменклатурыДляПечати(
					ВыборкаСтрокТовары.ТоварНаименование,
					ВыборкаСтрокТовары.СерияНоменклатуры,
					,
					ВыборкаСтрокТовары.Описание);
				
				ДанныеСтроки.Вставить("ТоварНаименование" , ТоварНаименование);
				
				ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
				Если НомерСтроки = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Итого"));
					МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Подписи"));
				КонецЕсли;
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицы"));
				КонецЕсли;
				
				// Вывод области Строка
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
				ФормированиеПечатныхФормПоддержкаПроектов.РассчитатьИтоги(ДанныеСтроки, ПараметрыИтого);
				
			КонецЦикла;
		КонецЕсли;
		
		// Вывод области Итого
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Итого", ПараметрыИтого);
		
		// Вывод области СуммаПрописью
		ФорматированнаяСумма = ОбщегоНазначенияПоддержкаПроектов.ФорматСумм(ПараметрыИтого.Сумма, ВалютаПечати);
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего наименований %1, на сумму %2'"), КоличествоСтрок, ФорматированнаяСумма);
		
		ПараметрыСуммаПрописью = Новый Структура;
		ПараметрыСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ПараметрыСуммаПрописью.Вставить("СуммаПрописью" , РаботаСКурсамиВалют.СформироватьСуммуПрописью(ПараметрыИтого.Сумма, ВалютаПечати));
		
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "СуммаПрописью", ПараметрыСуммаПрописью);
		
		// Вывод области Подписи
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подписи", ПараметрыИзШапки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиВедомостьНаСписание(Шапка)
	
	КлючиПараметров = ФормированиеПечатныхФормПоддержкаПроектов.ПолучитьИменаКолонокТаблицы(Шапка);
	
	Параметры = Новый Структура(КлючиПараметров);
	ЗаполнитьЗначенияСвойств(Параметры, Шапка);
	
	// Данные заголовка
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
	ШаблонТекстЗаголовка = НСтр("ru = 'Списание товаров № %1 от %2'");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстЗаголовка, НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
	
	СведенияОбОрганизации    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	
	Параметры.Вставить("ТекстЗаголовка"          , ТекстЗаголовка);
	Параметры.Вставить("ОрганизацияПредставление", ОрганизацияПредставление);
	
	// Данные шапки таблицы
	Параметры.Вставить("ИмяКолонкиКодов", НСтр("ru = 'Код'"));
	
	// Данные подписей документа
	МОЛ = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Шапка.Склад, Шапка.ДатаДокумента);
	
	Параметры.Вставить("Отпустил", МОЛ.ФИО);
	
	Возврат Параметры;
	
КонецФункции

Функция ПечатьАктСписанияТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.АвтоМасштаб = Истина;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеНедостачТоваров_АктСписанияТоваров";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.БракМСИ.ПФ_MXL_АктСписанияТоваров");
	
	ВалютаПечати = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПолучатьЦены");
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		ОбластьШапка = Макет.ПолучитьОбласть("Заголовок");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабДокумент, Макет, ОбластьШапка);
		
		ОбластьШапка.Параметры.Заполнить(Шапка);
		ОбластьШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		ОбластьШапка.Параметры.Дата = Формат(Шапка.ДатаДокумента, "ДЛФ=D");
		ОбластьШапка.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
		ТабДокумент.Вывести(ОбластьШапка);
		
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		НомерСтроки = 0;
		
		// Инициализация итогов в документе
		СуммаИтого = 0;
		
		// Выводим многострочную часть документа
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ВыборкаПоДокументам.Сбросить();
		ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка);
		Если ВыборкаПоДокументам.НайтиСледующий(ПараметрыПоиска) Тогда
			ВыборкаСтрокТовары = ВыборкаПоДокументам.Выбрать();
			
			КоличествоСтрок = ВыборкаСтрокТовары.Количество();
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрока.Параметры.ТоварНаименование = ОбщегоНазначенияПоддержкаПроектов.ПолучитьПредставлениеНоменклатурыДляПечати(
					ВыборкаСтрокТовары.ТоварНаименование,
					ВыборкаСтрокТовары.СерияНоменклатуры,
					,
					ВыборкаСтрокТовары.Описание);
				
				ТабДокумент.Вывести(ОбластьСтрока);
				
				СуммаИтого = СуммаИтого + ВыборкаСтрокТовары.Сумма;
				
			КонецЦикла;
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.КоличествоПрописью = ЧислоПрописью(НомерСтроки,, НСтр("ru = 'наименование, наименования, наименований,с,,,,,0'"));
		ОбластьМакета.Параметры.СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаИтого, ВалютаПечати);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

#Область ПечатьАктСписания

Функция ПечатьАктСписания(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_АктСписания);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив();
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПолучатьЦены");
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаСоставКомиссии = ДанныеДляПечати.РезультатПоСоставуКомиссии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Для Экз = 1 По 2 Цикл
			
			Если Не Экз = 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
			
			// Получение параметров для заполнения
			ПараметрыИзШапки = ПолучитьПараметрыШапкиАктСписания(Шапка, ВыборкаСоставКомиссии);
			ПараметрыИзШапки.Вставить("Экземпляр", Экз);
			
			// Вывод области Шапка
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Шапка", ПараметрыИзШапки);
			
			ВыборкаПоДокументам.Сбросить();
			ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка);
			Если ВыборкаПоДокументам.НайтиСледующий(ПараметрыПоиска) Тогда
				ВыборкаСтрокТовары = ВыборкаПоДокументам.Выбрать();
				
				КоличествоСтрок = ВыборкаСтрокТовары.Количество();
				
				НомерСтроки = 0;
				Количество = 0;
				Пока ВыборкаСтрокТовары.Следующий() Цикл
					//Для Каждого ВыборкаСтрокТовары Из ВыгрузкаСтрокТовары Цикл
					
					НомерСтроки = НомерСтроки + 1;
					Количество = Количество + ВыборкаСтрокТовары.Количество;
					ДанныеСтроки = Новый Структура("НомерПП, Номенклатура, Производитель, Серия, Количество, Основание", НомерСтроки, ВыборкаСтрокТовары.Номенклатура, ВыборкаСтрокТовары.Номенклатура.Производитель, ВыборкаСтрокТовары.СерияНоменклатуры, ВыборкаСтрокТовары.Количество, ВыборкаСтрокТовары.Основание);
					ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
					ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
					
					Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					// Вывод области Строка
					ТабличныйДокумент.Вывести(ОбластьСтрока);
					
					//КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыИзШапки.Вставить("КоличествоУпаковок", КоличествоСтрок);
			ПараметрыИзШапки.Вставить("Количество", Количество);
			
			// Вывод области Подписи
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подвал", ПараметрыИзШапки);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиАктСписания(Шапка, ВыборкаСоставКомиссии)
	
	СведенияОбОрганизации    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	
	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Шапка.Организация, Шапка.ДатаДокумента);
	МОЛ = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Шапка.Склад, Шапка.ДатаДокумента);
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
	Параметры.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, "ДЛФ=Д"));
	Параметры.Вставить("НомерРасписки", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
	Параметры.Вставить("ДатаРасписки", Формат(Шапка.ДатаДокумента, "ДЛФ=Д"));
	Параметры.Вставить("НомерЗадания", ?(Шапка.Ссылка.ПроектЗадания = Неопределено,"",Шапка.Ссылка.ПроектЗадания.НомерПроекта));
	Параметры.Вставить("Гриф", Шапка.Ссылка.Гриф.ПолноеНаименование);
	Параметры.Вставить("ДиректорЦентра", Шапка.ДиректорЦентра);
	Параметры.Вставить("НаименованиеЦентра", Шапка.НаименованиеЦентра);
	Параметры.Вставить("РуководительФИО"         , МОЛ.ФИО);
	Параметры.Вставить("РуководительДолжность"   , МОЛ.Должность);
	Параметры.Вставить("НомерАктаВП", Шапка.НомерАктаВыбраковки);
	Параметры.Вставить("ДатаАктаВП", Формат(Шапка.ДатаАктаВыбраковки,"ДФ=dd.MM.yyyy"));
	
	ПредставлениеПриказа = Формат(Шапка.ДатаПриказа, "ДЛФ=DD") + " № " + Шапка.НомерПриказа;
	
	Параметры.Вставить("ПредставлениеПриказа", ПредставлениеПриказа);
	
	Если Шапка.ВидАктаСписания = ПредопределенноеЗначение("Перечисление.ВидыАктовСписаний.УстановкаВИзделие") Тогда
		Параметры.Вставить("НомерПриложенияВП", Шапка.НомерСпецификацияФ6);
		Параметры.Вставить("ДатаПриложенияВП", Формат(Шапка.ДатаСпецификацииФ6,"ДФ=dd.MM.yyyy"));
	Иначе
		Параметры.Вставить("НомерПриложенияВП", Шапка.НомерАктаВыбраковки);
		Параметры.Вставить("ДатаПриложенияВП", Формат(Шапка.ДатаАктаВыбраковки,"ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	//Состав комиссии
	
	ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка); 
	
	ВыборкаСоставКомиссии.Сбросить();
	
	СоставКомиссии1 = "";
	Разделитель = "";
	
	Если ВыборкаСоставКомиссии.НайтиСледующий(ПараметрыПоиска) Тогда
		ВыборкаСтрокКомиссия = ВыборкаСоставКомиссии.Выбрать();
		
		Пока ВыборкаСтрокКомиссия.Следующий() Цикл
			СоставКомиссии1 = СоставКомиссии1 +  ВыборкаСтрокКомиссия.Представление + ", ";
			Параметры.Вставить("КомиссияДолжность" + ВыборкаСтрокКомиссия.НомерСтроки, ВыборкаСтрокКомиссия.Должность);
			Параметры.Вставить("КомиссияФИО" + ВыборкаСтрокКомиссия.НомерСтроки, ВыборкаСтрокКомиссия.Представление);
			Разделитель = ";";
		КонецЦикла;
	КонецЕсли;
	
	СоставКомиссии1 = Лев(СоставКомиссии1, СтрДлина(СоставКомиссии1)-2);
	
	Параметры.Вставить("СоставКомиссии1", СоставКомиссии1);
	
	Возврат Параметры;
	
КонецФункции 


#КонецОбласти // ПечатьАктСписания


#Область ПечатьОписьКАктуСписания

Функция ПечатьОписьКАктуСписания(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_ОписьКАктуСписания);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив();
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПолучатьЦены");
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаСоставКомиссии = ДанныеДляПечати.РезультатПоСоставуКомиссии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Для Экз = 1 По 2 Цикл
			
			Если Не Экз = 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
			
			// Получение параметров для заполнения
			ПараметрыИзШапки = ПолучитьПараметрыШапкиОписьКАктуСписания(Шапка, ВыборкаСоставКомиссии);
			ПараметрыИзШапки.Вставить("Экземпляр", Экз);
			
			// Вывод области Шапка
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Шапка", ПараметрыИзШапки);
			
			ВыборкаПоДокументам.Сбросить();
			ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка);
			Если ВыборкаПоДокументам.НайтиСледующий(ПараметрыПоиска) Тогда
				ВыборкаСтрокТовары = ВыборкаПоДокументам.Выбрать();
				КоличествоСтрок = ВыборкаСтрокТовары.Количество();
				
				НомерСтроки = 0;
				Количество = 0;
				
				Пока ВыборкаСтрокТовары.Следующий() Цикл
					//Для Каждого ВыборкаСтрокТовары Из ВыгрузкаСтрокТовары Цикл
					
					НомерСтроки = НомерСтроки + 1;
					Количество = Количество + ВыборкаСтрокТовары.Количество;
					ДанныеСтроки = Новый Структура("НомерПП, НомерУпаковки, Номенклатура, Производитель, Серия, Количество", Строка(НомерСтроки) + ".1", НомерСтроки, ВыборкаСтрокТовары.Номенклатура, ВыборкаСтрокТовары.Номенклатура.Производитель, ВыборкаСтрокТовары.СерияНоменклатуры, ВыборкаСтрокТовары.Количество);
					ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
					ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
					
					ОбластьСтрокаУпаковка = Макет.ПолучитьОбласть("СтрокаУпаковка");
					ОбластьСтрокаУпаковка.Параметры.Заполнить(ДанныеСтроки);
					
					Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					// Вывод области Строка
					ТабличныйДокумент.Вывести(ОбластьСтрокаУпаковка);
					ТабличныйДокумент.Вывести(ОбластьСтрока);
					
					//КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыИзШапки.Вставить("КоличествоУпаковок", КоличествоСтрок);
			ПараметрыИзШапки.Вставить("Количество", Количество);
			
			// Вывод области Подписи
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подвал", ПараметрыИзШапки);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиОписьКАктуСписания(Шапка, ВыборкаСоставКомиссии)
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
	Параметры.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, "ДЛФ=Д"));
	Параметры.Вставить("ДО", Шапка.Ссылка.ПроектЗадания.ДобывающаяОрганизация);
	Параметры.Вставить("НомерЗадания", Шапка.Ссылка.ПроектЗадания.НомерПроекта);
	Параметры.Вставить("Гриф", Шапка.Ссылка.Гриф);
	Параметры.Вставить("НаименованиеЦентра", Шапка.НаименованиеЦентра);
	
		//Состав комиссии
	
	ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка); 
	
	ВыборкаСоставКомиссии.Сбросить();
	
	СоставКомиссии1 = "";
	Разделитель = "";
	
	Если ВыборкаСоставКомиссии.НайтиСледующий(ПараметрыПоиска) Тогда
		ВыборкаСтрокКомиссия = ВыборкаСоставКомиссии.Выбрать();
		
		Пока ВыборкаСтрокКомиссия.Следующий() Цикл
			СоставКомиссии1 = СоставКомиссии1 +  ВыборкаСтрокКомиссия.Представление + ", ";
			Параметры.Вставить("КомиссияДолжность" + ВыборкаСтрокКомиссия.НомерСтроки, ВыборкаСтрокКомиссия.Должность);
			Параметры.Вставить("КомиссияФИО" + ВыборкаСтрокКомиссия.НомерСтроки, ВыборкаСтрокКомиссия.Представление);
			Разделитель = ";";
		КонецЦикла;
	КонецЕсли;
	
	СоставКомиссии1 = Лев(СоставКомиссии1, СтрДлина(СоставКомиссии1)-2);
	
	Параметры.Вставить("СоставКомиссии1", СоставКомиссии1);

	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти // ПечатьОписьКактуПриемки


Функция ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати = Неопределено) Экспорт
	
	ПолучатьЦены = Ложь;
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		ПолучатьЦены = ПараметрыПечати.Свойство("ПолучатьЦены");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеДляПечати(ПолучатьЦены);
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	ЗапасыСервер.УстановитьСтатусыПараметровУчетаВПараметрахЗапроса(Запрос);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("РезультатПоШапке"          , РезультатыЗапросов[РезультатыЗапросов.ВГраница() - 2]);
	ДанныеДляПечати.Вставить("РезультатПоТабличнойЧасти" , РезультатыЗапросов[РезультатыЗапросов.ВГраница() - 1]);
	ДанныеДляПечати.Вставить("РезультатПоСоставуКомиссии", РезультатыЗапросов[РезультатыЗапросов.ВГраница()]);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечати(ПолучатьЦены)

ТекстЗапроса = "ВЫБРАТЬ
               |	Документ.Ссылка КАК Ссылка,
               |	Документ.Номер КАК НомерДокумента,
               |	Документ.Дата КАК ДатаДокумента,
               |	Документ.Организация КАК Организация,
               |	Документ.ПодразделениеОрганизации КАК Подразделение,
               |	Документ.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
               |	Документ.Склад КАК Склад,
               |	Документ.Склад.Представление КАК СкладПредставление,
               |	Документ.НомерПриказа КАК НомерПриказа,
               |	Документ.ДатаПриказа КАК ДатаПриказа,
               |	Документ.СтатьяРасходов КАК СтатьяРасходов,
               |	Документ.АналитикаРасходов КАК АналитикаРасходов,
               |	Документ.Центр.ДиректорДляПечати КАК ДиректорЦентра,
               |	Документ.Центр.ПолноеНаименование КАК НаименованиеЦентра,
               |	Документ.Печать_НомерЗаключенияВП КАК НомерАктаВП,
               |	Документ.Печать_ДатаЗаключенияВП КАК ДатаАктаВП,
               |	Документ.ВидАктаСписания КАК ВидАктаСписания,
               |	Документ.Печать_НомерСпецификацияФ6 КАК НомерСпецификацияФ6,
               |	Документ.Печать_ДатаСпецификацииФ6 КАК ДатаСпецификацииФ6,
               |	Документ.Печать_НомерАктаВыбраковки КАК НомерАктаВыбраковки,
               |	Документ.Печать_ДатаАктаВыбраковки КАК ДатаАктаВыбраковки,
               |	Документ.Склад.ТекущийОтветственный КАК ОтветственныйСклад,
               |	Документ.Склад.ТекущаяДолжностьОтветственного КАК ДолжностьОтветственногоСклад
               |ПОМЕСТИТЬ втШапка
               |ИЗ
               |	Документ.БракМСИ КАК Документ
               |ГДЕ
               |	Документ.Ссылка В(&ТекущийДокумент)
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	Товары.Ссылка КАК Документ,
               |	Товары.НомерСтроки КАК НомерСтроки,
               |	КОНЕЦПЕРИОДА(Шапка.ДатаДокумента, ДЕНЬ) КАК ДатаПолученияЦены,
               |	Шапка.Организация КАК Организация,
               |	Шапка.Склад КАК Склад,
               |	Товары.Номенклатура КАК Номенклатура,
               |	Товары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
               |	Товары.Номенклатура.Описание КАК Описание,
               |	Товары.Номенклатура.Код КАК ТоварКод,
               |	Товары.СерияНоменклатуры КАК СерияНоменклатуры,
               |	ВЫБОР
               |		КОГДА Товары.СтатусУказанияСерий В (&СтатусУчетСебестоимостиПоСериям)
               |			ТОГДА Товары.СерияНоменклатуры
               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
               |	КОНЕЦ КАК СерияНоменклатурыДляСебестоимости,
               |	Товары.Партия КАК Партия,
               |	ВЫБОР
               |		КОГДА Товары.СтатусУказанияПартий В (&СтатусУчетСебестоимостиПоПартиям)
               |			ТОГДА Товары.Партия
               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
               |	КОНЕЦ КАК ПартияДляСебестоимости,
               |	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
               |	Товары.ЕдиницаИзмерения.КодОКЕИ КАК КодПоОКЕИ,
               |	Товары.Количество КАК Количество,
               |	Шапка.СтатьяРасходов КАК СтатьяРасходов,
               |	Шапка.АналитикаРасходов КАК АналитикаРасходов,
               |	Шапка.ВидАктаСписания КАК Основание
               |ПОМЕСТИТЬ втТовары
               |ИЗ
               |	Документ.БракМСИ.Товары КАК Товары
               |		ЛЕВОЕ СОЕДИНЕНИЕ втШапка КАК Шапка
               |		ПО Товары.Ссылка = Шапка.Ссылка
               |ГДЕ
               |	Товары.Ссылка В(&ТекущийДокумент)";

ПараметрыПолученияЦен = ФормированиеПечатныхФормПоддержкаПроектов.ПараметрыПолученияЦен();

Если ПолучатьЦены Тогда
	
	ПараметрыПолученияЦен.ИспользоватьЦеныПоВидуЦен = Истина;
	ПараметрыПолученияЦен.ИспользоватьЦеныПоСебестоимости = Истина;
	
КонецЕсли;

ТекстЗапроса = ФормированиеПечатныхФормПоддержкаПроектов.ТекстЗапросаСЦенами(ТекстЗапроса, ПараметрыПолученияЦен);

СхемаЗапроса = Новый СхемаЗапроса;
СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
Запрос.УстановитьТекстЗапроса("
|ВЫБРАТЬ
|	СоставКомиссии.Ссылка                     КАК Документ,
|	СоставКомиссии.НомерСтроки                КАК НомерСтроки,
|	СоставКомиссии.ЧленКомиссии               КАК ЧленКомиссии,
|	СоставКомиссии.ЧленКомиссии.Наименование  КАК Представление,
|	СоставКомиссии.Председатель               КАК Председатель,
|	СоставКомиссии.Должность                  КАК Должность
|ИЗ
|	Документ.БракМСИ.СоставКомиссии КАК СоставКомиссии
|ГДЕ
|	СоставКомиссии.Ссылка В (&ТекущийДокумент)
|
|УПОРЯДОЧИТЬ ПО
|	Ссылка,
|	Председатель УБЫВ,
|	НомерСтроки
|ИТОГИ ПО
|	Документ
|");

ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();

Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииПоддержкаПроектов.ДобавитьКомандыСоздатьНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыПоддержкаПроектов.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

#КонецОбласти // СлужебныеПроцедурыИФункции

// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли