#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	ПредставлениеДокумента = ?(Данные.Проведен, "Задание", "Проект задания");
	Представление = ПредставлениеДокумента + " № " + Данные.НомерПроекта + " от " + Формат(Данные.Дата,"ДФ=dd.MM.yyyy" + ?(Данные.ЗаСчетСредствФОИВ, "*", ""));
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("НомерПроекта");
	Поля.Добавить("Дата");
	Поля.Добавить("Проведен");
	Поля.Добавить("ЗаСчетСредствФОИВ");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции
// Сформировать таблицы движений для проведения.
// 
// Параметры:
//  ДополнительныеСвойства - Структура - Дополнительные свойства
//  Регистры - Неопределено - Регистры
Процедура СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства);
	

	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаИсполнениеПроектов(), Метаданные.РегистрыНакопления.ИсполнениеПроектов);
	
	Запрос = Новый Запрос(ПроведениеПоддержкаПроектов.ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры));
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ПроведениеПоддержкаПроектов.ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, Запрос.ВыполнитьПакет(), Регистры);
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("Период", "Дата");
	ЗапрашиваемыеДанные.Вставить("Валюта");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроведениеПоддержкаПроектов.ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства),
		ЗапрашиваемыеДанные);
		
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ОсновныеДанныеДокумента.Валюта, ОсновныеДанныеДокумента.Период);
	КоэффициентПересчетаВВалютуРегл = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	ОсновныеДанныеДокумента.Вставить("КоэффициентПересчетаВВалютуРегл", КоэффициентПересчетаВВалютуРегл);
	
	ЗапасыСервер.ПриПодготовкеОсновныхДанныхДляПроведения(ДополнительныеСвойства, ОсновныеДанныеДокумента);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаИсполнениеПроектов()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	1 КАК НомерСтроки,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	               |	&Период КАК Период,
	               |	&Организация КАК Организация,
	               |	ПроектЗадания.Ссылка КАК ПроектЗадания,
	               |	NULL КАК Договор,
	               |	ПроектЗадания.Валюта КАК Валюта,
	               |	ПроектЗадания.СуммаВВалюте КАК Сумма,
	               |	NULL КАК СуммаПеречислено
	               |ИЗ
	               |	Документ.ПроектЗадания КАК ПроектЗадания
	               |ГДЕ
	               |	ПроектЗадания.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
				   |	2 КАК НомерСтроки,
				   |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
				   |	ПроектЗаданияПеречисления.Дата КАК Период,
	               |	&Организация КАК Организация,
				   |	ПроектЗаданияПеречисления.Ссылка.Ссылка КАК ПроектЗадания,
				   |	ПроектЗаданияПеречисления.Договор КАК Договор,
				   |	ПроектЗаданияПеречисления.Валюта КАК Валюта,
				   |	NULL КАК Сумма,
	               |	ПроектЗаданияПеречисления.Сумма КАК СуммаПеречислено
	               |ИЗ
	               |	Документ.ПроектЗадания.Перечисления КАК ПроектЗаданияПеречисления
	               |ГДЕ
	               |	ПроектЗаданияПеречисления.Ссылка = &Ссылка
				   |	И ПроектЗаданияПеречисления.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидДвижения.Расход)";
	
	Возврат ТекстЗапроса;
	
КонецФункции



Процедура ДобавитьКомандыСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииПоддержкаПроектов.ДобавитьКомандыСоздатьНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыПоддержкаПроектов.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Доступные печатные формы:
// * Идентификатор - Строка - 
// * Представление - Строка - 
// * МенеджерПечати - Неопределено 
// * ТипыОбъектовПечати - Неопределено - 
// * Обработчик - Строка - 
// * Порядок - Число - 
// * Картинка - Картинка - 
// * СписокФорм - Строка - 
// * МестоРазмещения - Строка - 
// * ЗаголовокФормы - Строка - 
// * ФункциональныеОпции - Строка - 
// * УсловияВидимости - Неопределено - 
// * ПроверкаПроведенияПередПечатью - Булево - 
// * СразуНаПринтер - Булево - 
// * ФорматСохранения - Неопределено
// * ПереопределитьПользовательскиеНастройкиКоличества - Булево - 
// * ДополнитьКомплектВнешнимиПечатнымиФормами - Булево - 
// * ФиксированныйКомплект - Булево - 
// * ДополнительныеПараметры - Структура - 
// * НеВыполнятьЗаписьВФорме - Булево - 
// * ТребуетсяРасширениеРаботыСФайлами - Булево - 
// * СкрытаФункциональнымиОпциями - Булево - 
// * УникальныйИдентификатор - Строка - 
// * Отключена - Булево - 
// * ИмяКомандыНаФорме - Строка - 
// * ПутьКМакету - Строка - 
// * КомандыПечати - ТаблицаЗначений - 
// * Роли - Строка - 
// * Параметризуемая - Булево - 
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюПоддержкаПроектов.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	МенеджерПечати      = МетаданныеДокумента.ПолноеИмя();
	МетаданныеМакетов   = МетаданныеДокумента.Макеты;
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "ПаспортПроектаЗадания", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_Паспорт.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_Паспорт);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "ПроектЗадания", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_Проект.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_Проект);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "ОтчетПоЗаданию", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_ОтчетПоЗаданию.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_ОтчетПоЗаданию);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ПечатьПаспортПроектаЗадания(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_Паспорт);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
				
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиПаспортПроектаЗадания(Шапка);
		
		// Вывод области Шапка
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Шапка", ПараметрыИзШапки);
		
		Если Шапка.ПроизвольныйПредметПроекта Тогда
			ДанныеСтроки = Новый Структура("ПредметИСостав, Количество, Расходы", Шапка.НаименованиеПредметаПроекта, 1, Шапка.СуммаВВалюте + " " + Шапка.Валюта);
		    ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
							
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			// Вывод области Строка
			ТабличныйДокумент.Вывести(ОбластьСтрока);	
		Иначе
			ТоварыПоНоменклатуре = Шапка.ПредметыПроекта.Выгрузить();
			
			ТДСтроки = Новый ТабличныйДокумент();
			Для Каждого ВыборкаСтрокТовары Из ТоварыПоНоменклатуре Цикл
					
				ДанныеСтроки = Новый Структура("ПредметИСостав, Количество, Расходы", ВыборкаСтрокТовары.Номенклатура, ВыборкаСтрокТовары.Количество, Формат(Шапка.СуммаВВалюте, "ЧГ=") + " " + Строка(Шапка.Валюта));
			    ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
				ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
								
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				// Вывод области Строка
				ТДСтроки.Вывести(ОбластьСтрока);
					
			КонецЦикла;
			
			Первая = 1;
			Последняя = ТДСтроки.ВысотаТаблицы;
			Ячейка = ТДСтроки.Область(Первая, 10,Последняя,12);
			Ячейка.Объединить();
			//Ячейка.Текст = Строка(Шапка.СуммаВВалюте) + " " + Строка(Шапка.Валюта);
			
			ТабличныйДокумент.Вывести(ТДСтроки);
		КонецЕсли;
				
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиПаспортПроектаЗадания(Шапка)
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("ИндексЗадания", Шапка.НомерПроекта + ?(Шапка.ЗаСчетСредствФОИВ, "*",""));
	Параметры.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, "ДЛФ=Д"));
	Параметры.Вставить("ДО", Шапка.ДобывающаяОрганизация);
	Параметры.Вставить("Гриф", Шапка.Гриф);
	
	Возврат Параметры;
	
КонецФункции

Функция ПечатьПроектЗадания(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_Проект);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
		
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
				
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиПроектЗадания(Шапка);
		
		// Вывод областей страниц
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Страница1", ПараметрыИзШапки);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Страница2", ПараметрыИзШапки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиПроектЗадания(Шапка)
	
	Параметры = Новый Структура();
	
	Обоснование = "";
	Если ЗначениеЗаполнено(Шапка.Ссылка.ФайлОбоснование) Тогда
		Попытка
			Обоснование = Шапка.Ссылка.ФайлОбоснование.ТекстХранилище.Получить();
		Исключение
			Обоснование = "";
		КонецПопытки;
	КонецЕсли;
	Параметры.Вставить("Ссылка", Шапка.Ссылка);
	Параметры.Вставить("ИндексЗадания", Шапка.НомерПроекта + ?(Шапка.ЗаСчетСредствФОИВ, "*",""));
	Параметры.Вставить("ЗаСчетСредствФОИВ", Шапка.ЗаСчетСредствФОИВ);
	Параметры.Вставить("ЗаСчетСредствФОИВТекст", ?(Шапка.ЗаСчетСредствФОИВ,"(за средства ФСО России)", ""));
	Параметры.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, "ДЛФ=Д"));
	Параметры.Вставить("ДО", Шапка.ДобывающаяОрганизация);
	Параметры.Вставить("Гриф", Шапка.Гриф);
	Параметры.Вставить("ПредметЗадания", Шапка.Печать_ПредметЗадания);
	Параметры.Вставить("Материал", Шапка.Печать_ДляОбеспечения);
	Параметры.Вставить("Основание", Шапка.Печать_ОснованиеРабот);
	Параметры.Вставить("НачалоПроекта", Формат(Шапка.НачалоВыполнения, "ДЛФ=Д"));
	Параметры.Вставить("ОкончаниеПроекта", Формат(Шапка.ОкончаниеВыполнения, "ДЛФ=Д"));
	Параметры.Вставить("ОрганизацияПотребитель", Шапка.Печать_ОрганизацияПотребитель);
	Параметры.Вставить("Лицензия", Шапка.Печать_Лицензия);
	Параметры.Вставить("Цель", Шапка.Печать_ЦельИспользования);
	Параметры.Вставить("Обоснование", Обоснование);
	Параметры.Вставить("Освоение", Шапка.Печать_НаличиеВозможностей);
	Параметры.Вставить("ВыходНаПроизводителя", Шапка.Печать_ФактыВыхода);
	Параметры.Вставить("СуммаВВалюте", Шапка.СуммаВВалюте);
	Параметры.Вставить("Валюта", Шапка.Валюта);
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьТекстЗапросаДанныеДляПечати()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПроектЗадания.Ссылка КАК Ссылка,
	               |	ПроектЗадания.ВерсияДанных КАК ВерсияДанных,
	               |	ПроектЗадания.ПометкаУдаления КАК ПометкаУдаления,
	               |	ПроектЗадания.Номер КАК НомерДокумента,
	               |	ПроектЗадания.Дата КАК ДатаДокумента,
	               |	ПроектЗадания.НомерПроекта КАК НомерПроекта,
	               |	ПроектЗадания.Организация КАК Организация,
	               |	ПроектЗадания.ДобывающаяОрганизация КАК ДобывающаяОрганизация,
	               |	ПроектЗадания.Ответственный КАК Ответственный,
	               |	ПроектЗадания.НомерРазрешения КАК НомерРазрешения,
	               |	ПроектЗадания.Валюта КАК Валюта,
	               |	ПроектЗадания.СуммаВВалюте КАК СуммаВВалюте,
	               |	ПроектЗадания.ЗаСчетСредствФОИВ КАК ЗаСчетСредствФОИВ,
	               |	ПроектЗадания.Комментарий КАК Комментарий,
	               |	ПроектЗадания.Автор КАК Автор,
	               |	ПроектЗадания.ПроизвольныйПредметПроекта КАК ПроизвольныйПредметПроекта,
	               |	ПроектЗадания.НаименованиеПредметаПроекта КАК НаименованиеПредметаПроекта,
	               |	ПроектЗадания.Гриф КАК Гриф,
	               |	ПроектЗадания.СтатусЗадания КАК СтатусЗадания,
	               |	ПроектЗадания.ПредметыПроекта.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество
	               |	) КАК ПредметыПроекта,
	               |	ПроектЗадания.НачалоВыполнения КАК НачалоВыполнения,
	               |	ПроектЗадания.ОкончаниеВыполнения КАК ОкончаниеВыполнения,
	               |	ПроектЗадания.Печать_ПредметЗадания КАК Печать_ПредметЗадания,
	               |	ПроектЗадания.Печать_ДляОбеспечения КАК Печать_ДляОбеспечения,
	               |	ПроектЗадания.Печать_ОснованиеРабот КАК Печать_ОснованиеРабот,
	               |	ПроектЗадания.Печать_ОрганизацияПотребитель КАК Печать_ОрганизацияПотребитель,
	               |	ПроектЗадания.Печать_Лицензия КАК Печать_Лицензия,
	               |	ПроектЗадания.Печать_ЦельИспользования КАК Печать_ЦельИспользования,
	               |	ПроектЗадания.Печать_НаличиеВозможностей КАК Печать_НаличиеВозможностей,
	               |	ПроектЗадания.Печать_ФактыВыхода КАК Печать_ФактыВыхода
	               |ИЗ
	               |	Документ.ПроектЗадания КАК ПроектЗадания
	               |ГДЕ
	               |	ПроектЗадания.Ссылка В(&ТекущийДокумент)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПечатьОтчетПоЗаданию(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_ОтчетПоЗаданию);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
		
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
				
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиПроектЗадания(Шапка);
		
		Дата = ТекущаяДатаСеанса();
		ПараметрыИзШапки.Вставить("Дата", Формат(Дата, "ДЛФ=Д"));
		
		ПараметрыИзШапки.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
		
		ЗапросБалансаПроекта = Новый Запрос();
		ЗапросБалансаПроекта.Текст = "ВЫБРАТЬ
		                             |	СУММА(ИсполнениеПроектовОстатки.СуммаОстаток) КАК СуммаОстаток,
		                             |	СУММА(ИсполнениеПроектовОстатки.СуммаПеречисленоОстаток) КАК СуммаПеречисленоОстаток
		                             |ИЗ
		                             |	РегистрНакопления.ИсполнениеПроектов.Остатки(&Дата, ПроектЗадания = &ПроектЗадания) КАК ИсполнениеПроектовОстатки";
		ЗапросБалансаПроекта.УстановитьПараметр("Дата", Дата);
		ЗапросБалансаПроекта.УстановитьПараметр("ПроектЗадания", ПараметрыИзШапки.Ссылка);
		//@skip-warning
		ВыборкаБаланса = ЗапросБалансаПроекта.Выполнить().Выбрать();
		Если ВыборкаБаланса.Следующий() Тогда
			ПараметрыИзШапки.Вставить("СуммаОстаток", Формат(ВыборкаБаланса.СуммаОстаток, "ЧДЦ=2"));
			Если ПараметрыИзШапки.ЗаСчетСредствФОИВ Тогда
				ПараметрыИзШапки.Вставить("СуммаПеречисленоОстаток", Формат(ВыборкаБаланса.СуммаПеречисленоОстаток, "ЧДЦ=2"));	
			КонецЕсли;
		КонецЕсли;
		
		// Вывод областей страниц
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Шапка", ПараметрыИзШапки);
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	СпецификацияКДоговоруТовары.Номенклатура.Наименование КАК Наименование,
		               |	СпецификацияКДоговоруТовары.Количество КАК Количество,
		               |	СпецификацияКДоговоруТовары.Цена КАК Цена,
		               |	СпецификацияКДоговоруТовары.СуммаСНДС КАК Сумма
		               |ИЗ
		               |	Документ.СпецификацияКДоговору.Товары КАК СпецификацияКДоговоруТовары
		               |ГДЕ
		               |	СпецификацияКДоговоруТовары.Ссылка.ПроектЗадания = &ПроектЗадания";
		Запрос.УстановитьПараметр("ПроектЗадания", Шапка.Ссылка);
		//@skip-warning
		Выборка = Запрос.Выполнить().Выбрать();
		НомерПП = 0;
		Пока выборка.Следующий() Цикл
			НомерПП = НомерПП + 1;
			//@skip-warning
			СтруктураЗаполнения = Новый Структура("НомерПП, Наименование, Количество, Цена, Сумма");
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
			СтруктураЗаполнения.НомерПП = НомерПП;
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Строка", СтруктураЗаполнения);
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции
#КонецОбласти

#КонецЕсли