
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.ГруппаДополнительныеРеквизиты.Имя);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастройкаФормПоддержкаПроектов.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПолучитьБалансПроекта();
	КонецЕсли;
	
	Элементы.ГруппаПеречисления.Видимость = Объект.ЗаСчетСредствФОИВ;
	Элементы.ПредметыПроекта.Доступность = Не Объект.ПроизвольныйПредметПроекта;
	Элементы.НаименованиеПредметаПроекта.Доступность = Объект.ПроизвольныйПредметПроекта;
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПолучитьБалансПроекта()
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПолучитьБалансПроекта();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.ВладелецФайла = Объект.Ссылка Тогда
		
		Модифицированность = Истина;
		СсылкаНаФайл = Параметр.Файл;
		
		Если ВыборСогласования Тогда
		
			Объект.ФайлСогласование = СсылкаНаФайл;
			АдресСогласования = НавигационнаяСсылкаФайла(Объект.ФайлСогласование, УникальныйИдентификатор);
			ВыборСогласования = Ложь;
			
		ИначеЕсли ВыборРапорта Тогда
			
			Объект.ФайлРапорт = СсылкаНаФайл;
			АдресРапорта = НавигационнаяСсылкаФайла(Объект.ФайлРапорт, УникальныйИдентификатор);
			ВыборРапорта = Ложь;
			
		ИначеЕсли ВыборПроекта Тогда
			
			Объект.ФайлПроектЗадания = СсылкаНаФайл;
			АдресПроекта = НавигационнаяСсылкаФайла(Объект.ФайлПроектЗадания, УникальныйИдентификатор);
			ВыборПроекта = Ложь;
			
		ИначеЕсли ВыборРазрешения Тогда
			
			Объект.ФайлРазрешение = СсылкаНаФайл;
			АдресРазрешения = НавигационнаяСсылкаФайла(Объект.ФайлРазрешение, УникальныйИдентификатор);
			ВыборРазрешения = Ложь;
			
		ИначеЕсли ВыборОбоснования Тогда
			
			Объект.ФайлОбоснование = СсылкаНаФайл;
			АдресОбоснования = НавигационнаяСсылкаФайла(Объект.ФайлОбоснование, УникальныйИдентификатор);
			ВыборОбоснования = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФайлОбоснованиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФайл("ФайлОбоснование");
КонецПроцедуры

&НаКлиенте
Процедура ФайлОбоснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьФайлИзПрисоединенныхФайлов("ФайлОбоснование");
КонецПроцедуры

&НаКлиенте
Процедура ЗаСчетСредствФОИВПриИзменении(Элемент)
	
	Элементы.ГруппаПеречисления.Видимость = Объект.ЗаСчетСредствФОИВ;
	Если Не Объект.ЗаСчетСредствФОИВ Тогда
		Объект.Перечисления.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныйПредметПроектаПриИзменении(Элемент)
	Элементы.ПредметыПроекта.Доступность = Не Объект.ПроизвольныйПредметПроекта;
	Элементы.НаименованиеПредметаПроекта.Доступность = Объект.ПроизвольныйПредметПроекта;
	Если Объект.ПроизвольныйПредметПроекта Тогда
		Объект.ПредметыПроекта.Очистить();
	Иначе
		Объект.НаименованиеПредметаПроекта = "";
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ФайлСогласованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьФайлИзПрисоединенныхФайлов("ФайлСогласование");
КонецПроцедуры

&НаКлиенте
Процедура ФайлРапортНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьФайлИзПрисоединенныхФайлов("ФайлРапорт");
КонецПроцедуры

&НаКлиенте
Процедура ФайлПроектЗаданияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьФайлИзПрисоединенныхФайлов("ФайлПроектЗадания");
КонецПроцедуры

&НаКлиенте
Процедура ФайлРазрешениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьФайлИзПрисоединенныхФайлов("ФайлРазрешение");
КонецПроцедуры


//@skip-warning
&НаКлиенте
Процедура ОткрытьФайл(Элемент)
		
	ТекущиеДанные = Объект[Элемент];
	
	//@skip-check structure-consructor-too-many-keys
	РеквизитыФайла = Новый Структура("Зашифрован, Расширение, Наименование, Ссылка");
	ЗполнитьРеквизитыФайла(ТекущиеДанные, РеквизитыФайла);
	
	Если РеквизитыФайла.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(РеквизитыФайла.Расширение) <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		//@skip-check notify-description-to-server-procedure
		//@skip-check wrong-string-literal-content
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлПослеПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ПараметрыФормы.Вставить("ИмяФайла",
			ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(РеквизитыФайла.Наименование, ТекущиеДанные.Расширение));
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ФайлРедактируется = Ложь;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(РеквизитыФайла.Ссылка, Неопределено, УникальныйИдентификатор);
	Если ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(РеквизитыФайла.Ссылка);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлСогласованиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФайл("ФайлСогласование");
КонецПроцедуры

&НаКлиенте
Процедура ФайлРапортОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФайл("ФайлРапорт");
КонецПроцедуры

&НаКлиенте
Процедура ФайлПроектЗаданияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФайл("ФайлПроектЗадания");
КонецПроцедуры

&НаКлиенте
Процедура ФайлРазрешениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФайл("ФайлРазрешение");
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПеречисления

&НаКлиенте
Процедура ПеречисленияСуммаПриИзменении(Элемент)
	Если Не Элементы.Перечисления.ТекущиеДанные.ВидДвижения = ПредопределенноеЗначение("Перечисление.ВидДвижения.Расход") Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторСтроки = Элементы.Перечисления.ТекущиеДанные.ПолучитьИдентификатор();
	РассчитатьСуммуВВалюте(ИдентификаторСтроки);
	ПолучитьБалансПроекта();
КонецПроцедуры

&НаКлиенте
Процедура ПеречисленияДатаПриИзменении(Элемент)
	Если Не Элементы.Перечисления.ТекущиеДанные.ВидДвижения = ПредопределенноеЗначение("Перечисление.ВидДвижения.Расход") Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторСтроки = Элементы.Перечисления.ТекущиеДанные.ПолучитьИдентификатор();
	РассчитатьСуммуВВалюте(ИдентификаторСтроки);
	ПолучитьБалансПроекта();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьОбоснование(Команда)
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьФайлНаКлиенте("ВыборОбоснования");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСогласование(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьФайлНаКлиенте("ВыборСогласования");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРапорт(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьФайлНаКлиенте("ВыборРапорта");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроект(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьФайлНаКлиенте("ВыборПроекта");
	

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРазрешение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьФайлНаКлиенте("ВыборРазрешения");
	
КонецПроцедуры
#КонецОбласти




////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьФайлИзПрисоединенныхФайлов(Элемент)
	
	ПараметрыВыбораФайла = Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);
	ДополнительныеПараметры = Новый Структура("Элемент", Элемент);	
	Оповещение = Новый ОписаниеОповещения("ВыбратьФайлИзПрисоединенныхФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыВыбораФайла, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция НавигационнаяСсылкаФайла(Знач Файл, Знач ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РаботаСФайлами.ДанныеФайла(Файл, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервере
Процедура ПолучитьБалансПроекта()
	
	ЗапросОстаткаПоДоговору = Новый Запрос();
	ЗапросОстаткаПоДоговору.Текст = "ВЫБРАТЬ
	                                |	ИсполнениеПроектовОстатки.СуммаОстаток КАК СуммаОстаток
	                                |ИЗ
	                                |	РегистрНакопления.ИсполнениеПроектов.Остатки(
	                                |			,
	                                |			Организация = &Организация
	                                |				И ПроектЗадания = &ПроектЗадания) КАК ИсполнениеПроектовОстатки";
	ЗапросОстаткаПоДоговору.УстановитьПараметр("ПроектЗадания", Объект.Ссылка);
	ЗапросОстаткаПоДоговору.УстановитьПараметр("Организация", Объект.Организация);
	
	Выборка = ЗапросОстаткаПоДоговору.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		БалансПроекта = Выборка.СуммаОстаток;
	КонецЕсли;
	
	ЗапросПеречислений = Новый Запрос();
	ЗапросПеречислений.Текст = "ВЫБРАТЬ
	                           |	ИсполнениеПроектовОбороты.СуммаПеречисленоПриход КАК СуммаПеречисленоПриход,
	                           |	ИсполнениеПроектовОбороты.СуммаПеречисленоРасход КАК СуммаПеречисленоРасход
	                           |ИЗ
	                           |	РегистрНакопления.ИсполнениеПроектов.Обороты(
	                           |			,
	                           |			,
	                           |			,
	                           |			Организация = &Организация
	                           |				И ПроектЗадания = &ПроектЗадания) КАК ИсполнениеПроектовОбороты";
	ЗапросПеречислений.УстановитьПараметр("ПроектЗадания", Объект.Ссылка);
	ЗапросПеречислений.УстановитьПараметр("Организация", Объект.Организация);
	
	Выборка = ЗапросПеречислений.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Перечислено = Выборка.СуммаПеречисленоПриход;
		Потрачено = Выборка.СуммаПеречисленоРасход;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ВидДвижения", Перечисления.ВидДвижения.Приход);
	СтрокиПрихода = Объект.Перечисления.НайтиСтроки(СтруктураПоиска);
	ТаблицаПрихода = Объект.Перечисления.Выгрузить(СтрокиПрихода);
	Получено = ТаблицаПрихода.Итог("Сумма");
	
	СтруктураПоиска = Новый Структура("ВидДвижения", Перечисления.ВидДвижения.Расход);
	СтрокиРасхода = Объект.Перечисления.НайтиСтроки(СтруктураПоиска);
	ТаблицаРасхода = Объект.Перечисления.Выгрузить(СтрокиРасхода);
	ПеречисленоВВалюте = ТаблицаРасхода.Итог("СуммаВВалютеПроекта");
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьФайлНаКлиенте(Реквизит)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо записать объект!");
		
	Иначе
		ЭтотОбъект[Реквизит] = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, ФильтрФайлов());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ФильтрФайлов()
	//@skip-warning
	Возврат НСтр("ru = 'Все файлы(*.*)|*.*"
		                            + "|Изображения (*.bmp;*.gif;*.png;*.jpeg;*.jpg)|*.bmp;*.gif;*.png;*.jpeg;*.jpg"
		                            + "|Формат MS WORD(*.doc*;*.docx)|*.doc;*.docx"
		                            + "|Формат PDF(*.PDF*)|*.PDF'");
КонецФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//&НаКлиенте
//Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
//	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
//КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура РассчитатьСуммуВВалюте(Идентификатор)
	Строка = Объект.Перечисления.НайтиПоИдентификатору(Идентификатор);
	СтруктураКурсаПроекта = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, Строка.Дата);
	КоэффициентПересчетаВВалютуПроекта = СтруктураКурсаПроекта.Курс / СтруктураКурсаПроекта.Кратность;
	Строка.СуммаВВалютеПроекта = Строка.Сумма / КоэффициентПересчетаВВалютуПроекта;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлИзПрисоединенныхФайловЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	Соответствие = Новый Соответствие();
	Соответствие.Вставить("ФайлСогласование", "АдресСогласования");
	Соответствие.Вставить("ФайлРапорт", "АдресРапорта");
	Соответствие.Вставить("ФайлПроектЗадания", "АдресПроекта");
	Соответствие.Вставить("ФайлРазрешение", "АдресРазрешения");
	
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		
		Объект[ДополнительныеПараметры.Элемент] = ЗначениеВыбора;
		
		ЭтотОбъект[Соответствие.Получить(ДополнительныеПараметры.Элемент)] = НавигационнаяСсылкаФайла(Объект[ДополнительныеПараметры.Элемент], УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗполнитьРеквизитыФайла(Файл, РеквизитыФайла)
	Для Каждого Элемент Из РеквизитыФайла Цикл
		РеквизитыФайла[Элемент.Ключ] = Файл[Элемент.Ключ];
	КонецЦикла;
КонецПроцедуры

#КонецОбласти 
