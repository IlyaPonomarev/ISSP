#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Имена реквизитов, от значений которых зависят параметры учета номенклатуры
//
// Возвращаемое значение:
//   Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУчетаНоменклатуры() Экспорт
	
	Возврат "СкладОтправитель, СкладПолучатель";
	
КонецФункции

// Возвращает параметры учета для номенклатуры, указанной в документе
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
// Возвращаемое значение:
//   Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУчетаНоменклатуры
//
Функция ПараметрыУчетаНоменклатуры(Объект) Экспорт
	
	ПараметрыУчета = ЗапасыСервер.ПараметрыУчетаНоменклатуры();
	ПараметрыУчета.ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ПараметрыУчетаНаСкладеОтправителе = СкладыСервер.ПараметрыУчетаНоменклатуры(Объект.СкладОтправитель);
	ПараметрыУчетаНаСкладеПолучателе = СкладыСервер.ПараметрыУчетаНоменклатуры(Объект.СкладПолучатель);
	
	ПараметрыУчета.ИспользоватьСерии =
		ПараметрыУчетаНаСкладеОтправителе.ИспользоватьСерииНоменклатуры
		Или ПараметрыУчетаНаСкладеПолучателе.ИспользоватьСерииНоменклатуры;
	ПараметрыУчета.ИспользоватьПартии =
		ПараметрыУчетаНаСкладеОтправителе.ИспользоватьПартии
		Или ПараметрыУчетаНаСкладеПолучателе.ИспользоватьПартии;
	//@skip-check wrong-type-expression
	ПараметрыУчета.Склад = Новый Структура("Отправитель, Получатель", Объект.СкладОтправитель, Объект.СкладПолучатель);
	
	ПараметрыУчета.ЭтоПеремещениеМеждуСкладами = Истина;
	
	ПараметрыУчета.СуффиксыСтатусов.Добавить("");
	ПараметрыУчета.СуффиксыСтатусов.Добавить("Отправитель");
	ПараметрыУчета.СуффиксыСтатусов.Добавить("Получатель");
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыУчета;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания параметров учета номенклатуры
//
// Параметры:
//   ПараметрыУчетаНоменклатуры - Структура - состав полей задается в функции ЗапасыСервер.ПараметрыУчетаНоменклатуры
//
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры) Экспорт
	
	Возврат ЗапасыСервер.ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры);
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение
#Область Проведение

// Инициализирует таблицы значений, содержащие данные для проведения документа.
// Параметры:
// ДополнительныеСвойства - Структура
// Регистры - Неопределено	
Процедура СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства);
	
	ИнициализироватьКлючиАналитикиВидаУчета(ОсновныеДанныеДокумента);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(ОсновныеДанныеДокумента);
	
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаТовары());
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаТоварыНаСкладах()                 , Метаданные.РегистрыНакопления.ТоварыНаСкладах);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаСвободныеОстатки()                , Метаданные.РегистрыНакопления.СвободныеОстатки);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтАналитика());
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтАналитикаУчетныеЦены());
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаСебестоимостьТоваров()            , Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаДвиженияНоменклатураНоменклатура(), Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаТаблицаПеремещено(), Метаданные.РегистрыНакопления.ИсполнениеЗаявокПредприятий);
	
	Запрос = Новый Запрос(ПроведениеПоддержкаПроектов.ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ПроведениеПоддержкаПроектов.ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, Запрос.ВыполнитьПакет(), Регистры);
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Период", "Дата");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("ОрганизацияПолучатель", "ВЫБОР КОГДА ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаТоваров) ТОГДА ОрганизацияПолучатель ИНАЧЕ Организация КОНЕЦ");
	ЗапрашиваемыеДанные.Вставить("ХозяйственнаяОперация");
	ЗапрашиваемыеДанные.Вставить("СкладОтправитель");
	ЗапрашиваемыеДанные.Вставить("СкладПолучатель");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроведениеПоддержкаПроектов.ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства),
		ЗапрашиваемыеДанные);
		
	ОсновныеДанныеДокумента.Вставить("Граница", Новый Граница(ОсновныеДанныеДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));
	
	ЗапасыСервер.ПриПодготовкеОсновныхДанныхДляПроведения(ДополнительныеСвойства, ОсновныеДанныеДокумента);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТовары()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                         КАК НомерСтроки,
	|	&Организация                                      КАК Организация,
	|	&ОрганизацияПолучатель                            КАК ОрганизацияПолучатель,
	|	ТаблицаТовары.Номенклатура                        КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В (&СтатусУчетПоСериям, &СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                             КАК СерияНоменклатурыОтправитель,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель В (&СтатусУчетПоСериям, &СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                             КАК СерияНоменклатурыПолучатель,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартийОтправитель В (&СтатусУчетПоПартиям, &СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                             КАК ПартияОтправитель,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартийПолучатель В (&СтатусУчетПоПартиям, &СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                             КАК ПартияПолучатель,
	|	ТаблицаТовары.Количество                         КАК Количество,
	|	ТаблицаТовары.ЕдиницаИзмерения                   КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                             КАК СерияНоменклатурыДляСебестоимостиОтправитель,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                             КАК СерияНоменклатурыДляСебестоимостиПолучатель,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартийОтправитель В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                             КАК ПартияДляСебестоимостиОтправитель,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартийПолучатель В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                             КАК ПартияДляСебестоимостиПолучатель
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыНаСкладах()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                           КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                   КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	&Период                                     КАК Период,
	|	ТаблицаТовары.Организация                   КАК Организация,
	|	&СкладОтправитель                           КАК Склад,
	|	ТаблицаТовары.Номенклатура                  КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатурыОтправитель  КАК СерияНоменклатуры,
	|	ТаблицаТовары.ПартияОтправитель             КАК Партия,
	|	ТаблицаТовары.Количество                    КАК Количество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                        КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)           КАК ВидДвижения,
	|	&Период                                          КАК Период,
	|	ТаблицаТовары.ОрганизацияПолучатель              КАК Организация,
	|	&СкладПолучатель                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура                       КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатурыПолучатель        КАК СерияНоменклатуры,
	|	ТаблицаТовары.ПартияПолучатель                   КАК Партия,
	|	ТаблицаТовары.Количество                         КАК Количество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСвободныеОстатки()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	1                                           КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                   КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	&Период                                     КАК Период,
	|	ТаблицаТовары.Организация                   КАК Организация,
	|	&СкладОтправитель                           КАК Склад,
	|	ТаблицаТовары.Номенклатура                  КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатурыОтправитель  КАК СерияНоменклатуры,
	|	ТаблицаТовары.ПартияОтправитель             КАК Партия,
	|	ТаблицаТовары.Количество                    КАК ВНаличии,
	|	0                                           КАК ВРезервеСоСклада
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                        КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)           КАК ВидДвижения,
	|	&Период                                          КАК Период,
	|	ТаблицаТовары.ОрганизацияПолучатель              КАК Организация,
	|	&СкладПолучатель                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура                       КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатурыПолучатель        КАК СерияНоменклатуры,
	|	ТаблицаТовары.ПартияПолучатель                   КАК Партия,
	|	ТаблицаТовары.Количество                         КАК ВНаличии,
	|	0                                                КАК ВРезервеСоСклада
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтАналитика()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Номенклатура                                  КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатурыДляСебестоимостиОтправитель  КАК СерияНоменклатуры,
	|	ТаблицаТовары.ПартияДляСебестоимостиОтправитель             КАК Партия,
	|	ТаблицаТовары.СерияНоменклатурыДляСебестоимостиПолучатель   КАК СерияНоменклатурыПринято,
	|	ТаблицаТовары.ПартияДляСебестоимостиПолучатель              КАК ПартияПринято,
	|	АналитикаУчетаНоменклатуры.КлючАналитики                    КАК АналитикаУчетаНоменклатуры,
	|	АналитикаВидаУчета.КлючАналитики                            КАК АналитикаВидаУчета,
	|	АналитикаУчетаНоменклатурыПолучатель.КлючАналитики          КАК АналитикаУчетаНоменклатурыПолучатель,
	|	АналитикаВидаУчетаПолучатель.КлючАналитики                  КАК АналитикаВидаУчетаПолучатель
	|ПОМЕСТИТЬ ВтАналитика
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|		ПО 
	|			ТаблицаТовары.Номенклатура = АналитикаУчетаНоменклатуры.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимостиОтправитель = АналитикаУчетаНоменклатуры.СерияНоменклатуры
	|			И ТаблицаТовары.ПартияДляСебестоимостиОтправитель = АналитикаУчетаНоменклатуры.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|		ПО 
	|			АналитикаВидаУчета.Организация                 = ТаблицаТовары.Организация
	|			И АналитикаВидаУчета.Склад                     = &СкладОтправитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатурыПолучатель
	|		ПО
	|			ТаблицаТовары.Номенклатура = АналитикаУчетаНоменклатурыПолучатель.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимостиПолучатель = АналитикаУчетаНоменклатурыПолучатель.СерияНоменклатуры
	|			И ТаблицаТовары.ПартияДляСебестоимостиПолучатель = АналитикаУчетаНоменклатурыПолучатель.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчетаПолучатель
	|		ПО
	|			АналитикаВидаУчетаПолучатель.Организация                = ТаблицаТовары.ОрганизацияПолучатель
	|			И АналитикаВидаУчетаПолучатель.Склад                    = &СкладПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтАналитикаУчетныеЦены()
	
	ТекстЗапросаУчетныеЦены = 
	"ВЫБРАТЬ
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры			 						КАК АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.АналитикаВидаУчета					 						КАК АналитикаВидаУчета,
	|	ВЫБОР КОГДА СебестоимостьТоваров.КоличествоОстаток = 0
	|		ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(СебестоимостьТоваров.СтоимостьОстаток КАК ЧИСЛО(20, 9)) / ВЫРАЗИТЬ(СебестоимостьТоваров.КоличествоОстаток КАК ЧИСЛО(20, 9))
	|	КОНЕЦ 																			КАК УчетнаяЦена,
	|	ВЫБОР КОГДА СебестоимостьТоваров.КоличествоОстаток = 0                                         
	|		ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(СебестоимостьТоваров.СтоимостьБезНДСОстаток КАК ЧИСЛО(20, 9)) / ВЫРАЗИТЬ(СебестоимостьТоваров.КоличествоОстаток КАК ЧИСЛО(20, 9))
	|	КОНЕЦ 																			КАК УчетнаяЦенаБезНДС
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(
	|			&Граница,
	|			(АналитикаВидаУчета, АналитикаУчетаНоменклатуры) В
	|				(ВЫБРАТЬ
	|					Врем.АналитикаВидаУчета,
	|					Врем.АналитикаУчетаНоменклатуры
	|				ИЗ
	|					ВтАналитика КАК Врем)) КАК СебестоимостьТоваров";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура								КАК Номенклатура,
	|	Аналитика.СерияНоменклатуры							КАК СерияНоменклатуры,
	|	Аналитика.Партия									КАК Партия,
	|	Аналитика.СерияНоменклатурыПринято					КАК СерияНоменклатурыПринято,
	|	Аналитика.ПартияПринято 							КАК ПартияПринято,
	|	Аналитика.АналитикаУчетаНоменклатуры		 		КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.АналитикаВидаУчета		 				КАК АналитикаВидаУчета,
	|	Аналитика.АналитикаУчетаНоменклатурыПолучатель		КАК АналитикаУчетаНоменклатурыПолучатель,
	|	Аналитика.АналитикаВидаУчетаПолучатель		 		КАК АналитикаВидаУчетаПолучатель,
	|	ЕстьNULL(УчетныеЦеныНоменклатуры.УчетнаяЦена, 0)	КАК УчетнаяЦена,
	|	ЕстьNULL(УчетныеЦеныНоменклатуры.УчетнаяЦенаБезНДС, 0)	КАК УчетнаяЦенаБезНДС
	|ПОМЕСТИТЬ ВтАналитикаУчетныеЦены
	|ИЗ
	|	ВтАналитика КАК Аналитика
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			(" + ТекстЗапросаУчетныеЦены + ") КАК УчетныеЦеныНоменклатуры
	|		ПО 
	|			Аналитика.АналитикаУчетаНоменклатуры = УчетныеЦеныНоменклатуры.АналитикаУчетаНоменклатуры
	|			И Аналитика.АналитикаВидаУчета		 = УчетныеЦеныНоменклатуры.АналитикаВидаУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|   СерияНоменклатуры,
	|   Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСебестоимостьТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                                   КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                           КАК НомерСтроки,
	|	&Период                                             КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)              КАК ВидДвижения,
	|	Аналитика.АналитикаУчетаНоменклатуры                КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.АналитикаВидаУчета                        КАК АналитикаВидаУчета,
	|	ТаблицаТовары.Количество                            КАК Количество,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦена 	КАК Стоимость,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦенаБезНДС 	КАК СтоимостьБезНДС,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦена 	КАК СтоимостьРегл,
	|	&ХозяйственнаяОперация                              КАК ХозяйственнаяОперация,
	|	&Ссылка                                             КАК ДокументДвижения,
	|	Аналитика.АналитикаУчетаНоменклатурыПолучатель      КАК КорАналитикаУчетаНоменклатуры,
	|	Аналитика.АналитикаВидаУчетаПолучатель              КАК КорАналитикаВидаУчета,
	|	ТаблицаТовары.Количество                            КАК КорКоличество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтАналитикаУчетныеЦены КАК Аналитика
	|		ПО
	|			ТаблицаТовары.Номенклатура                                   = Аналитика.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимостиОтправитель = Аналитика.СерияНоменклатуры
	|			И ТаблицаТовары.ПартияДляСебестоимостиОтправитель            = Аналитика.Партия
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимостиПолучатель  = Аналитика.СерияНоменклатурыПринято
	|			И ТаблицаТовары.ПартияДляСебестоимостиПолучатель             = Аналитика.ПартияПринято
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                   КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                           КАК НомерСтроки,
	|	&Период                                             КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)              КАК ВидДвижения,
	|	Аналитика.АналитикаУчетаНоменклатурыПолучатель      КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.АналитикаВидаУчетаПолучатель              КАК АналитикаВидаУчета,
	|	ТаблицаТовары.Количество                            КАК Количество,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦена 	КАК Стоимость,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦенаБезНДС 	КАК СтоимостьБезНДС,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦена 	КАК СтоимостьРегл,
	|	&ХозяйственнаяОперация                              КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                        КАК ДокументДвижения,
	|	НЕОПРЕДЕЛЕНО                                        КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                        КАК КорАналитикаВидаУчета,
	|	0                                                   КАК КорКоличество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтАналитикаУчетныеЦены КАК Аналитика
	|		ПО
	|			ТаблицаТовары.Номенклатура                                   = Аналитика.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимостиОтправитель = Аналитика.СерияНоменклатуры
	|			И ТаблицаТовары.ПартияДляСебестоимостиОтправитель            = Аналитика.Партия
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимостиПолучатель  = Аналитика.СерияНоменклатурыПринято
	|			И ТаблицаТовары.ПартияДляСебестоимостиПолучатель             = Аналитика.ПартияПринято
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураНоменклатура()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                                   КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                           КАК НомерСтроки,
	|	&Период                                             КАК Период,
	|	&ХозяйственнаяОперация                              КАК ХозяйственнаяОперация,
	|	Аналитика.АналитикаВидаУчета                        КАК АналитикаВидаУчета,
	|	Аналитика.АналитикаУчетаНоменклатуры                КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.АналитикаВидаУчетаПолучатель              КАК КорАналитикаВидаУчета,
	|	Аналитика.АналитикаУчетаНоменклатурыПолучатель      КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.Количество                            КАК Количество,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаТоваров)
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ                                               КАК КорКоличество,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦена 	КАК Стоимость,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦенаБезНДС 	КАК СтоимостьБезНДС,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦена 	КАК СтоимостьРегл,
	|	&Ссылка                                             КАК ДокументДвижения
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтАналитикаУчетныеЦены КАК Аналитика
	|		ПО
	|			ТаблицаТовары.Номенклатура                                   = Аналитика.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимостиОтправитель = Аналитика.СерияНоменклатуры
	|			И ТаблицаТовары.ПартияДляСебестоимостиОтправитель            = Аналитика.Партия
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимостиПолучатель  = Аналитика.СерияНоменклатурыПринято
	|			И ТаблицаТовары.ПартияДляСебестоимостиПолучатель             = Аналитика.ПартияПринято
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                   КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                           КАК НомерСтроки,
	|	&Период                                             КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутреннееПоступлениеТоваров)  КАК ХозяйственнаяОперация,
	|	Аналитика.АналитикаВидаУчета                        КАК АналитикаВидаУчета,
	|	Аналитика.АналитикаУчетаНоменклатуры                КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.АналитикаВидаУчетаПолучатель              КАК КорАналитикаВидаУчета,
	|	Аналитика.АналитикаУчетаНоменклатурыПолучатель      КАК КорАналитикаУчетаНоменклатуры,
	|	0                                                   КАК Количество,
	|	ТаблицаТовары.Количество                            КАК КорКоличество,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦена 	КАК Стоимость,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦенаБезНДС 	КАК СтоимостьБезНДС,
	|	ТаблицаТовары.Количество * Аналитика.УчетнаяЦена 	КАК СтоимостьРегл,
	|	&Ссылка                                             КАК ДокументДвижения
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтАналитикаУчетныеЦены КАК Аналитика
	|		ПО
	|			ТаблицаТовары.Номенклатура                                   = Аналитика.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимостиОтправитель = Аналитика.СерияНоменклатуры
	|			И ТаблицаТовары.ПартияДляСебестоимостиОтправитель            = Аналитика.Партия
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимостиПолучатель  = Аналитика.СерияНоменклатурыПринято
	|			И ТаблицаТовары.ПартияДляСебестоимостиПолучатель             = Аналитика.ПартияПринято
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаТоваров)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПеремещено()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПеремещениеТоваровТовары.Партия.ДокументОприходования.ЗаказПоставщику КАК СпецификацияКДоговору,
	               |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель КАК Предприятие,
	               |	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	               |	ПеремещениеТоваровТовары.Количество КАК Количество,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипОперацииИсполненияЗаявкиПредприятия.Перемещение) КАК ТипОперации,
	               |	&Период КАК Период,
	               |	ПеремещениеТоваровТовары.СерияНоменклатуры КАК СерияНоменклатуры
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	               |	И ПеремещениеТоваровТовары.Партия.ДокументОприходования ССЫЛКА Документ.ПоступлениеТоваров
	               |	И ПеремещениеТоваровТовары.Партия.ДокументОприходования.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.СпецификацияКДоговору.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартийОтправитель В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия
	|ПОМЕСТИТЬ втТаблицаАналитики
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартийПолучатель В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Партия
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусУчетСебестоимостиПоСериям", Реквизиты.СтатусУчетСебестоимостиПоСериям);
	Запрос.УстановитьПараметр("СтатусУчетСебестоимостиПоПартиям", Реквизиты.СтатусУчетСебестоимостиПоПартиям);
	Запрос.Выполнить();
	
	Справочники.КлючиАналитикиУчетаНоменклатуры.ИнициализироватьКлючиАналитики(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиВидаУчета(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	&СкладОтправитель КАК Склад
	|ПОМЕСТИТЬ втТаблицаАналитики
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ОрганизацияПолучатель,
	|	&СкладПолучатель
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Склад
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", Реквизиты.ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("СкладОтправитель", Реквизиты.СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель", Реквизиты.СкладПолучатель);
	Запрос.Выполнить();
	
	Справочники.КлючиАналитикиВидаУчета.ИнициализироватьКлючиАналитики(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

#КонецОбласти // Проведение

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюПоддержкаПроектов.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	Обработки.ПечатьНакладнаяНаПеремещение.ДобавитьПечатнуюФорму(ПечатныеФормы);
	Обработки.ПечатьПриходныйОрдер0504207.ДобавитьПечатнуюФорму(ПечатныеФормы);
	Обработки.ПечатьМ4.ДобавитьПечатнуюФорму(ПечатныеФормы);
	Обработки.ПечатьНакладнаяНаВнутреннееПеремещение0504102.ДобавитьПечатнуюФорму(ПечатныеФормы);
	
	ПечатнаяФорма = Обработки.ПечатьТребованиеНакладная0504204.ДобавитьПечатнуюФорму(ПечатныеФормы);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = Обработки.ПечатьМ11.ДобавитьПечатнуюФорму(ПечатныеФормы);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	МенеджерПечати      = МетаданныеДокумента.ПолноеИмя();
	МетаданныеМакетов   = МетаданныеДокумента.Макеты;
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "ТОРГ13", МенеджерПечати);
	ПечатнаяФорма.Представление = НСтр("ru='Накладная на внутреннее перемещение (ТОРГ-13)'");
	ПечатнаяФорма.ПутьКМакету = "Документ.ПеремещениеТоваров.ПФ_MXL_ТОРГ13";
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "АктПеремещения", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_АктПеремещения.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_АктПеремещения);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "ОписьКАктуПеремещения", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_ОписьКАктуПеремещения.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_ОписьКАктуПеремещения);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	//ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Обработки.ПечатьЭтикетокИЦенников.ДоступныеПечатныеФормы(), ПечатныеФормы);
	
	Возврат ПечатныеФормы;
	
КонецФункции 

#Область ПечатьАктПеремещения

Функция ПечатьАктПеремещения(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_АктПеремещения);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив();
	
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
				
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
			
			// Получение параметров для заполнения
			ПараметрыИзШапки = ПолучитьПараметрыШапкиАктПеремещения(Шапка);
			
			
			Если Шапка.СкладПроизводства Тогда
				ИмяОбластиШапкаПодписи = "ШапкаПодписиСкладПроизводства";
			Иначе
				ИмяОбластиШапкаПодписи = "ШапкаПодписиНеСкладПроизводства";
			КонецЕсли;	
						
			// Вывод области Шапка
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, ИмяОбластиШапкаПодписи, ПараметрыИзШапки);
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Шапка", ПараметрыИзШапки);
			
			ВыгрузкаСтрокТовары = Шапка.Ссылка.Товары.Выгрузить();
			
			ТоварыПоНоменклатуре = ВыгрузкаСтрокТовары.Скопировать();
			ТоварыПоНоменклатуре.Свернуть("Номенклатура, СерияНоменклатуры", "Количество");
				
			НомерСтроки = 0;
			Количество = 0;
			Для Каждого ВыборкаСтрокТовары Из ТоварыПоНоменклатуре Цикл
				//Для Каждого ВыборкаСтрокТовары Из ВыгрузкаСтрокТовары Цикл
					
					ВыборкаСтрокТовары.Номенклатура = НомерСтроки + 1;
					Количество = Количество + ВыборкаСтрокТовары.Количество;
					ДанныеСтроки = Новый Структура;
					ДанныеСтроки.Вставить("НомерПП", НомерСтроки);
					ДанныеСтроки.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);
					//@skip-check wrong-string-literal-content
					ДанныеСтроки.Вставить("Производитель", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаСтрокТовары.Номенклатура, "Производитель"));
					ДанныеСтроки.Вставить("Серия", ВыборкаСтрокТовары.СерияНоменклатуры);
					ДанныеСтроки.Вставить("Количество", ВыборкаСтрокТовары.Количество);
					
					ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
					ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
						
					Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					// Вывод области Строка
					ТабличныйДокумент.Вывести(ОбластьСтрока);
					
				//КонецЦикла;
			КонецЦикла;
			
			ПараметрыИзШапки.Вставить("КоличествоУпаковок", ТоварыПоНоменклатуре.Количество());
			ПараметрыИзШапки.Вставить("Количество", Количество);
			
			// Вывод области Подписи
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подвал", ПараметрыИзШапки);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
		
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиАктПеремещения(Шапка)
		
	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Шапка.Организация, Шапка.ДатаДокумента);
	МОЛСдал = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Шапка.СкладОтправитель, Шапка.ДатаДокумента);
	МОЛПринял= РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Шапка.СкладПолучатель, Шапка.ДатаДокумента);

	
	Параметры = Новый Структура();
	
	Параметры.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента));
	Параметры.Вставить("ДатаДокумента", Формат(Шапка.ДатаДокумента, "ДФ='«dd» MMMM yyyy ""г.""';"));
	Параметры.Вставить("НомерЗадания", Шапка.НомерЗадания);
	Параметры.Вставить("Гриф", Шапка.ГрифПолноеНаименование);
	Параметры.Вставить("РуководительФИО"         , ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ОтветственныеЛица.РуководительНаименование));
	Параметры.Вставить("РуководительДолжность"   , ОтветственныеЛица.РуководительДолжность);
	Параметры.Вставить("ФИОСдал", МОЛСдал.ФИО);
	Параметры.Вставить("ФИОПринял", МОЛПринял.ФИО);
	Параметры.Вставить("ДолжностьСдал", МОЛСдал.Должность);
	Параметры.Вставить("ДолжностьПринял", МОЛПринял.Должность);
	Параметры.Вставить("СкладПолучатель", Шапка.СкладПолучатель);
	Параметры.Вставить("СкладОтправитель", Шапка.СкладОтправитель);
	Параметры.Вставить("ПредставлениеОрганизации", Шапка.ОрганизацияНаименованиеПолное);
	Параметры.Вставить("РуководительДолжностьПолучатель", Шапка.ПолучательДолжностьРуководителя);
	Параметры.Вставить("ПолучательРуководительФИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Шапка.ПолучательФИООтветственного));
	Параметры.Вставить("ПредприятиеПолучатель", Шапка.ПолучательНаименованиеПолное);
		
	Возврат Параметры;
	
КонецФункции

#КонецОбласти // ПечатьАктПеремещения

#Область ПечатьОписьКАктуПриемки

Функция ПечатьОписьКАктуПеремещения(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_ОписьКАктуПеремещения);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив();
	
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов);
	
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Для Экз = 1 По 4 Цикл
			
			Если Не Экз = 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
			
			// Получение параметров для заполнения
			ПараметрыИзШапки = ПолучитьПараметрыШапкиАктПеремещения(Шапка);
			ПараметрыИзШапки.Вставить("Экземпляр", Экз);
			
			// Вывод области Шапка
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Шапка", ПараметрыИзШапки);
			
			ВыгрузкаСтрокТовары = Шапка.Ссылка.Товары.Выгрузить();
									
			ТоварыПоНоменклатуре = ВыгрузкаСтрокТовары.Скопировать();
			ТоварыПоНоменклатуре.Свернуть("Номенклатура, СерияНоменклатуры", "Количество");
			
			НомерСтроки = 0;
			Количество = 0;
			
			Для Каждого ВыборкаСтрокТовары Из ТоварыПоНоменклатуре Цикл
				//Для Каждого ВыборкаСтрокТовары Из ВыгрузкаСтрокТовары Цикл

				НомерСтроки = НомерСтроки + 1;
				Количество = Количество + ВыборкаСтрокТовары.Количество;
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("НомерПП", Строка(НомерСтроки) + ".1");
				ДанныеСтроки.Вставить("НомерУпаковки", НомерСтроки);
				ДанныеСтроки.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);
					//@skip-check wrong-string-literal-content
				ДанныеСтроки.Вставить("Производитель", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ВыборкаСтрокТовары.Номенклатура, "Производитель"));
				ДанныеСтроки.Вставить("Серия", ВыборкаСтрокТовары.СерияНоменклатуры);
				ДанныеСтроки.Вставить("Количество", ВыборкаСтрокТовары.Количество);
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
				ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);

				ОбластьСтрокаУпаковка = Макет.ПолучитьОбласть("СтрокаУпаковка");
				ОбластьСтрокаУпаковка.Параметры.Заполнить(ДанныеСтроки);

				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
					
					// Вывод области Строка
				ТабличныйДокумент.Вывести(ОбластьСтрокаУпаковка);
				ТабличныйДокумент.Вывести(ОбластьСтрока);
					
				//КонецЦикла;
			КонецЦикла;
			
			ПараметрыИзШапки.Вставить("КоличествоУпаковок", ТоварыПоНоменклатуре.Количество());
			ПараметрыИзШапки.Вставить("Количество", Количество);
			
			// Вывод области Подписи
			ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подвал", ПараметрыИзШапки);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти
Функция ПечатьТОРГ13(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТОРГ13";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_ТОРГ13");
	
	ВалютаПечати = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПолучатьЦены");
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	ПервыйДокумент = Истина;
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Шапка.Следующий() Цикл
				
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабДокумент, Макет, ОбластьШапка);
		
		ОбластьШапка.Параметры.Заполнить(Шапка);
		ОбластьШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьШапка.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
		ОбластьШапка.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
		ОбластьШапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ТабДокумент.Вывести(ОбластьШапка);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		НомерСтраницы   = 1;
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		// инициализация итогов по странице
		ИтогКоличествоМестПоСтранице = 0;
		ИтогМассаБруттоПоСтранице    = 0;
		ИтогМассыНеттоПоСтранице     = 0;
		ИтогСуммыПоСтранице          = 0;
		
		// инициализация итогов по документу
		ИтогоКоличество  = 0;
		ИтогоМассаБрутто = 0;
		ИтогоМассаНетто  = 0;
		ИтогоСумма       = 0;
		
		НомерСтроки = 0;
		
		// Выводим многострочную часть документа
		ОбластьСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		ВыборкаПоДокументам.Сбросить();
		ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка);
		Если ВыборкаПоДокументам.НайтиСледующий(ПараметрыПоиска) Тогда
			ВыборкаСтрокТовары = ВыборкаПоДокументам.Выбрать();
			
			КоличествоСтрок = ВыборкаСтрокТовары.Количество();
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьСтрока.Параметры.КоличествоМест    = ВыборкаСтрокТовары.Количество;
				ОбластьСтрока.Параметры.ТоварНаименование = ОбщегоНазначенияПоддержкаПроектов.ПолучитьПредставлениеНоменклатурыДляПечати(
					ВыборкаСтрокТовары.ТоварНаименование,
					ВыборкаСтрокТовары.СерияНоменклатуры,
					,
					ВыборкаСтрокТовары.Описание);
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
				Если НомерСтроки = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
				Иначе
					МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				КонецЕсли;
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивВыводимыхОбластей) Тогда
					
					ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
					
					ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					// инициализация итогов по странице
					ИтогКоличествоМестПоСтранице = 0;
					ИтогМассаБруттоПоСтранице    = 0;
					ИтогСуммыПоСтранице          = 0;
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					НомерСтраницы = НомерСтраницы + 1;
					ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабДокумент.Вывести(ЗаголовокТаблицы);
					
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьСтрока);
				
				// Обновим итоги по странице
				ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.Количество;
				ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + ВыборкаСтрокТовары.Сумма;
				
				// Обновим итогов по документу
				ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТовары.Количество;
				ИтогоСумма       = ИтогоСумма       + ВыборкаСтрокТовары.Сумма;
				
			КонецЦикла;
		КонецЕсли;
		
		ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
		
		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьВсего.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
		ОбластьВсего.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
		ОбластьВсего.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
		ОбластьВсего.Параметры.ИтогоСумма          = ИтогоСумма;
		
		ТабДокумент.Вывести(ОбластьВсего);
		
		// Выводим подвал документа
		ОбластьПодвал.Параметры.Заполнить(Шапка);
		ОбластьПодвал.Параметры.ИтогоСуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСумма, ВалютаПечати);
		ТабДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати = Неопределено) Экспорт
	
	ПолучатьЦены = Ложь;
	ПолучатьЦеныПоНастройкамСклада = Ложь;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		ПолучатьЦеныПоНастройкамСклада = ПараметрыПечати.Свойство("ПолучатьЦеныПоНастройкамСклада");
		ПолучатьЦены = ПолучатьЦеныПоНастройкамСклада Или ПараметрыПечати.Свойство("ПолучатьЦены");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеДляПечати(ПолучатьЦены, ПолучатьЦеныПоНастройкамСклада);
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);;
	Запрос.УстановитьПараметр("ПолучатьЦеныПоНастройкамСклада", ПолучатьЦеныПоНастройкамСклада);
	ЗапасыСервер.УстановитьСтатусыПараметровУчетаВПараметрахЗапроса(Запрос);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("РезультатПоШапке"          , РезультатыЗапросов[РезультатыЗапросов.ВГраница() - 1]);
	ДанныеДляПечати.Вставить("РезультатПоТабличнойЧасти" , РезультатыЗапросов[РезультатыЗапросов.ВГраница()]);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечати(ПолучатьЦены = Ложь, ПолучатьЦеныПоНастройкамСклада = Ложь)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК НомерДокумента,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Организация КАК Организация,
	|	Документ.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	Документ.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	Документ.СкладОтправитель КАК СкладОтправитель,
	|	Документ.СкладОтправитель КАК Отправитель,
	|	Документ.СкладОтправитель.Представление КАК ОтправительПредставление,
	|	Документ.СкладПолучатель КАК СкладПолучатель,
	|	Документ.СкладПолучатель КАК Получатель,
	|	Документ.СкладПолучатель.Представление КАК ПолучательПредставление,
	|	"""" КАК НомерВходящегоДокумента,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Исполнитель,
	|	"""" КАК ИсполнительДолжность,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Затребовал,
	|	"""" КАК ЗатребовалДолжность,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Разрешил,
	|	"""" КАК РазрешилДолжность,
	|	Документ.ПроектЗадания.НомерПроекта КАК НомерЗадания,
	|	Документ.СкладПолучатель.СкладПроизводства КАК СкладПроизводства,
	|	Документ.Гриф.ПолноеНаименование КАК ГрифПолноеНаименование,
	|	Документ.СкладПолучатель.ДО.ДолжностьРуководителя КАК ПолучательДолжностьРуководителя,
	|	Документ.СкладПолучатель.ДО.ФИООтветственного КАК ПолучательФИООтветственного,
	|	Документ.СкладПолучатель.ДО.НаименованиеПолное КАК ПолучательНаименованиеПолное
	|ПОМЕСТИТЬ втШапка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В (&ТекущийДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Документ,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	КОНЕЦПЕРИОДА(Шапка.ДатаДокумента, ДЕНЬ) КАК ДатаПолученияЦены,
	|	Шапка.Организация КАК Организация,
	|	Шапка.СкладОтправитель КАК Склад,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	Товары.Номенклатура.Описание КАК Описание,
	|	Товары.Номенклатура.Код КАК ТоварКод,
	|	Товары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА Товары.СтатусУказанияСерийОтправитель В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА Товары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатурыДляСебестоимости,
	|	Товары.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА Товары.СтатусУказанияПартийОтправитель В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА Товары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ПартияДляСебестоимости,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмерения.КодОКЕИ КАК КодПоОКЕИ,
	|	Товары.Количество КАК Количество,
	|	Товары.Количество КАК Затребовано,
	|	Товары.Количество КАК Отпущено,
	|	Товары.Количество КАК КоличествоБазовых,
	|	ЛОЖЬ КАК Отменено,
	|	Товары.СерияНоменклатуры КАК Серия
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втШапка КАК Шапка
	|		ПО Товары.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	Товары.Ссылка В (&ТекущийДокумент)";
	
	ПараметрыПолученияЦен = ФормированиеПечатныхФормПоддержкаПроектов.ПараметрыПолученияЦен();
	
	Если ПолучатьЦены Тогда
		
		ПараметрыПолученияЦен.ИспользоватьЦеныПоВидуЦен = Истина;
		Если ПолучатьЦеныПоНастройкамСклада Тогда
			ПараметрыПолученияЦен.ИспользоватьЦеныПоСебестоимости = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = ФормированиеПечатныхФормПоддержкаПроектов.ТекстЗапросаСЦенами(ТекстЗапроса, ПараметрыПолученияЦен);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//	 НастройкиФормы - Неопределено
Процедура ДобавитьКомандыСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииПоддержкаПроектов.ДобавитьКомандыСоздатьНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//	 НастройкиФормы - Неопределено
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыПоддержкаПроектов.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

#КонецОбласти // СлужебныеПроцедурыИФункции


////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
//#Область ОбновлениеИнформационнойБазы
//
//// Обработчик обновления релиза 2.0.1.17
//// Регистрирует документы перемещения товаров для заполнения хозяйственной операции.
////
////@skip-check module-structure-method-in-regions
//Процедура ЗаполнитьХозяйственнуюОперациюОтложенноДанныеДляОбновления(Параметры) Экспорт
//	
//	Запрос = Новый Запрос("
//	|ВЫБРАТЬ
//	|	Документ.Ссылка КАК Ссылка
//	|ИЗ
//	|	Документ.ПеремещениеТоваров КАК Документ
//	|ГДЕ
//	|	Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
//	|");
//	
//	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
//	
//КонецПроцедуры
//
//// Обработчик обновления релиза 2.0.1.17
//// Заполняет хозяйственную операцию в документах перемещения товаров.
////
//Процедура ЗаполнитьХозяйственнуюОперациюОтложенно(Параметры) Экспорт
//	
//	МетаданныеОбъекта = ПустаяСсылка().Метаданные();
//	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
//	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	
//	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
//	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
//		Параметры.ОбработкаЗавершена = Истина;
//		Возврат;
//	КонецЕсли;
//	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
//		Параметры.ОбработкаЗавершена = Ложь;
//		Возврат;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
//	Запрос.Текст = "
//	|ВЫБРАТЬ
//	|	Документ.Ссылка                 КАК Ссылка,
//	|	Документ.ХозяйственнаяОперация  КАК ХозяйственнаяОперация
//	|ИЗ
//	|	Документ.ПеремещениеТоваров КАК Документ
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
//	|			#ДокументыКОбработке КАК ДокументыКОбработке
//	|		ПО
//	|			Документ.Ссылка = ДокументыКОбработке.Ссылка
//	|";
//	
//	Запрос.Текст = СтрЗаменить(ЗАпрос.Текст, "#ДокументыКОбработке", Результат.ИмяВременнойТаблицы);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		Если ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация) Тогда
//			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
//			Продолжить;
//		КонецЕсли;
//		
//		НачатьТранзакцию();
//		
//		Попытка
//			
//			Блокировка = Новый БлокировкаДанных;
//			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
//			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
//			Блокировка.Заблокировать();
//			
//			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
//			
//			Если ДокументОбъект = Неопределено Тогда
//				
//				ОтменитьТранзакцию();
//				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
//				Продолжить;
//				
//			КонецЕсли;
//			
//			ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
//			
//			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
//			
//			ЗафиксироватьТранзакцию();
//			
//		Исключение
//			
//			ОтменитьТранзакцию();
//			
//			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//			
//			ЗаписьЖурналаРегистрации(
//				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
//				УровеньЖурналаРегистрации.Предупреждение,
//				МетаданныеОбъекта,
//				Выборка.Ссылка,
//				ТекстСообщения);
//			
//			ВызватьИсключение;
//			
//		КонецПопытки;
//		
//	КонецЦикла;
//	
//	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
//	
//КонецПроцедуры
//
//#КонецОбласти // ОбновлениеИнформационнойБазы

#КонецЕсли