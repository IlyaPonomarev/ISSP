#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Функция формирует результат запроса по неотгруженной части заказа
//
// Параметры:
//  Спецификация - ДокументСсылка - ссылка на спецификацию к гос. контракту по которой необходимы остатки.
//  Документ - ДокументСсылка - ссылка на заказ поставщику (или пустая ссылка)
// 
// Возвращаемое значение:
//  РезультатЗапроса - результат запроса по неотгруженной части заказа\заявки.
//
Функция ПолучитьРезультатЗапросаПоОстаткам(Спецификация, Документ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.Номенклатура           КАК Номенклатура,
	|	ТаблицаЗаказы.КодСтроки              КАК КодСтроки,
	|	СУММА(ТаблицаЗаказы.ПоСпецификации)  КАК Количество
	|ПОМЕСТИТЬ ТаблицаОстатки
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.Номенклатура            КАК Номенклатура,
	|		ЗаказыОстатки.КодСтрокиСпецификации   КАК КодСтроки,
	|		ЗаказыОстатки.ПоСпецификацииОстаток   КАК ПоСпецификации
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(,
	|				Спецификация = &Спецификация
	|			) КАК ЗаказыОстатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыДвижения.Номенклатура,
	|		ЗаказыДвижения.КодСтрокиСпецификации,
	|		ВЫБОР КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				-ЗаказыДвижения.ПоСпецификации
	|			ИНАЧЕ
	|				ЗаказыДвижения.ПоСпецификации
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыДвижения
	|	ГДЕ
	|		ЗаказыДвижения.Регистратор = &Регистратор
	|		И ЗаказыДвижения.Спецификация = &Спецификация
	|		И ЗаказыДвижения.Активность
	|	) КАК ТаблицаЗаказы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЗаказы.Номенклатура,
	|		ТаблицаЗаказы.КодСтроки
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ТаблицаЗаказы.ПоСпецификации) > 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказТовары.НоменклатураПоставщика        КАК НоменклатураПоставщика,
	|	ТаблицаОстатки.Номенклатура               КАК Номенклатура,
	|	ТаблицаОстатки.КодСтроки                  КАК КодСтроки,
	|	ТаблицаОстатки.Количество                 КАК Количество,
	|	ЗаказТовары.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	ЗаказТовары.Цена                          КАК Цена,
	|	ЗаказТовары.Количество                    КАК КоличествоПоДокументу,
	|	ЗаказТовары.СтавкаНДС                     КАК СтавкаНДС,
	|	ЗаказТовары.Сумма                         КАК Сумма,
	|	ЗаказТовары.СуммаНДС                      КАК СуммаНДС,
	|	ЗаказТовары.СуммаСНДС                     КАК СуммаСНДС,
	|	ДанныеЗаказа.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	ДанныеЗаказа.Валюта                       КАК Валюта,
	|	ДанныеЗаказа.Дата                         КАК ДатаДокумента
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СпецификацияКДоговору КАК ДанныеЗаказа
	|		ПО
	|			ДанныеЗаказа.Ссылка = &Спецификация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СпецификацияКДоговору.Товары КАК ЗаказТовары
	|		ПО
	|			ТаблицаОстатки.Номенклатура = ЗаказТовары.Номенклатура
	|			И ТаблицаОстатки.КодСтроки = ЗаказТовары.КодСтроки
	|			И ЗаказТовары.Ссылка = &Спецификация
	|
	|УПОРЯДОЧИТЬ ПО ЗаказТовары.НомерСтроки
	|";
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	//Оставлен для совместимости		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение
#Область Проведение

// Инициализирует таблицы значений, содержащие данные для проведения документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
// 
// Параметры:
//  ДополнительныеСвойства - Структура - Дополнительные свойства
//  Регистры - Неопределено - Регистры
Процедура СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства);
	
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаТовары());
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаЗаказыПоставщикам(), Метаданные.РегистрыНакопления.ЗаказыПоставщикам);
	ПроведениеПоддержкаПроектов.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаТаблицаЗаявлено(), Метаданные.РегистрыНакопления.ИсполнениеЗаявокПредприятий);
	
	
	Запрос = Новый Запрос(ПроведениеПоддержкаПроектов.ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры));
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ПроведениеПоддержкаПроектов.ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, Запрос.ВыполнитьПакет(), Регистры);
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Период", "Дата");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("Статус");
	//ЗапрашиваемыеДанные.Вставить("Контрагент");
	//ЗапрашиваемыеДанные.Вставить("ДоговорКонтрагента");
	ЗапрашиваемыеДанные.Вставить("ПроектЗадания");	
	ЗапрашиваемыеДанные.Вставить("Валюта", "Валюта");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроведениеПоддержкаПроектов.ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства),
		ЗапрашиваемыеДанные);
	
	//ОсновныеДанныеДокумента.Вставить("ВестиУчетПоИсточникамФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования"));
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТовары()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                               КАК Порядок,
	|	ТаблицаТовары.НомерСтроки       КАК НомерСтроки,
	|	&Организация                    КАК Организация,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество        КАК Количество
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.СпецификацияКДоговору.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаявлено()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СпецификацияКДоговоруНоменклатураПоЗаявкамПредприятий.Ссылка КАК СпецификацияКДоговору,
	               |	СпецификацияКДоговоруНоменклатураПоЗаявкамПредприятий.ЗаявкаПредприятия.Предприятие КАК Предприятие,
	               |	СпецификацияКДоговоруНоменклатураПоЗаявкамПредприятий.Номенклатура КАК Номенклатура,
	               |	СпецификацияКДоговоруНоменклатураПоЗаявкамПредприятий.Количество КАК Количество,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипОперацииИсполненияЗаявкиПредприятия.Заявление) КАК ТипОперации,
				   |	&Период КАК Период
	               |ИЗ
	               |	Документ.СпецификацияКДоговору.НоменклатураПоЗаявкамПредприятий КАК СпецификацияКДоговоруНоменклатураПоЗаявкамПредприятий
	               |ГДЕ
	               |	СпецификацияКДоговоруНоменклатураПоЗаявкамПредприятий.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаказыПоставщикам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	0                                       КАК КодСтроки,
	|	ТаблицаТовары.КодСтроки                 КАК КодСтрокиСпецификации,
	|	&Ссылка                                 КАК Спецификация,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.ЕдиницаИзмерения          КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество                КАК ПоСпецификации,
	|	0                                       КАК Заказано,
	|	0                                       КАК КОформлению
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификацийКДоговорам.КВыполнению)
	|	ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификацийКДоговорам.Закрыт)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Проведение

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
//@skip-check doc-comment-export-function-return-section
Функция ДоступныеПечатныеФормы() Экспорт
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	МенеджерПечати      = МетаданныеДокумента.ПолноеИмя();
	МетаданныеМакетов   = МетаданныеДокумента.Макеты;
	
	ПечатныеФормы = УправлениеПечатьюПоддержкаПроектов.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	ПечатнаяФорма = УправлениеПечатьюПоддержкаПроектов.ДобавитьПечатнуюФорму(ПечатныеФормы, "СпецификацияКДоговору", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_СпецификацияКДоговору.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_СпецификацияКДоговору);
	УправлениеПечатьюПоддержкаПроектов.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ПолучитьТекстЗапросаДанныеДляПечати()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документ.Ссылка              КАК Ссылка,
	|	Документ.Номер               КАК НомерДокумента,
	|	Документ.Дата                КАК ДатаДокумента,
	|	Документ.Организация         КАК Организация,
	|	Документ.Организация         КАК Получатель,
	|	Документ.Контрагент          КАК Контрагент,
	|	Документ.Контрагент          КАК Отправитель,
	|	Документ.ДоговорКонтрагента  КАК Договор,
	|	НЕОПРЕДЕЛЕНО                 КАК БанковскийСчет,
	|	НЕОПРЕДЕЛЕНО                 КАК БанковскийСчетТекстКорреспондента,
	|	Документ.ЦенаВключаетНДС     КАК ЦенаВключаетНДС,
	|	Документ.Валюта              КАК Валюта,
	|	Документ.Товары.(
	|		НомерСтроки                      КАК НомерСтроки,
	|		Номенклатура                     КАК Номенклатура,
	|		Номенклатура.НаименованиеПолное  КАК ТоварНаименование,
	|		Номенклатура.Код                 КАК ТоварКод,
	|		ЕдиницаИзмерения                 КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмерения.КодОКЕИ         КАК КодПоОКЕИ,
	|		Количество     КАК Количество,
	|		Цена                             КАК Цена,
	|		Сумма                            КАК Сумма,
	|		СтавкаНДС                        КАК СтавкаНДС,
	|		СуммаНДС                         КАК СуммаНДС
	|	)
	|ИЗ
	|	Документ.СпецификацияКДоговору КАК Документ
	|
	|ГДЕ
	|	Документ.Ссылка В (&ТекущийДокумент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПечатьСпецификацияКДоговору(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормПоддержкаПроектов.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_СпецификацияКДоговору);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив;
	
	ИмяОбластьШапка  = "ШапкаТаблицы";
	ИмяОбластьСтрока = "Строка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиСпецификацияКДоговору(Шапка);
		
		// Вывод области Заголовок
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Заголовок", ПараметрыИзШапки);
		
		// Вывод области РеквизитыШапки
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "РеквизитыШапки", ПараметрыИзШапки);
		
		// Вывод области ШапкаТаблицы
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, ИмяОбластьШапка, ПараметрыИзШапки);
		
		// Инициализация итогов по документу
		ПараметрыИтого = Новый Структура;
		ПараметрыИтого.Вставить("Сумма"   , 0);
		ПараметрыИтого.Вставить("СуммаНДС", 0);
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластьСтрока);
		
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		НомерСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Итого"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("СуммаПрописью"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Подписи"));
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть(ИмяОбластьШапка));
			КонецЕсли;
			
			// Вывод области Строка
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			ФормированиеПечатныхФормПоддержкаПроектов.РассчитатьИтоги(ВыборкаСтрокТовары, ПараметрыИтого);
			
		КонецЦикла;
		
		// Вывод области Итого
		ПараметрыИтого.Вставить("НДС", ?(Шапка.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":");
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Итого", ПараметрыИтого);
		
		// Вывод области СуммаПрописью
		СуммаКПрописи = ПараметрыИтого.Сумма + ?(Шапка.ЦенаВключаетНДС, 0, ПараметрыИтого.СуммаНДС);
		ФорматированнаяСумма = ОбщегоНазначенияПоддержкаПроектов.ФорматСумм(СуммаКПрописи, Шапка.Валюта);
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего наименований %1, на сумму %2'"), КоличествоСтрок, ФорматированнаяСумма);
		
		ПараметрыСуммаПрописью = Новый Структура;
		ПараметрыСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ПараметрыСуммаПрописью.Вставить("СуммаПрописью" , РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.Валюта));
		
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "СуммаПрописью", ПараметрыСуммаПрописью);
		
		// Вывод области Подписи
		ФормированиеПечатныхФормПоддержкаПроектов.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подписи", ПараметрыИзШапки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиСпецификацияКДоговору(Шапка)
	
	КлючиПараметров = ФормированиеПечатныхФормПоддержкаПроектов.ПолучитьИменаКолонокТаблицы(Шапка);
	
	Параметры = Новый Структура(КлючиПараметров);
	ЗаполнитьЗначенияСвойств(Параметры, Шапка);
	
	// Данные заголовка
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
	ШаблонТекстЗаголовка = НСтр("ru = 'Спецификация к договору № %1 от %2'");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстЗаголовка, НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
	
	СведенияОПолучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.ДатаДокумента);
	ПолучательПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	
	СведенияОбОтправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Отправитель, Шапка.ДатаДокумента);
	ОтправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	
	Параметры.Вставить("ТекстЗаголовка"          , ТекстЗаголовка);
	Параметры.Вставить("ПолучательПредставление" , ПолучательПредставление);
	Параметры.Вставить("ОтправительПредставление", ОтправительПредставление);
	
	// Данные шапки таблицы
	Параметры.Вставить("ИмяКолонкиКодов", НСтр("ru = 'Код'"));
	Параметры.Вставить("ИмяКолонкиТовар", НСтр("ru = 'Товары (работы, услуги)'"));
	
	// Данные подписей
	Параметры.Вставить("РуководительФИО", "");
	Параметры.Вставить("БухгалтерФИО"   , "");
	
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Формирование отчетов
#Область ФормированиеОтчетов

// Возвращает данные для заполнения отчета Состояние выполнения документов.
//
// Параметры:
//  ВходящиеДокументы - ЭлементСпискаЗначений - ссылки документов Спецификация к гос. контракту, для которых получается состояние выполнения.
//
// Возвращаемое значение:
//  Структура - структурированные данные для заполнения отчета.
//
Функция ПолучитьДанныеОтчетаСостоянияВыполненияДокументов(ВходящиеДокументы) Экспорт
	
	ТекстЗапроса = ТекстЗапросаСостоянияВыполненияДокументов();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Спецификации", ВходящиеДокументы);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ПоследнийРезультат = РезультатыЗапросов.ВГраница();
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ПоСпецификации"      , РезультатыЗапросов[ПоследнийРезультат - 4].Выгрузить());
	ДанныеОтчета.Вставить("КЗаказу"             , РезультатыЗапросов[ПоследнийРезультат - 3].Выгрузить());
	ДанныеОтчета.Вставить("Заказано"            , РезультатыЗапросов[ПоследнийРезультат - 2].Выгрузить());
	ДанныеОтчета.Вставить("ВПроцессеПоступления", РезультатыЗапросов[ПоследнийРезультат - 1].Выгрузить());
	ДанныеОтчета.Вставить("Поступило"           , РезультатыЗапросов[ПоследнийРезультат    ].Выгрузить());
	
	//@skip-check constructor-function-return-section
	Возврат ДанныеОтчета;
	
КонецФункции

Функция ТекстЗапросаСостоянияВыполненияДокументов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документы.Ссылка КАК Документ,
	|	Документы.Статус КАК СтатусДокумента
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	Документ.СпецификацияКДоговору КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&Спецификации)
	|	И Документы.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиПоЗаказам.Спецификация                   КАК Спецификация,
	|	ОстаткиПоЗаказам.Номенклатура                   КАК Номенклатура,
	|	ОстаткиПоЗаказам.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	ОстаткиПоЗаказам.ПоСпецификацииПриход           КАК КЗаказу,
	|	ОстаткиПоЗаказам.ПоСпецификацииКонечныйОстаток  КАК ОсталосьЗаказать,
	|	ОстаткиПоЗаказам.ЗаказаноПриход                 КАК Заказано,
	|	ОстаткиПоЗаказам.ЗаказаноРасход                 КАК КОформлению,
	|	ОстаткиПоЗаказам.КОформлениюПриход              КАК КПоступлению,
	|	ОстаткиПоЗаказам.КОформлениюРасход              КАК Принято,
	|	ОстаткиПоЗаказам.КОформлениюКонечныйОстаток     КАК ОсталосьПринять
	|ПОМЕСТИТЬ ОстаткиПоЗаказам
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(, , , , Спецификация В (ВЫБРАТЬ Документ ИЗ Документы)) КАК ОстаткиПоЗаказам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Закупки.Спецификация                          КАК Спецификация,
	|	КлючиАналитикиУчетаНоменклатуры.Номенклатура  КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Закупки.НоменклатураЗаказа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА КлючиАналитикиУчетаНоменклатуры.Номенклатура
	|		ИНАЧЕ Закупки.НоменклатураЗаказа
	|	КОНЕЦ                                         КАК НоменклатураЗаказа,
	|	КлючиАналитикиУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА Закупки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|				ТОГДА - Закупки.Количество
	|			ИНАЧЕ Закупки.Количество
	|		КОНЕЦ)                                    КАК Принято,
	|	СУММА(ВЫБОР
	|			КОГДА Закупки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|				ТОГДА - Закупки.Сумма
	|			ИНАЧЕ Закупки.Сумма
	|		КОНЕЦ)                                    КАК СуммаПринято
	|ПОМЕСТИТЬ Закупки
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	|		ПО
	|			Закупки.АналитикаУчетаНоменклатуры = КлючиАналитикиУчетаНоменклатуры.КлючАналитики
	|ГДЕ
	|	Закупки.Активность
	|	И Закупки.Спецификация В (ВЫБРАТЬ Документ ИЗ Документы)
	|
	|СГРУППИРОВАТЬ ПО
	|	Закупки.Спецификация,
	|	КлючиАналитикиУчетаНоменклатуры.Номенклатура,
	|	ВЫБОР
	|		КОГДА Закупки.НоменклатураЗаказа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА КлючиАналитикиУчетаНоменклатуры.Номенклатура
	|		ИНАЧЕ Закупки.НоменклатураЗаказа
	|	КОНЕЦ,
	|	КлючиАналитикиУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураЗаказа,
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// По спецификации
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Спецификации.Ссылка                               КАК Документ,
	|	Спецификации.Номенклатура                         КАК Номенклатура,
	|	Спецификации.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	СУММА(Спецификации.Количество)  КАК ПоСпецификации,
	|	СУММА(Спецификации.СуммаСНДС)                     КАК СуммаПоСпецификации
	|ИЗ
	|	Документ.СпецификацияКДоговору.Товары КАК Спецификации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документы КАК Документы
	|		ПО
	|			Спецификации.Ссылка = Документы.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	Спецификации.Ссылка,
	|	Спецификации.Номенклатура,
	|	Спецификации.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// К заказу
	|ВЫБРАТЬ
	|	ОстаткиПоЗаказам.Спецификация                             КАК Документ,
	|	ОстаткиПоЗаказам.Номенклатура                             КАК Номенклатура,
	|	ОстаткиПоЗаказам.ЕдиницаИзмерения                         КАК ЕдиницаИзмерения,
	|	ОстаткиПоЗаказам.КЗаказу            КАК КЗаказу,
	|	ОстаткиПоЗаказам.Заказано           КАК Заказано,
	|	ОстаткиПоЗаказам.ОсталосьЗаказать   КАК ОсталосьЗаказать
	|ИЗ
	|	ОстаткиПоЗаказам КАК ОстаткиПоЗаказам
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|		ПО
	|			ОстаткиПоЗаказам.Номенклатура = Упаковки.Номенклатура
	|			И ОстаткиПоЗаказам.ЕдиницаИзмерения = Упаковки.ЕдиницаИзмерения
	|
	|ГДЕ
	|	ОстаткиПоЗаказам.ОсталосьЗаказать > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Заказано
	|ВЫБРАТЬ
	|	ОстаткиПоЗаказам.Спецификация                     КАК Документ,
	|	ОстаткиПоЗаказам.Номенклатура                     КАК Номенклатура,
	|	ОстаткиПоЗаказам.ЕдиницаИзмерения                 КАК ЕдиницаИзмерения,
	|	ОстаткиПоЗаказам.Заказано  КАК Заказано,
	|	0                              КАК СуммаЗаказано
	|ИЗ
	|	ОстаткиПоЗаказам КАК ОстаткиПоЗаказам
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|		ПО
	|			ОстаткиПоЗаказам.Номенклатура = Упаковки.Номенклатура
	|			И ОстаткиПоЗаказам.ЕдиницаИзмерения = Упаковки.ЕдиницаИзмерения
	|ГДЕ
	|	ОстаткиПоЗаказам.Заказано > 0 И ОстаткиПоЗаказам.КОформлению = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// В процессе поступления
	|ВЫБРАТЬ
	|	ОстаткиПоЗаказам.Спецификация                            КАК Документ,
	|	ОстаткиПоЗаказам.Номенклатура                            КАК Номенклатура,
	|	ОстаткиПоЗаказам.ЕдиницаИзмерения                        КАК ЕдиницаИзмерения,
	|	ОстаткиПоЗаказам.КПоступлению     КАК КПоступлению,
	|	ОстаткиПоЗаказам.Принято          КАК Принято,
	|	ОстаткиПоЗаказам.ОсталосьПринять  КАК ОсталосьПринять
	|ИЗ
	|	ОстаткиПоЗаказам КАК ОстаткиПоЗаказам
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|		ПО
	|			ОстаткиПоЗаказам.Номенклатура = Упаковки.Номенклатура
	|			И ОстаткиПоЗаказам.ЕдиницаИзмерения = Упаковки.ЕдиницаИзмерения
	|ГДЕ
	|	ОстаткиПоЗаказам.Принято > 0 И ОстаткиПоЗаказам.ОсталосьПринять > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Поступило
	|ВЫБРАТЬ
	|	Закупки.Спецификация                    КАК Документ,
	|	Закупки.Номенклатура                    КАК Номенклатура,
	|	Закупки.ЕдиницаИзмерения                КАК ЕдиницаИзмерения,
	|	Закупки.Принято  КАК Принято,
	|	Закупки.СуммаПринято                    КАК СуммаПринято
	|ИЗ
	|	ОстаткиПоЗаказам КАК ОстаткиПоЗаказам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Закупки КАК Закупки
	|		ПО
	|			ОстаткиПоЗаказам.Спецификация = Закупки.Спецификация
	|			И ОстаткиПоЗаказам.Номенклатура = Закупки.НоменклатураЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|		ПО
	|			Закупки.Номенклатура = Упаковки.Номенклатура
	|			И Закупки.ЕдиницаИзмерения = Упаковки.ЕдиницаИзмерения
	|ГДЕ
	|	ОстаткиПоЗаказам.Принято > 0 И ОстаткиПоЗаказам.ОсталосьПринять = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // ФормированиеОтчетов

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//   НастройкиФормы - Неопределено
//
Процедура ДобавитьКомандыСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииПоддержкаПроектов.ДобавитьКомандыСоздатьНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//   НастройкиФормы - Неопределено
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыПоддержкаПроектов.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
	Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуОтчета(КомандыОтчетов); 
	
	Отчеты.СпецификацияЗаданий.ДобавитьКомандуОтчета(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
//#Область ОбновлениеИнформационнойБазы
//
//Процедура ЗаполнитьНалогообложениеНДСДанныеДляОбновления(Параметры) Экспорт
//	
//	Запрос = Новый Запрос("
//	|ВЫБРАТЬ
//	|	Ссылка
//	|ИЗ
//	|	Документ.СпецификацияКДоговору
//	|ГДЕ
//	|	НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
//	|	И НЕ ПометкаУдаления
//	|");
//	
//	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
//	
//КонецПроцедуры
//
//Процедура ЗаполнитьНалогообложениеНДСОтложено(Параметры) Экспорт
//	
//	МетаданныеОбъекта = ПустаяСсылка().Метаданные();
//	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
//	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	
//	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
//	Пока Выборка.Следующий() Цикл
//		
//		НачатьТранзакцию();
//		
//		Попытка
//			
//			Блокировка = Новый БлокировкаДанных;
//			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
//			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
//			Блокировка.Заблокировать();
//			
//			Документ = Выборка.Ссылка.ПолучитьОбъект();
//			
//			Если Документ = Неопределено
//			 Или ЗначениеЗаполнено(Документ.НалогообложениеНДС) Тогда
//				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
//				ЗафиксироватьТранзакцию();
//				Продолжить;
//			КонецЕсли;
//			
//			Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
//			
//			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Документ);
//			
//			ЗафиксироватьТранзакцию();
//			
//		Исключение
//			
//			ОтменитьТранзакцию();
//			
//			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
//			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//			
//			ЗаписьЖурналаРегистрации(
//				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
//				УровеньЖурналаРегистрации.Предупреждение,
//				МетаданныеОбъекта,
//				Выборка.Ссылка,
//				ТекстСообщения);
//			
//			ВызватьИсключение;
//			
//		КонецПопытки;
//		
//	КонецЦикла;
//	
//	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
//	
//КонецПроцедуры
//
//#КонецОбласти // ОбновлениеИнформационнойБазы
//


#КонецЕсли