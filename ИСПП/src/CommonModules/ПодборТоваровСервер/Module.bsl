
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Обработчик события создания формы списка номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - форма подбора товаров.
//
Процедура ПриСозданииФормыСпискаНаСервере(Форма) Экспорт
	
	УстановитьВариантПоискаПоНастройкам(Форма);
	
	ОформитьПанельФильтров(Форма);
	НастроитьФильтрыСпискаТоваров(Форма);
	НастроитьПоискВСпискеТоваров(Форма);
	
КонецПроцедуры

// Обработчик события создания формы подбора номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - форма подбора товаров.
//
Процедура ПриСозданииФормыПодбораНаСервере(Форма) Экспорт
	
	УстановитьЗначенияПоНастройкамФормыПодбора(Форма);
	УстановитьСвойстваФормыПодбораПоПараметрам(Форма);
	УстановитьСкладскиеНастройкиПоПараметрам(Форма);
	УстановитьСвойстваСписковФормыПодбора(Форма);
	ОформитьПанельФильтров(Форма);
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		УстановитьУсловноеОформлениеСпискаТоваров(Форма);
		УстановитьВариантПоискаПоНастройкам(Форма);
		
		НастроитьФильтрыСпискаТоваров(Форма);
		НастроитьПоискВСпискеТоваров(Форма);
	КонецЕсли;
	УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
	Если Форма.Параметры.Свойство("Отбор") Тогда
		Для Каждого Отбор Из Форма.Параметры.Отбор Цикл
			Если Форма.Элементы.Найти(Отбор.Ключ) <> Неопределено Тогда
				Форма[Отбор.Ключ] = Отбор.Значение;
				Если Форма.Элементы.Найти("Отбор" + Отбор.Ключ) <> Неопределено Тогда
					Форма["Отбор" + Отбор.Ключ] = Истина;
				КонецЕсли;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокТоваров, Отбор.Ключ, Отбор.Значение,,, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ОтборТолькоПросмотр") Тогда
		Для Каждого Отбор Из Форма.Параметры.ОтборТолькоПросмотр Цикл
			ОбщегоНазначенияПоддержкаПроектовКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, Отбор, "ТолькоПросмотр", Истина);
			ОбщегоНазначенияПоддержкаПроектовКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "Отбор" + Отбор, "ТолькоПросмотр", Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет настройки форм подбора.
//
// Параметры:
//  Форма - УправляемаяФорма - форма подбора товаров.
//
Процедура СохранитьНастройкиФормы(Форма) Экспорт
	
	СохранитьНастройкиФормыПодбора(Форма);
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодбораОписанийТоваров(Форма) Тогда
		ФильтрыСписков.СохранитьНастройкиФормы(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Формирует заголовок формы подбора, состоящий из заголовка формы и представления документа.
//
// Параметры:
//  Форма - УправляемаяФорма - форма подбора товаров.
//
Процедура УстановитьЗаголовокФормыПодбора(Форма) Экспорт
	
	Документ = Форма.Параметры.Документ;
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеДокумента = "";
	Если ЗначениеЗаполнено(Документ) Тогда
		ПредставлениеДокумента = Строка(Документ);
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Документ)) Тогда
		ПредставлениеОбъекта = Документ.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = Документ.Метаданные().Представление();
		КонецЕсли;
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (новый)'"), ПредставлениеОбъекта);
	КонецЕсли;
	
	Форма.Заголовок = Форма.Заголовок + ": " + ПредставлениеДокумента;
	
КонецПроцедуры

// Обрабатывает изменение флага отбора номенклатуры в наличии на складе в форме подбора.
//
// Параметры:
//  Форма - УправляемаяФорма - форма подбора товаров.
//
Процедура УстановитьОтборТолькоВНаличии(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокТоваров,
		"ВНаличииОстаток",
		0,
		ВидСравненияКомпоновкиДанных.Больше,
		,
		Форма.ТолькоВНаличии);
	
КонецПроцедуры

// Проверяет использование полнотекстового поиска при подборе товаров.
//
Функция ИспользоватьПолнотекстовыйПоиск() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоискПриПодбореТоваров")
	      И ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск")
	      И ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить;
	
КонецФункции

// Имена реквизитов, от значений которых зависят параметры учета номенклатуры.
//
// Возвращаемое значение:
//   Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУчетаНоменклатуры() Экспорт
	
	ИменаРеквизитов = "Склад, ПараметрыФормы, МестоХраненияОстатка";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры учета для номенклатуры, указанной в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//   Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУчетаНоменклатуры.
//
Функция ПараметрыУчетаНоменклатуры(Объект) Экспорт
	
	ПараметрыУчета = ЗапасыСервер.ПараметрыУчетаНоменклатуры();
	ПараметрыУчета.ПолноеИмяОбъекта = "ПодборТоваровСервер";
	
	ПараметрыУчета.Вставить("МестоХраненияОстатка", Объект.МестоХраненияОстатка);
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ВестиУчетПоСериям
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ПолитикиУчетаСерий
		|ГДЕ
		|	ИспользоватьСерии
		|	//{УчетСерийОтборПоСкладу}
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ВестиУчетПоПартиям
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ПолитикиУчетаПартий
		|ГДЕ
		|	ИспользоватьПартии
		|	//{УчетПартийОтборПоСкладу}
		|
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//{УчетСерийОтборПоСкладу}", "И ПолитикиУчетаСерий.ПолитикаУчетаСерий В (ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.УправлениеОстаткамиСерий), ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.УчетСебестоимостиПоСериям))");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//{УчетПартийОтборПоСкладу}", "И ПолитикиУчетаПартий.ПолитикаУчетаПартий В (ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.УправлениеОстаткамиПартий), ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.УчетСебестоимостиПоПартиям))");
		
		Запрос = Новый Запрос(ТекстЗапроса);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ПараметрыУчета.ИспользоватьСерии = Не РезультатЗапроса[0].Пустой();
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыСписания(Объект) Тогда
			ПараметрыУчета.ИспользоватьПартии = Не РезультатЗапроса[1].Пустой();
		КонецЕсли;
		
	Иначе
		
		ПараметрыУчетаНаСкладе = СкладыСервер.ПараметрыУчетаНоменклатуры(Объект.Склад);
		ПараметрыУчета.ИспользоватьСерии = ПараметрыУчетаНаСкладе.ИспользоватьСерииНоменклатуры;
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыСписания(Объект) Тогда
			ПараметрыУчета.ИспользоватьПартии = ПараметрыУчетаНаСкладе.ИспользоватьПартии;
		КонецЕсли;
		ПараметрыУчета.Склад = Объект.Склад;
		
	КонецЕсли;
	
	Возврат ПараметрыУчета;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания параметров учета номенклатуры.
//
// Параметры
//   ПараметрыУчетаНоменклатуры - Структура - состав полей задается в функции ЗапасыСервер.ПараметрыУчетаНоменклатуры.
//
// Возвращаемое значение
//   Строка - текст запроса.
//
Функция ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыУчетаНоменклатуры.Склад) Тогда
		Возврат ЗапасыСервер.ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.СтатусУказанияПартий КАК СтатусУказанияПартий
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолитикиУчетаСерий.Ссылка КАК ВидНоменклатуры,
	|	ИСТИНА КАК ВестиУчетПоСериям
	|ПОМЕСТИТЬ ПараметрыУчетаСерий
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ПолитикиУчетаСерий
	|ГДЕ
	|	ИспользоватьСерии
	|	//{УчетСерийОтборПоСкладу}
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолитикиУчетаСерий.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолитикиУчетаПартий.Ссылка КАК ВидНоменклатуры,
	|	ИСТИНА КАК ВестиУчетПоПартиям
	|ПОМЕСТИТЬ ПараметрыУчетаПартий
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ПолитикиУчетаПартий
	|ГДЕ
	|	ИспользоватьПартии
	|	//{УчетПартийОтборПоСкладу}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияПартийСтарый,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПолитикиУчетаСерий.ВестиУчетПоСериям, ЛОЖЬ)
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА &СтатусУчетПоСериям //&СтатусУчетПоСериямСерияНеЗаполнена
	|					ИНАЧЕ &СтатусУчетПоСериям
	|				КОНЕЦ
	|		ИНАЧЕ &СтатусСерииНеУказываются
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПолитикиУчетаПартий.ВестиУчетПоПартиям, ЛОЖЬ)
	|			ТОГДА &СтатусУчетПоПартиям
	|		ИНАЧЕ &СтатусПартииНеУказываются
	|	КОНЕЦ КАК СтатусУказанияПартий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО
	|			ТоварыДляЗапроса.Номенклатура = Товары.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПараметрыУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО
	|			ПолитикиУчетаСерий.ВидНоменклатуры = ТоварыДляЗапроса.ВидНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПараметрыУчетаПартий КАК ПолитикиУчетаПартий
	|		ПО
	|			ПолитикиУчетаПартий.ВидНоменклатуры = ТоварыДляЗапроса.ВидНоменклатуры
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Статусы.СтатусУказанияПартий КАК СтатусУказанияПартий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтатусУказанияСерийСтарый
	|	ИЛИ Статусы.СтатусУказанияПартий <> Статусы.СтатусУказанияПартийСтарый
	|";
	
	Если ПодборТоваровКлиентСервер.ПодборВОтделении(ПараметрыУчетаНоменклатуры) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//{УчетСерийОтборПоСкладу}", "И ПолитикиУчетаСерий.ПолитикаУчетаСерийВОтделениях В (ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.УправлениеОстаткамиСерий), ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.УчетСебестоимостиПоСериям))");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//{УчетПартийОтборПоСкладу}", "И ПолитикиУчетаПартий.ПолитикаУчетаПартийВОтделениях В (ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.УправлениеОстаткамиПартий), ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.УчетСебестоимостиПоПартиям))");
	Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//{УчетСерийОтборПоСкладу}", "И ПолитикиУчетаСерий.ПолитикаУчетаСерий В (ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.УправлениеОстаткамиСерий), ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.УчетСебестоимостиПоСериям))");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//{УчетПартийОтборПоСкладу}", "И ПолитикиУчетаПартий.ПолитикаУчетаПартий В (ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.УправлениеОстаткамиПартий), ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.УчетСебестоимостиПоПартиям))");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает пустую таблицу данных заказа.
//
Функция ПолучитьПустуюТаблицуДанныхЗаказа() Экспорт
	
	ДанныеЗаказа = Обработки.ПодборТоваровВДокументСписанияПоЗаказу.Создать().Корзина.Выгрузить(, "Заказ, КодСтроки, НоменклатураЗаказа, ЕдиницаИзмеренияЗаказа");
	ДанныеЗаказа.Колонки.Добавить("КОформлению", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	Возврат ДанныеЗаказа;
	
КонецФункции

// Устанавливает отбор на список номенклатуры по аналогичным свойствам переданного товара.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора,
//	Номенклатура - СправочникСсылка.Номенклатура - товар по значениям свойств которого необходимо установить отбор списка номенклатуры.
//
Процедура ОтфильтроватьПоАналогичнымСвойствам(Форма, Номенклатура) Экспорт
	
	Фильтры = ФильтрыСписковКлиентСервер.Фильтры(Форма);
	
	ОписаниеНоменклатуры = НоменклатураСервер.ОписаниеНоменклатуры(Номенклатура);

	ФильтрыСписков.УстановитьИспользоватьФильтры(Форма, Ложь);
	
	ПанельОтборовКлиентСервер.СкрытьПоказатьПанельОтборов(Форма, Ложь);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура УстановитьУсловноеОформлениеСпискаТоваров(Форма)
	
	УсловноеОформление = Форма.СписокТоваров.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление;
	
	#Область ВНаличииОстаток
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ВНаличииОстаток");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Доступно");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=3");
	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
	
	// ВНаличииОстаток - <Нет>
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ВНаличииОстаток");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВНаличииОстаток");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	// Доступно - <Нет>
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Доступно");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Доступно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	#КонецОбласти // ВНаличииОстаток
	
	#Область Цена
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Цена");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=2");
	
	#КонецОбласти // Цена
	
КонецПроцедуры

Процедура УстановитьСвойстваСписковФормыПодбора(Форма)
	
	УстановитьТекстыЗапросовСписковФормыПодбора(Форма);
	УстановитьПараметрыСписковФормыПодбора(Форма);
	
КонецПроцедуры

Процедура УстановитьТекстыЗапросовСписковФормыПодбора(Форма)
	
	Форма.СписокТоваров.ТекстЗапроса = ТекстЗапросаСпискаФормыПодбора(Форма);
	Форма.СписокТоваров.УстановитьОбязательноеИспользование("Ссылка", Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрыСписковФормыПодбора(Форма)
	
	СписокТоваров = Форма.СписокТоваров;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Организация", Форма.Организации.ВыгрузитьЗначения());
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Склад", Форма.Склады.ВыгрузитьЗначения());
	КонецЕсли;
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораОписанийТоваров(Форма) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Организация", Форма.Организации.ВыгрузитьЗначения());
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Склад", Форма.Склады.ВыгрузитьЗначения());
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "ДатаПериода", Форма.Дата);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Отделение", Форма.Параметры.Отделение);
	КонецЕсли;
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыСписания(Форма) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Валюта", Форма.Валюта);
		Если ЗначениеЗаполнено(Форма.ДатаОстатков) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "ДатаОстатков", КонецДня(Форма.ДатаОстатков) + 1);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "ДатаЦены", КонецДня(Форма.ДатаОстатков));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаСпискаФормыПодбора(Форма)
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыПоступления(Форма) Тогда
			ТекстЗапроса = ТекстЗапросаПодборВДокументыПоступления(Форма)
		ИначеЕсли ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыСписания(Форма) Тогда
			ТекстЗапроса = ТекстЗапросаПодборВДокументыСписания(Форма);
		КонецЕсли;
		
		Возврат ТекстЗапроса;
		
	КонецЕсли;		
	
КонецФункции

Функция ТекстЗапросаПодборВДокументыПоступления(Форма)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Ссылка КАК Номенклатура,
	|	Товары.ПометкаУдаления КАК ПометкаУдаления,
	|	Товары.Родитель КАК Родитель,
	|	Товары.Код КАК Код,
	|	Товары.Артикул КАК Артикул,
	|	Товары.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(Товары.НаименованиеПолное КАК СТРОКА(250)) КАК НаименованиеПолное,
	|	Товары.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Товары.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Товары.ТипНоменклатурыРасширенный КАК ТипНоменклатурыРасширенный,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ВсеОстатки.ВНаличииОстаток, 0) / ОсновнаяЕдиница.Коэффициент КАК ВНаличииОстаток,
	|	(ЕСТЬNULL(ВсеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(ВсеОстатки.ВРезервеСоСкладаОстаток, 0)) / ОсновнаяЕдиница.Коэффициент КАК Доступно,
	|	0 КАК Цена
	|	//ПОЛЯ_ДЛЯ_ОТБОРА
	|ИЗ
	|	Справочник.Номенклатура КАК Товары
	|	//СОЕДИНЕНИЯ
	|	{ЛЕВОЕ СОЕДИНЕНИЕ
	|		(ВЫБРАТЬ
	|			Остаток.Номенклатура                    КАК Номенклатура,
	|			СУММА(Остаток.ВНаличииОстаток)          КАК ВНаличииОстаток,
	|			СУММА(Остаток.ВРезервеСоСкладаОстаток)  КАК ВРезервеСоСкладаОстаток
	|		ИЗ
	|			РегистрНакопления.СвободныеОстатки.Остатки(
	|					,
	|					Организация В (&Организация) И Склад В (&Склад)
	|					{(Номенклатура).* КАК Номенклатура}
	|				) КАК Остаток
	|		СГРУППИРОВАТЬ ПО
	|			Номенклатура
	|		) КАК ВсеОстатки
	|	ПО
	|		Товары.Ссылка = ВсеОстатки.Номенклатура}
	|	{ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК ОсновнаяЕдиница
	|	ПО
	|		Товары.Ссылка = ОсновнаяЕдиница.Номенклатура
	|		И Товары.ЕдиницаИзмерения = ОсновнаяЕдиница.ЕдиницаИзмерения}
	|	
	|ГДЕ
	|	НЕ Товары.ЭтоГруппа
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПодборВДокументыСписания(Форма)
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Товары.Ссылка КАК Ссылка,
		|	Товары.Ссылка КАК Номенклатура,
		|	Товары.ПометкаУдаления КАК ПометкаУдаления,
		|	Товары.Родитель КАК Родитель,
		|	Товары.Код КАК Код,
		|	Товары.Артикул КАК Артикул,
		|	Товары.Наименование КАК Наименование,
		|	ВЫРАЗИТЬ(Товары.НаименованиеПолное КАК СТРОКА(250)) КАК НаименованиеПолное,
		|	Товары.ВидНоменклатуры КАК ВидНоменклатуры,
		|	Товары.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Товары.ТипНоменклатурыРасширенный КАК ТипНоменклатурыРасширенный,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Товары.Комплектуемая КАК Комплектуемая,
		|	ЕСТЬNULL(ВсеОстатки.СерияНоменклатуры, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК СерияНоменклатуры,
		|	ЕСТЬNULL(ВсеОстатки.Партия, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)) КАК Партия,
		|	ЕСТЬNULL(ВсеОстатки.ВНаличии, 0) / ОсновнаяЕдиница.Коэффициент КАК ВНаличииОстаток,
		|	(ЕСТЬNULL(ВсеОстатки.ВНаличии, 0) - ЕСТЬNULL(ВсеОстатки.ВРезервеСоСклада, 0)) / ОсновнаяЕдиница.Коэффициент КАК Доступно,
		|	ВЫБОР
		|		КОГДА (ЕСТЬNULL(ВсеОстатки.ВНаличии, 0) - ЕСТЬNULL(ВсеОстатки.ВРезервеСоСклада, 0)) > (ЕСТЬNULL(ВсеОстаткиНаДату.ВНаличии, 0) - ЕСТЬNULL(ВсеОстаткиНаДату.ВРезервеСоСклада, 0))
		|			ТОГДА (ЕСТЬNULL(ВсеОстаткиНаДату.ВНаличии, 0) - ЕСТЬNULL(ВсеОстаткиНаДату.ВРезервеСоСклада, 0))
		|		ИНАЧЕ (ЕСТЬNULL(ВсеОстатки.ВНаличии, 0) - ЕСТЬNULL(ВсеОстатки.ВРезервеСоСклада, 0))
		|	КОНЕЦ / ОсновнаяЕдиница.Коэффициент КАК ДоступноНаДату,
		|	0 КАК Цена
		|	//ПОЛЯ_ДЛЯ_ОТБОРА
		|ИЗ
		|	Справочник.Номенклатура КАК Товары
		|	//СОЕДИНЕНИЯ
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Номенклатура КАК Номенклатура,
		|			СерияНоменклатуры КАК СерияНоменклатуры,
		|			Партия КАК Партия,
		|			ВНаличииОстаток КАК ВНаличии,
		|			ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада
		|		ИЗ
		|			РегистрНакопления.СвободныеОстатки.Остатки(
		|					,
		|					Организация В (&Организация) И Склад В (&Склад)
		|					{(Номенклатура).* КАК Номенклатура}
		|				) КАК ТоварыНаСкладах
		|		) КАК ВсеОстатки
		|		ПО
		|			Товары.Ссылка = ВсеОстатки.Номенклатура}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Номенклатура КАК Номенклатура,
		|			СерияНоменклатуры КАК СерияНоменклатуры,
		|			Партия КАК Партия,
		|			ВНаличииОстаток КАК ВНаличии,
		|			ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада
		|		ИЗ
		|			РегистрНакопления.СвободныеОстатки.Остатки({&ДатаОстатков}
		|					,
		|					Организация В (&Организация) И Склад В (&Склад)
		|					{(Номенклатура).* КАК Номенклатура}
		|				) КАК ТоварыНаСкладах
		|		) КАК ВсеОстаткиНаДату
		|		ПО
		|			ВсеОстатки.Номенклатура = ВсеОстаткиНаДату.Номенклатура
		|			И ВсеОстатки.СерияНоменклатуры = ВсеОстаткиНаДату.СерияНоменклатуры
		|			И ВсеОстатки.Партия = ВсеОстаткиНаДату.Партия}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК ОсновнаяЕдиница
		|	ПО
		|		Товары.Ссылка = ОсновнаяЕдиница.Номенклатура
		|		И Товары.ЕдиницаИзмерения = ОсновнаяЕдиница.ЕдиницаИзмерения}
		|ГДЕ
		|	НЕ Товары.ЭтоГруппа
		|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ПоляЗапроса = СхемаЗапроса.ПакетЗапросов[0].Колонки;
	Если ЗначениеЗаполнено(Форма.ДатаОстатков) Тогда
		ПоляЗапроса.Удалить(ПоляЗапроса.Индекс(ПоляЗапроса.Найти("Доступно")));
		ПоляЗапроса.Найти("ДоступноНаДату").Псевдоним = "Доступно";
	Иначе
		ПоляЗапроса.Удалить(ПоляЗапроса.Индекс(ПоляЗапроса.Найти("ДоступноНаДату")));
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники.Удалить("ВсеОстаткиНаДату");
	КонецЕсли;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	СтрокаПоиска = "ИЗ
		|	Справочник.Номенклатура КАК Товары";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаПоиска, "//ПОЛЯ_ДЛЯ_ОТБОРА" + Символы.ПС + СтрокаПоиска + Символы.ПС + "//СОЕДИНЕНИЯ");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьВариантПоискаПоНастройкам(Форма)
	
	НастройкиВариантПоискаТоваров = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВариантПоискаТоваров", "");
	Если НастройкиВариантПоискаТоваров = Неопределено Тогда
		Форма.ВариантПоискаТоваров = "ПоУмолчанию";
	Иначе
		Форма.ВариантПоискаТоваров = НастройкиВариантПоискаТоваров;
	КонецЕсли;
	
	Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьСтандартныйПоискПриПодбореТоваров");
	
	ПодборТоваровКлиентСервер.УстановитьТекущуюСтраницуПоВариантуПоиска(Форма);
	
КонецПроцедуры

Процедура УстановитьСкладскиеНастройкиПоПараметрам(Форма)
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Форма.Параметры.Документ)) Тогда
		ИмяТаблицы = Форма.Параметры.Документ.Метаданные().ПолноеИмя();
	Иначе
		ИмяТаблицы = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Организация) Тогда
		Форма.Организации.Добавить(Форма.Организация);
	Иначе
		Форма.Организации.ЗагрузитьЗначения(Справочники.Организации.ПолучитьДанныеВыбора(Новый Структура("ТаблицаОбъекта", ИмяТаблицы)).ВыгрузитьЗначения());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Склад) Тогда
		Форма.Склады.Добавить(Форма.Склад);
		Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Форма.Склад));
	Иначе
		ТипыСкладов = Неопределено;
		Форма.Склады.ЗагрузитьЗначения(Справочники.Склады.ПолучитьДоступные(ТипыСкладов, ИмяТаблицы));
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		Форма.РежимПодбораБезРазрезовУчета = Форма.Параметры.РежимПодбораБезРазрезовУчета;
		Если Форма.РежимПодбораБезРазрезовУчета Тогда
			СкрываемыеЭлементы = Новый Массив;
			СкрываемыеЭлементы.Добавить("КорзинаСерияНоменклатуры");
			СкрываемыеЭлементы.Добавить("КорзинаПартия");
			ОбщегоНазначенияПоддержкаПроектовКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, СкрываемыеЭлементы, "Видимость", Ложь);
		КонецЕсли;
		
		Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Форма.Склад));
		Форма.ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Форма, ПодборТоваровСервер));
		Если Не Форма.ПараметрыУчетаНоменклатуры.ИспользоватьСерии Тогда
			СкрываемыеЭлементы = Новый Массив;
			СкрываемыеЭлементы.Добавить("КорзинаСерияНоменклатуры");
			СкрываемыеЭлементы.Добавить("СписокТоваровРасширенныйПоискСерияНоменклатуры");
			СкрываемыеЭлементы.Добавить("СписокТоваровСтандартныйПоискСерияНоменклатуры");
			ОбщегоНазначенияПоддержкаПроектовКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, СкрываемыеЭлементы, "Видимость", Ложь);
		КонецЕсли;
		Если Не Форма.ПараметрыУчетаНоменклатуры.ИспользоватьПартии Тогда
			СкрываемыеЭлементы = Новый Массив;
			СкрываемыеЭлементы.Добавить("КорзинаПартия");
			СкрываемыеЭлементы.Добавить("СписокТоваровРасширенныйПоискПартия");
			СкрываемыеЭлементы.Добавить("СписокТоваровСтандартныйПоискПартия");
			ОбщегоНазначенияПоддержкаПроектовКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, СкрываемыеЭлементы, "Видимость", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Только в наличии на складе ""%1""'"),
		?(ЗначениеЗаполнено(Форма.Склад), Форма.Склад, НСтр("ru='<склад не выбран>'")));
	Форма.Элементы.ТолькоВНаличии.Заголовок = ТекстЗаголовка;
	
	УстановитьОтборТолькоВНаличии(Форма);
	
КонецПроцедуры

Процедура УстановитьЗначенияПоНастройкамФормыПодбора(Форма)
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы, "");
	Если Настройки <> Неопределено Тогда
		
		Для Каждого Настройка Из СохраняемыеНастройки(Форма) Цикл
			
			Если Настройки.Свойство(Настройка) Тогда
				Форма[Настройка] = Настройки[Настройка];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвойстваФормыПодбораПоПараметрам(Форма)
	
	Параметры = Форма.Параметры;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Параметры.ЗаголовокКнопкиПеренести) Тогда
		Форма.Команды["ПеренестиВДокумент"].Заголовок = Параметры.ЗаголовокКнопкиПеренести;
		Форма.Команды["ПеренестиВДокумент"].Подсказка = Параметры.ЗаголовокКнопкиПеренести;
	КонецЕсли;
	
	Форма.РежимПодбораБезКоличественныхПараметров = Параметры.РежимПодбораБезКоличественныхПараметров;
	Форма.РежимПодбораБезСуммовыхПараметров = Параметры.РежимПодбораБезСуммовыхПараметров Или Форма.РежимПодбораБезКоличественныхПараметров;
	Форма.Валюта = Параметры.Валюта;
	Форма.Дата = Параметры.Дата;
	Форма.Организация = Параметры.Организация;
	
	Форма.МестоХраненияОстатка = Параметры.МестоХраненияОстатка;
	Форма.Склад = Форма.Параметры.Склад;
	
	Форма.ЗапретитьИзменениеЦены = Параметры.ЗапретитьИзменениеЦены;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыПоступления(Форма) Тогда
		Форма.ПодборВПоступление = Параметры.ПодборВПоступление;
		Форма.Поставщик = Параметры.Поставщик;
		Форма.ИспользоватьНоменклатуруПоставщиков = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") И ЗначениеЗаполнено(Форма.Поставщик);
		Если Не Форма.ИспользоватьНоменклатуруПоставщиков Тогда
			Элементы.КорзинаНоменклатураПоставщика.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодборВДокументыСписания(Форма) Тогда
		Элементы.СписокТоваровСтандартныйПоискЦена.Видимость = Ложь;
		Элементы.СписокТоваровРасширенныйПоискЦена.Видимость = Ложь;
		Если ЗначениеЗаполнено(Форма.Дата) И КонецДня(Форма.Дата) < ТекущаяДатаСеанса() Тогда
			Форма.ДатаОстатков = Форма.Дата;
			ЗаголовокОстатка = СтрЗаменить(НСтр("ru = 'Доступно на %1'"), "%1", Формат(Форма.ДатаОстатков, "ДЛФ=D"));
			Элементы.СписокТоваровСтандартныйПоискДоступно.Заголовок = ЗаголовокОстатка;
			Элементы.СписокТоваровРасширенныйПоискДоступно.Заголовок = ЗаголовокОстатка;
		КонецЕсли;
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораПоЗаказу(Форма) Тогда
			Форма.АвтозаполнениеБезУчетаМинимальнойУпаковки = Параметры.АвтозаполнениеБезУчетаМинимальнойУпаковки;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.РежимПодбораБезКоличественныхПараметров Тогда
		Элементы.КорзинаКоличественныеПараметры.Видимость = Ложь;
		Элементы.ЗапрашиватьКоличество.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.РежимПодбораБезСуммовыхПараметров Тогда
		Элементы.КорзинаСуммовыеПараметры.Видимость = Ложь;
	Иначе
		Элементы.КорзинаСуммовыеПараметры.Доступность = Не Форма.ЗапретитьИзменениеЦены;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Валюта) Тогда
		Форма.Валюта = ЗначениеНастроекПоддержкаПроектовПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	Элементы.КорзинаЦена.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Цена (%1)'"), Форма.Валюта);
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		Элементы.СписокТоваровСтандартныйПоискЦена.Заголовок = Элементы.КорзинаЦена.Заголовок;
		Элементы.СписокТоваровРасширенныйПоискЦена.Заголовок = Элементы.КорзинаЦена.Заголовок;
	КонецЕсли;
	
	Элементы.ЗапрашиватьКоличество.Пометка = Форма.ЗапрашиватьКоличество;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораПоЗаказу(Форма) Тогда
		Элементы.ГруппаПодборТоваров.Видимость = Форма.ПоказыватьПодборТоваров;
	Иначе
		Элементы.ГруппаПодобранныеТовары.Видимость = Форма.ПоказыватьПодобранныеТовары;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкиФормыПодбора(Форма)
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваров(Форма) Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВариантПоискаТоваров", "", Форма.ВариантПоискаТоваров);
	КонецЕсли;
	
	Настройки = Новый Структура;
	Для Каждого Настройка Из СохраняемыеНастройки(Форма) Цикл
		Настройки.Вставить(Настройка, Форма[Настройка]);
	КонецЦикла;
	
	Если Настройки.Количество() > 0 Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, "", Настройки);
	КонецЕсли;
	
КонецПроцедуры

Функция СохраняемыеНастройки(Форма)
	
	Настройки = Новый Массив;
	Настройки.Добавить("ЗапрашиватьКоличество");
	Настройки.Добавить("ТолькоВНаличии");
	Настройки.Добавить("ОтображатьОстатки");
	Настройки.Добавить("ПоказыватьПодборТоваров");
	Настройки.Добавить("ПоказыватьПодобранныеТовары");
	
	КоличествоНастроек = Настройки.Количество();
	Для Индекс = 1 По КоличествоНастроек Цикл
		
		Настройка = Настройки[КоличествоНастроек - Индекс];
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, Настройка) Тогда
			Настройки.Удалить(КоличествоНастроек - Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

Процедура НастроитьФильтрыСпискаТоваров(Форма)
	
	СохранятьНастройкиПриЗакрытии = Не ПодборТоваровКлиентСервер.ЭтоФормаПодбораПоЗаказу(Форма);
	
	Фильтры = Новый Массив;
	Фильтры.Добавить(ФильтрыСписков.ОписаниеФильтра(ФильтрНоменклатурыПоИерархииКлиентСервер.Идентификатор()));
	
	ФильтрыСписков.ПриСозданииНаСервере(Форма, Фильтры, Форма.Элементы.ГруппаФильтрыНоменклатуры.Имя, "СписокТоваров", Истина, СохранятьНастройкиПриЗакрытии);
	
	Команда = Форма.Команды.Добавить("ПодборТоваров_ОтфильтроватьПоАналогичнымСвойствам");
	Команда.Действие = "Подключаемый_ПодборТоваров_ОтфильтроватьПоАналогичнымСвойствам";
	Команда.Заголовок = НСтр("ru = 'Номенклатура с аналогичными свойствами'");
	Команда.Картинка = БиблиотекаКартинок.ФильтрПоСвойствам;
	
	Элементы = Форма.Элементы;
	Элемент = Элементы.Добавить("СписокТоваровСтандартныйПоискКонтекстноеМенюНоменклатураСАналогичнымиСвойствами", Тип("КнопкаФормы"), Элементы.СписокТоваровСтандартныйПоискКонтекстноеМеню);
	Элемент.ИмяКоманды = "ПодборТоваров_ОтфильтроватьПоАналогичнымСвойствам";
	
	Элемент = Элементы.Добавить("СписокТоваровРасширенныйПоискКонтекстноеМенюНоменклатураСАналогичнымиСвойствами", Тип("КнопкаФормы"), Элементы.СписокТоваровРасширенныйПоискКонтекстноеМеню);
	Элемент.ИмяКоманды = "ПодборТоваров_ОтфильтроватьПоАналогичнымСвойствам";
	
	ПанельОтборовКлиентСервер.СкрытьПоказатьПанельОтборов(Форма, Не ФильтрыСписковКлиентСервер.ИспользоватьФильтры(Форма));
	
КонецПроцедуры

Процедура НастроитьПоискВСпискеТоваров(Форма)
	
	РасширенныйПоискВСписках.ПриСозданииНаСервере(Форма, "ГруппаРасширенныйПоиск", "СписокТоваров", "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма)
	
	ОтборПоТипуНоменклатуры = Неопределено;
	Форма.Параметры.Свойство("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
	
	Если ОтборПоТипуНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборыПоТипуНоменклатуры = Новый СписокЗначений;
	Если ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
		
		ОтборыПоТипуНоменклатуры.Добавить(ОтборПоТипуНоменклатуры);
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("ФиксированныйМассив") Тогда
		
		ОтборыПоТипуНоменклатуры.ЗагрузитьЗначения(Новый Массив(ОтборПоТипуНоменклатуры));
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("Массив") Тогда
		
		ОтборыПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатуры);
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("СписокЗначений") Тогда
		
		ОтборыПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатуры.ВыгрузитьЗначения());
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокТоваров, "ТипНоменклатуры", ОтборыПоТипуНоменклатуры, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоТипуНоменклатуры", (ОтборыПоТипуНоменклатуры.Количество() > 0));
	
КонецПроцедуры

Процедура ОформитьПанельФильтров(Форма)
	
	ПанельФильтров = Форма.Элементы.Найти("ГруппаПанельФильтров");
	Если ПанельФильтров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПанельОтборов.ОформитьПанельОтборов(Форма, ПанельФильтров);
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
