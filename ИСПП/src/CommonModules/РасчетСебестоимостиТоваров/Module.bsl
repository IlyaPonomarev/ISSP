#Область РаботаСВременнымиТаблицами

Процедура ОбъединитьТаблицуЗначенийИВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяПриемника, Таблица, ПоляТаблицы, РесурсыТаблицы)
	
	ИмяИсточника = "ВТВременноеХранилищеТаблицыЗначений";
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяИсточника, Таблица, ПоляТаблицы);
	
	ОбъединитьВременныеТаблицы(МенеджерВременныхТаблиц, ИмяИсточника, ИмяПриемника, ПоляТаблицы, РесурсыТаблицы);
	
	Запрос = Новый Запрос(СтрШаблон("УНИЧТОЖИТЬ %1", ИмяИсточника));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, Таблица, ПоляТаблицы)
	
	Шаблон = "
	|ВЫБРАТЬ
	|	%1
	|ПОМЕСТИТЬ %2
	|ИЗ
	|	&Таблица КАК Т
	|";
	
	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(ПоляТаблицы, "%1", Символы.ПС + "Т."));
	
	Запрос = Новый Запрос(СтрШаблон(Шаблон, ТекстПоляТаблицы, ИмяВременнойТаблицы));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОбъединитьВременныеТаблицы(МенеджерВременныхТаблиц, ИмяИсточника, ИмяПриемника, ПоляТаблицы, РесурсыТаблицы)
	
	// Записи итоговой временной таблицы сворачиваются по всем измерениям и реквизитам регистра.
	// Записи со всеми пустыми ресурсами не помещаются в итоговую временную таблицу.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	%Поля
	|ПОМЕСТИТЬ ВТВременноеХранилищеОбъединяемыхТаблиц
	|ИЗ
	|	%ИмяИсточника КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	%Поля
	|ИЗ
	|	%ИмяПриемника КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %ИмяПриемника
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	%СгруппированныеПоля
	|ПОМЕСТИТЬ %ИмяПриемника
	|ИЗ
	|	ВТВременноеХранилищеОбъединяемыхТаблиц КАК Т
	|
	|%ГруппировкаПолей
	|
	|%ОтборНепустыхРесурсов
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТВременноеХранилищеОбъединяемыхТаблиц
	|";
	
	// Заменим шаблоны в тексте запроса
	ТекстПоляТаблицы = СокрЛП(СтрШаблон(ПоляТаблицы, Символы.ПС + "Т."));
	
	ТекстСгруппированныеПоля   = "";
	ТекстОтборНепустыхРесурсов = "";
	ТекстГруппировкаПолей      = "";
	
	СписокПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрШаблон(ПоляТаблицы, "Т."), ",", Истина, Истина);
	СписокРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрШаблон(РесурсыТаблицы, "Т."), ",", Истина, Истина);
	
	Для Каждого ТекущееПоле Из СписокПолей Цикл
		
		Если СписокРесурсов.Найти(ТекущееПоле) <> Неопределено Тогда
			
			// Ресурс
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля + ",
			|	СУММА(" + ТекущееПоле + ")";
				
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов + "
			|	ИЛИ СУММА(" + ТекущееПоле + ") <> 0";
			
		Иначе
			
			// Измерение или реквизит
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля + ",
			|	" + ТекущееПоле;
			
			ТекстГруппировкаПолей = ТекстГруппировкаПолей + ",
			|	" + ТекущееПоле;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСгруппированныеПоля = Сред(ТекстСгруппированныеПоля, 4);
	
	Если Не ПустаяСтрока(ТекстГруппировкаПолей) Тогда
		ТекстГруппировкаПолей = "СГРУППИРОВАТЬ ПО
		|	" + Сред(ТекстГруппировкаПолей, 4);
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтборНепустыхРесурсов) Тогда
		ТекстОтборНепустыхРесурсов = "ИМЕЮЩИЕ
		|	" + Сред(ТекстОтборНепустыхРесурсов, 7);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Поля"                 , ТекстПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяИсточника"         , ИмяИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника"         , ИмяПриемника);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СгруппированныеПоля"  , ТекстСгруппированныеПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ГруппировкаПолей"     , ТекстГруппировкаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНепустыхРесурсов", ТекстОтборНепустыхРесурсов);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля = "") Экспорт
	
	ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистра];
	
	Если ОписаниеРегистра.Таблица.Количество() >= ПараметрыРасчета.КоличествоСтрокТЗ Тогда
		КэшироватьСформированныеДвижения(ПараметрыРасчета, ИмяРегистра, Ложь);
	КонецЕсли;
	
	Запись = ОписаниеРегистра.Таблица.Добавить();
	
	Если ПустаяСтрока(КопируемыеПоля) Тогда
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения);
	Иначе
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения, КопируемыеПоля);
	КонецЕсли;
	
	Запись.Регистратор = ДанныеДвижения.ДокументДвижения;
	
	// Если регистратор не заполнен, то запомним информацию об ошибке
	Если Не ЗначениеЗаполнено(Запись.Регистратор) Тогда
		
		Если Не ЗначениеЗаполнено(ДанныеДвижения.ДокументДвижения) Тогда
			
			// Ошибка в запросах - не заполнено обязательное поле ДокументДвижения
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнено свойство ДокументДвижения для движения по регистру ""%1""'"),
				ОписаниеРегистра.ИмяРегистра);
			
		Иначе
			
			// Ошибка в метаданных - документ не является регистратором для данного регистра
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ ""%1"" не может иметь движений по регистру ""%2""'"),
				СокрЛП(ДанныеДвижения.ДокументДвижения),
				ОписаниеРегистра.ИмяРегистра);
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОшибкиДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ТекстОшибки);
		
		ПараметрыРасчета.БылиОшибки = Истина;
		ПараметрыРасчета.ОшибкиДвижений.Добавить(ТекстОшибки);
		
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			Запись.Регистратор = ПараметрыРасчета.ДокументыРасчетаПоОрганизациям.Получить(ДанныеДвижения.Организация);
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаВидаУчета Тогда
			Запись.Регистратор = ПараметрыРасчета.ДокументыРасчетаПоОрганизациям.Получить(
				ПараметрыРасчета.ОрганизацияПоАналитикеВидаУчета.Получить(ДанныеДвижения.АналитикаВидаУчета));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запись;
	
КонецФункции

Процедура ИнициализироватьКэшОстатковРегистра(ПараметрыРасчета, ОписаниеРегистра)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	[ИзмеренияРегистра],
	|	[РесурсыРегистраСумма]
	|ПОМЕСТИТЬ ВТКэшПервичныеОстатки[ИмяРегистра]
	|ИЗ
	|	(ВЫБРАТЬ
	|		[ИзмеренияРегистра],
	|		[РесурсыРегистраОстатки]
	|	ИЗ
	|		[ПолноеИмяРегистра].Остатки(
	|				&ГраницаНачалоПериода,
	|				[ОтборОрганизации]
	|		) КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		[ИзмеренияРегистра],
	|		[РесурсыРегистраОбороты]
	|	ИЗ
	|		[ПолноеИмяРегистра] КАК Т
	|	ГДЕ
	|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Т.Активность
	|		И НЕ Т.РасчетСебестоимости
	|		И [ОтборОрганизации]
	|	) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	[ИзмеренияРегистра]
	|";
	
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ОтборПоОрганизации = "Организация В (&СписокОрганизаций)";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаВидаУчета Тогда
		ОтборПоОрганизации = "АналитикаВидаУчета В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Отбор)";
	Иначе
		ОтборПоОрганизации = "ИСТИНА";
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИмяРегистра"           , ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗапроса.Вставить("ПолноеИмяРегистра"     , ОписаниеРегистра.ПолноеИмяРегистра);
	ПараметрыЗапроса.Вставить("ИзмеренияРегистра"     , СтрШаблон(ОписаниеРегистра.ИзмеренияРегистра, "Т."));
	ПараметрыЗапроса.Вставить("РесурсыРегистраСумма"  , СтрШаблон(ОписаниеРегистра.РесурсыРегистраССуффиксом, "СУММА(Т.", ")"));
	ПараметрыЗапроса.Вставить("РесурсыРегистраОстатки", СтрШаблон(ОписаниеРегистра.РесурсыРегистраССуффиксом, "Т."      , "Остаток"));
	ПараметрыЗапроса.Вставить("РесурсыРегистраОбороты", СтрШаблон(ОписаниеРегистра.РесурсыРегистра, "ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Т."));
	ПараметрыЗапроса.Вставить("ОтборОрганизации"      , ОтборПоОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, ПараметрыЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода"       , ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"        , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("ГраницаНачалоПериода", ПараметрыРасчета.РасчетныйПериод.ГраницаНачалоПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций"   , ПараметрыРасчета.СписокОрганизаций);
	
	Запрос.Выполнить();
	
	ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	
КонецПроцедуры

Процедура ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Инициализация = Ложь)
	
	Запрос = Новый Запрос;
	Если Не Инициализация Тогда
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ВТКэшРасчетныеОстатки[ИмяРегистра]
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	[ИзмеренияРегистра],
	|	[РесурсыРегистраСумма]
	|ПОМЕСТИТЬ ВТКэшРасчетныеОстатки[ИмяРегистра]
	|ИЗ
	|	(ВЫБРАТЬ
	|		[ИзмеренияРегистра],
	|		[РесурсыРегистра]
	|	ИЗ
	|		ВТКэшПервичныеОстатки[ИмяРегистра] КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		[ИзмеренияРегистра],
	|		[РесурсыРегистраОбороты]
	|	ИЗ
	|		ВТКэш[ИмяРегистра] КАК Т
	|	) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	[ИзмеренияРегистра]
	|";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИмяРегистра"           , ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗапроса.Вставить("ИзмеренияРегистра"     , СтрШаблон(ОписаниеРегистра.ИзмеренияРегистра, "Т."));
	ПараметрыЗапроса.Вставить("РесурсыРегистра"       , СтрШаблон(ОписаниеРегистра.РесурсыРегистра, "Т."));
	ПараметрыЗапроса.Вставить("РесурсыРегистраСумма"  , СтрШаблон(ОписаниеРегистра.РесурсыРегистраССуффиксом, "СУММА(Т.", ")"));
	ПараметрыЗапроса.Вставить("РесурсыРегистраОбороты", СтрШаблон(ОписаниеРегистра.РесурсыРегистра, "ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Т."));
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Запрос.Текст, ПараметрыЗапроса);
	
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОбновитьРасчетныеЗаписиРегистра(ПараметрыРасчета, ОписаниеРегистра, Инициализация = Ложь)
	
	ТекстЗапроса = "";
	Если Не Инициализация Тогда
		ТекстЗапроса = "
		|УНИЧТОЖИТЬ ВТКэшЗаписи[ИмяРегистра]
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	[ПоляРегистра]
	|ПОМЕСТИТЬ ВТКэшЗаписи[ИмяРегистра]
	|ИЗ
	|	[ПолноеИмяРегистра] КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Т.РасчетСебестоимости
	|	И Т.Активность
	|	[ОтборПоОрганизации]
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	[ПоляРегистра]
	|ИЗ
	|	ВТКэш[ИмяРегистра] КАК Т
	|";
	
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ОтборПоОрганизации = "И Т.Организация В (&СписокОрганизаций)";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаВидаУчета Тогда
		ОтборПоОрганизации = "И Т.АналитикаВидаУчета В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Отбор)";
	Иначе
		ОтборПоОрганизации = "";
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИмяРегистра"           , ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗапроса.Вставить("ПолноеИмяРегистра"     , ОписаниеРегистра.ПолноеИмяРегистра);
	ПараметрыЗапроса.Вставить("ПоляРегистра"          , СтрШаблон(ОписаниеРегистра.ПоляРегистра, "Т."));
	ПараметрыЗапроса.Вставить("ОтборПоОрганизации"    , ОтборПоОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, ПараметрыЗапроса);
	
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода"     , ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"      , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций" , ПараметрыРасчета.СписокОрганизаций);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура КэшироватьСформированныеДвижения(ПараметрыРасчета, ИмяРегистра = Неопределено, ОкончаниеЭтапа = Истина)
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		Если ИмяРегистра <> Неопределено И НРег(КлючИЗначение.Ключ) <> НРег(ИмяРегистра) Тогда
			Продолжить; // если явно задано имя регистра, то надо обработать только его
		КонецЕсли;
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если ОписаниеРегистра.Таблица.Количество() > 0 Тогда
			
			// Переместим сформированные движения из ОписаниеРегистра.Таблица во временную таблицу ВТКэш
			
			// Дозаполним поле РасчетСебестоимости
			Если ОписаниеРегистра.ЭтоРегистрНакопления Тогда
				ОписаниеРегистра.Таблица.ЗаполнитьЗначения(Истина, "РасчетСебестоимости");
			КонецЕсли;
			
			// Добавим данные из таблицы во временную таблицу
			ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
				ПараметрыРасчета.МенеджерВременныхТаблиц,
				"ВТКэш" + КлючИЗначение.Ключ,
				ОписаниеРегистра.Таблица,
				ОписаниеРегистра.ПоляРегистра,
				ОписаниеРегистра.РесурсыРегистра);
				
			// Очистим накопленные в таблице значений записи - они перемещены во временную таблицу
			ОписаниеРегистра.Таблица.Очистить();
			
			// Были изменения в ВТКэш, еще не учтенные в ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;
			
		КонецЕсли;
		
		Если ОкончаниеЭтапа И ОписаниеРегистра.НадоОбновитьРасчетныйКэш Тогда
			
			// "Внутри" этапа расчета может выполняться многократное "порционное" кэширование сформированных записей,
			// но актуальные ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты нужны не "внутри" этапа,
			// а к его завершению (к началу следующего этапа).
			
			// Переформируем таблицу записей регистра
			Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(КлючИЗначение.Ключ)  // нужна таблица записей 
			   И ПараметрыРасчета.РегистрыСРасчетнымиОборотами[КлючИЗначение.Ключ] Тогда     // нужно автообновление таблицы записей
				ОбновитьРасчетныеЗаписиРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			// Пересчитаем остатки регистра на конец периода
			Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(КлючИЗначение.Ключ) // нужны расчетные остатки
			   И ПараметрыРасчета.РегистрыСРасчетнымиОстатками[КлючИЗначение.Ключ] Тогда    // нужно автообновление остатков
				ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь; // учли все движения в кэше остатков/оборотов
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСформированныеДвижения(ПараметрыРасчета)
	
	ОбработаноРегистров = 0;
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		Если ПараметрыРасчета.ПредварительныйРасчет
		 И КлючИЗначение.Ключ <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
			// При предварительном расчете пересчитывается только стоимость товаров.
			// Движения по всем остальным регистрам остаются без изменений.
			Продолжить;
		КонецЕсли;
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		// Сформируем ВТКэшСтарыеДокументы
		СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра);
		
		// Сформируем ВТКэшИзмененныеДокументы
		КоличествоДокументов = СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра);
		
		Если КоличествоДокументов > 0 Тогда
			
			РезультатЗапросаОчищаемыеДокументы = СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра);
			Если Не РезультатЗапросаОчищаемыеДокументы.Пустой() Тогда
				ЗаписатьДвиженияПоРегистру(РезультатЗапросаОчищаемыеДокументы.Выбрать(), ОписаниеРегистра.МенеджерРегистра, ПараметрыРасчета.РазмерНабораЗаписей,, Истина);
			КонецЕсли;
			
			// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
			//  - "первичные" движения документа в периоде расчета
			//  - новые "расчетные" движения документа
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	[ПоляРегистра]
			|ИЗ
			|	[ПолноеИмяРегистра] КАК Т
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
			|	ПО
			|		Т.Регистратор = ИзмененныеДокументы.Регистратор
			|		И (НЕ [ОтборРасчетныеДвижения])
			|ГДЕ
			|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
			|	[ОтборПоОрганизации]
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	[ПоляРегистра]
			|ИЗ
			|	ВТКэш[ИмяРегистра] КАК Т
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
			|	ПО
			|		Т.Регистратор = ИзмененныеДокументы.Регистратор
			|
			|УПОРЯДОЧИТЬ ПО
			|	[Порядок]
			|";
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ПоляРегистра", СтрШаблон(ОписаниеРегистра.ПоляРегистра, Символы.ПС + "Т."));
			ПараметрыЗапроса.Вставить("ПолноеИмяРегистра", ОписаниеРегистра.ПолноеИмяРегистра);
			ПараметрыЗапроса.Вставить("ИмяРегистра", ОписаниеРегистра.ИмяРегистра);
			ПараметрыЗапроса.Вставить("ОтборРасчетныеДвижения", ?(ОписаниеРегистра.ЭтоРегистрНакопления, "Т.РасчетСебестоимости", "ИСТИНА"));
			Если ОписаниеРегистра.ЕстьОрганизация Тогда
				ОтборПоОрганизации = "И Т.Организация В (&СписокОрганизаций)";
			ИначеЕсли ОписаниеРегистра.ЕстьАналитикаВидаУчета Тогда
				ОтборПоОрганизации = "И Т.АналитикаВидаУчета В (ВЫБРАТЬ Т.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Т)";
			Иначе
				ОтборПоОрганизации = "";
			КонецЕсли;
			ПараметрыЗапроса.Вставить("ОтборПоОрганизации", ОтборПоОрганизации);
			ТекстПоляСортировки = "Т.Регистратор, Т.Период" + ", " + СтрШаблон(ОписаниеРегистра.ИзмеренияРегистра, "Т.");
			Если ОписаниеРегистра.ЭтоРегистрНакопления Тогда
				ТекстПоляСортировки = ТекстПоляСортировки + ", Т.РасчетСебестоимости";
			КонецЕсли;
			ПараметрыЗапроса.Вставить("Порядок", ТекстПоляСортировки);
			
			Запрос = Новый Запрос;
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, ПараметрыЗапроса);
			Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("НачалоПериода"    , ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
			Запрос.УстановитьПараметр("КонецПериода"     , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
			Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
			Выборка = Запрос.Выполнить().Выбрать();
			
			ЗаписатьДвиженияПоРегистру(Выборка, ОписаниеРегистра.МенеджерРегистра, ПараметрыРасчета.РазмерНабораЗаписей);
			
		КонецЕсли;
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета.МенеджерВременныхТаблиц, "ВТКэшСтарыеДокументы, ВТКэшИзмененныеДокументы");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра)
	
	// Выберем все старые регистраторы данного регистра (кроме док. КорректировкаРегистров)
	// Поле Активность не проверяем
	Если НЕ ОписаниеРегистра.ЭтоРегистрНакопления Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
		|ИЗ
		|	%1 КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.АналитикаВидаУчета В(ВЫБРАТЬ Т.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Т)
		|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|";
		
	ИначеЕсли ОписаниеРегистра.ЕстьОрганизация Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
		|ИЗ
		|	%1 КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.РасчетСебестоимости
		|	И Т.Организация В(&СписокОрганизаций)
		|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|";
		
	Иначе // ЕстьАналитикаВидаУчета
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
		|ИЗ
		|	%1 КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВТОтборАналитикаВидаУчета КАК АналитикаВида
		|	ПО
		|		Т.АналитикаВидаУчета = АналитикаВида.КлючАналитики
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.РасчетСебестоимости
		|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрШаблон(ТекстЗапроса, ОписаниеРегистра.ПолноеИмяРегистра));
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода"    , ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"     , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор КАК Регистратор,
	|	Т.Регистратор.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ ВТКэшИзмененныеДокументы
	|ИЗ
	|	(ВЫБРАТЬ // новые движения, с плюсом
	|		[ПоляРегистра]
	|	ИЗ
	|		ВТКэш[ИмяРегистра] КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ // старые движения, с минусом
	|		[ПоляРегистраРесурсыСМинусом]
	|	ИЗ
	|		[ПолноеИмяРегистра] КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ВТКэшСтарыеДокументы КАК СтарыеДокументы
	|		ПО
	|			Т.Регистратор = СтарыеДокументы.Регистратор
	|		ГДЕ
	|			Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			[ОтборРасчетныеДвижения]
	|	) КАК Т
	|
	|[ГруппировкаПолей]
	|
	|[ОтборНепустыхРесурсов]
	|";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ПолноеИмяРегистра"     , ОписаниеРегистра.ПолноеИмяРегистра);
	ПараметрыЗапроса.Вставить("ИмяРегистра"           , ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗапроса.Вставить("ОтборРасчетныеДвижения", ?(ОписаниеРегистра.ЭтоРегистрНакопления, "И Т.РасчетСебестоимости", ""));
	
	ТекстОтборНепустыхРесурсов       = "";
	ТекстГруппировкаПолей            = "";
	ТекстПоляРегистраРесурсыСМинусом = "";
	ТекстПоляРегистра                = СокрЛП(СтрШаблон(ОписаниеРегистра.ПоляРегистра, Символы.ПС + "Т.")); // ресурсы с "плюсом
	
	СписокПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрШаблон(ОписаниеРегистра.ПоляРегистра, "Т."),
		",",
		Истина,
		Истина);
	СписокРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрШаблон(ОписаниеРегистра.РесурсыРегистра, "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из СписокПолей Цикл
		
		ЭтоРесурсРегистра = (СписокРесурсов.Найти(ТекущееПоле) <> Неопределено);
		Если ЭтоРесурсРегистра Тогда
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов + "
			|	ИЛИ СУММА(" + ТекущееПоле + ") <> 0";
		Иначе
			ТекстГруппировкаПолей = ТекстГруппировкаПолей + ",
			|	" + ТекущееПоле;
		КонецЕсли;
		
		ТекстПоляРегистраРесурсыСМинусом = ТекстПоляРегистраРесурсыСМинусом + ",
		|	" + ?(ЭтоРесурсРегистра, "-", "") + ТекущееПоле;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстГруппировкаПолей) Тогда
		ТекстГруппировкаПолей = "СГРУППИРОВАТЬ ПО
		|	" + Сред(ТекстГруппировкаПолей, 4);
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтборНепустыхРесурсов) Тогда
		ТекстОтборНепустыхРесурсов = "ИМЕЮЩИЕ
		|	" + Сред(ТекстОтборНепустыхРесурсов, 7);
	КонецЕсли;
	ТекстПоляРегистраРесурсыСМинусом = Сред(ТекстПоляРегистраРесурсыСМинусом, 3);
	
	ПараметрыЗапроса.Вставить("ПоляРегистра"               , ТекстПоляРегистра);
	ПараметрыЗапроса.Вставить("ПоляРегистраРесурсыСМинусом", ТекстПоляРегистраРесурсыСМинусом);
	ПараметрыЗапроса.Вставить("ГруппировкаПолей"           , ТекстГруппировкаПолей);
	ПараметрыЗапроса.Вставить("ОтборНепустыхРесурсов"      , ТекстОтборНепустыхРесурсов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, ПараметрыЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода" , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Регистратор
	|ИЗ
	|	[ПолноеИмяРегистра] КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
	|	ПО
	|		Т.Регистратор = ИзмененныеДокументы.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Т.Регистратор
	|		ИЗ
	|			ВТКэш[ИмяРегистра] КАК Т
	|		) КАК НеОчищаемыеДокументы
	|	ПО
	|		Т.Регистратор = НеОчищаемыеДокументы.Регистратор
	|
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НеОчищаемыеДокументы.Регистратор ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ([ОтборРасчетныеДвижения]) = ИСТИНА
	|";
	
	// Заменим шаблоны в тексте запроса
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ПолноеИмяРегистра"     , ОписаниеРегистра.ПолноеИмяРегистра);
	ПараметрыЗапроса.Вставить("ИмяРегистра"           , ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗапроса.Вставить("ОтборРасчетныеДвижения", ?(ОписаниеРегистра.ЭтоРегистрНакопления, "Т.РасчетСебестоимости", "ИСТИНА"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, ПараметрыЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода" , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Уничтожает указанные временные таблицы
//
Процедура УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, ИменаТаблиц)
	
	СтруктураТаблиц = Новый Структура(ИменаТаблиц);
	ТекстЗапроса = "";
	
	Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
		
		ТекстЗапроса = ТекстЗапроса 
			+ ?(ТекстЗапроса = "", "", "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|") + "УНИЧТОЖИТЬ " + КлючИЗначение.Ключ;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти // РаботаСВременнымиТаблицами

// Возвращает общее для всех этапов расчета себестоимости имя события для журнала регистрации.
//
Функция ИмяСобытияЖурналаРегистрации(Уточнение = "")
	
	ИмяСобытия = НСтр("ru = 'Расчет себестоимости'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если Не ПустаяСтрока(Уточнение) Тогда
		ИмяСобытия = ИмяСобытия + "." + Уточнение;
	КонецЕсли;
	
	Возврат ИмяСобытия;
	
КонецФункции

// Возвращает имя события журнала для записи ошибки расчета.
//
Функция ИмяСобытияОшибкиДляЖурналаРегистрации()
	
	Возврат ИмяСобытияЖурналаРегистрации(НСтр("ru='Ошибка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецФункции

Функция ТекстОшибкаОбработана()
	
	Возврат "{ОшибкаОбработана}";
	
КонецФункции

Процедура ЗаписатьДвиженияПоРегистру(Выборка, МенеджерРегистра, РазмерНабораЗаписей, Замещать = Истина, ТолькоОчищатьЗаписи = Ложь)
	
	НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
	ТекущийРегистратор = Неопределено;
	НомерПорцииЗаписи = 1;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийРегистратор <> Выборка.Регистратор Тогда
			
			// Если изменился регистратор в движениях - запишем движения предыдущего регистратора
			Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
				НаборЗаписей.Записать(ТолькоОчищатьЗаписи Или Замещать И НомерПорцииЗаписи = 1);
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			ТекущийРегистратор = Выборка.Регистратор;
			НомерПорцииЗаписи = 1;
			
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
			
		ИначеЕсли Не ТолькоОчищатьЗаписи И НаборЗаписей.Количество() >= РазмерНабораЗаписей Тогда
			
			// Если в движениях документа много записей - будем записывать их порциями
			// Первая порция записывается с замещением старых записей, следующие - с добавлением к предыдущим порциям
			НаборЗаписей.Записать(Замещать И НомерПорцииЗаписи = 1);
			НаборЗаписей.Очистить();
			
			НомерПорцииЗаписи = НомерПорцииЗаписи + 1;
			
		КонецЕсли;
		
		Если Не ТолькоОчищатьЗаписи Тогда
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
		НаборЗаписей.Записать(ТолькоОчищатьЗаписи Или Замещать И НомерПорцииЗаписи = 1);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя служебного доп. свойства, устанавливаемого у всех объектов, записываемых этим механизмом.
//
Функция ИмяСлужебногоДополнительногоСвойстваОбъекта()
	Возврат "РасчетСебестоимости";
КонецФункции