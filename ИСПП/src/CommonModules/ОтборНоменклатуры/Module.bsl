
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Получает список номенклатуры по отбору во временную таблицу
//
// Параметры:
//  ТаблицаЗаказа - ТаблицаЗначений - таблица с колонками НоменклатураЗаказа и ЕдиницаИзмеренияЗаказа.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в котором будет сохранена временная таблица
//  ИмяВременнойТаблицы - Строка - имя временной таблицы
//
Процедура ПолучитьНоменклатуруПоОтборуВоВременнуюТаблицу(ТаблицаЗаказа, МенеджерВременныхТаблиц, ИмяВременнойТаблицы = "НоменклатураПоЗаказу") Экспорт
	
	Таблица = ТаблицаЗаказа.Скопировать(, "НоменклатураЗаказа, ЕдиницаИзмеренияЗаказа");
	Таблица.Свернуть("НоменклатураЗаказа, ЕдиницаИзмеренияЗаказа");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗаказа", Таблица);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаЗаказа.НоменклатураЗаказа      КАК НоменклатураЗаказа,
	|	ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа  КАК ЕдиницаИзмеренияЗаказа
	|ПОМЕСТИТЬ ИсходнаяТаблицаЗаказа
	|ИЗ
	|	&ТаблицаЗаказа КАК ТаблицаЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказа.НоменклатураЗаказа                              КАК НоменклатураЗаказа,
	|	ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа                          КАК ЕдиницаИзмеренияЗаказа,
	|	АналитикаТребования.Ссылка                              КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗаказа
	|ИЗ
	|	ИсходнаяТаблицаЗаказа КАК ТаблицаЗаказа
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК АналитикаТребования
	|		ПО
	|			ТаблицаЗаказа.НоменклатураЗаказа = АналитикаТребования.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИсходнаяТаблицаЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказа.НоменклатураЗаказа КАК  НоменклатураЗаказа,
	|	ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа  КАК ЕдиницаИзмеренияЗаказа,
	|	ТаблицаЗаказа.Номенклатура            КАК Номенклатура,
	|	0 КАК Приоритет
	|ПОМЕСТИТЬ РасширеннаяТаблицаТребований
	|ИЗ
	|	ТаблицаЗаказа КАК ТаблицаЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказа.НоменклатураЗаказа                          КАК НоменклатураЗаказа,
	|	ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа                      КАК ЕдиницаИзмеренияЗаказа,
	|	СправочникНоменклатура.Ссылка                             КАК Номенклатура,
	|	МИНИМУМ(ВЫБОР
	|		КОГДА ТаблицаЗаказа.Номенклатура = СправочникНоменклатура.Ссылка
	|			ТОГДА 10
	|	КОНЕЦ + ТаблицаЗаказа.Приоритет)                          КАК Приоритет,
	|	СправочникНоменклатура.ЕдиницаИзмерения                   КАК ЕдиницаИзмерения
	|ИЗ
	|	РасширеннаяТаблицаТребований КАК ТаблицаЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО
	|			ТаблицаЗаказа.Номенклатура = СправочникНоменклатура.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказа.НоменклатураЗаказа,
	|	ТаблицаЗаказа.ЕдиницаИзмеренияЗаказа,
	|	СправочникНоменклатура.Ссылка,
	|	СправочникНоменклатура.ЕдиницаИзмерения
	|";
	
	НоменклатураПоОтбору = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НоменклатураЗаказа                  КАК НоменклатураЗаказа,
	|	ЕдиницаИзмеренияЗаказа              КАК ЕдиницаИзмеренияЗаказа,
	|	Номенклатура                        КАК Номенклатура,
	|	Приоритет                           КАК Приоритет,
	|	ЕдиницаИзмерения                    КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ " + ИмяВременнойТаблицы + "
	|ИЗ
	|	&НоменклатураПоОтбору КАК НоменклатураПоОтбору
	|";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НоменклатураПоОтбору", НоменклатураПоОтбору);
	Запрос.Выполнить();
	
КонецПроцедуры

// Определяет связь номенклатуры со строками заказа
//
// Параметры:
//  ТаблицаЗаказа - ТаблицаЗначений - таблица с колонками НоменклатураЗаказа и ЕдиницаИзмеренияЗаказа.
//  СписокНоменклатуры - Массив - список номенклатуры 
//
// Возвращаемое значение:
//  ДеревоЗначений -
//    Номенклатура
//    НоменклатураЗаказа
//    ЕдиницаИзмеренияЗаказа
//    КоэффициентЕдиницыЗаказа
//
Функция ПолучитьСвязьНоменклатурыСЗаказом(ТаблицаЗаказа, СписокНоменклатуры) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПолучитьНоменклатуруПоОтборуВоВременнуюТаблицу(ТаблицаЗаказа, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НоменклатураПоЗаказу.Номенклатура КАК Номенклатура,
	|	НоменклатураПоЗаказу.НоменклатураЗаказа КАК НоменклатураЗаказа,
	|	НоменклатураПоЗаказу.ЕдиницаИзмеренияЗаказа КАК ЕдиницаИзмеренияЗаказа
	|ИЗ
	|	НоменклатураПоЗаказу КАК НоменклатураПоЗаказу
	|ГДЕ
	|	НоменклатураПоЗаказу.Номенклатура В (&Номенклатура)
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураПоЗаказу.Приоритет
	|
	|ИТОГИ ПО Номенклатура
	|";
	
	НоменклатураПоЗаказу = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	НоменклатураПоЗаказу.Колонки.Добавить("КоэффициентЕдиницыЗаказа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 9, ДопустимыйЗнак.Неотрицательный)));
	
	Для Каждого СтрокаНоменклатуры Из НоменклатураПоЗаказу.Строки Цикл
		УдаляемыеСтроки = Новый Массив;
		Для Каждого СтрокаЗаказа Из СтрокаНоменклатуры.Строки Цикл
			СтрокаЗаказа.КоэффициентЕдиницыЗаказа = КоэффициентЕдиницыЗаказа(СтрокаНоменклатуры.Номенклатура, СтрокаЗаказа.НоменклатураЗаказа, СтрокаЗаказа.ЕдиницаИзмеренияЗаказа);
			Если СтрокаЗаказа.КоэффициентЕдиницыЗаказа = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаЗаказа);
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			СтрокаНоменклатуры.Строки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Возврат НоменклатураПоЗаказу;
	
КонецФункции

// Возвращает структуру с параметрами получения остатков номенклатуры
//
Функция ПараметрыПолученияОстатков() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДатаОстатков"                 , Дата(1, 1, 1));
	Параметры.Вставить("Организация"                  , Справочники.Организации.ПустаяСсылка());
	Параметры.Вставить("Склад"                        , Справочники.Склады.ПустаяСсылка());
	
	Возврат Параметры;
	
КонецФункции

// Подбирает номенклатуру из остатков на складе по строке заказа
//
// Параметры:
//  ТаблицаЗаказа        - ТаблицаЗначений - таблица со строками заказа
//  ПараметрыОстатков    - Структура - см. ОтборНоменклатуры.ПараметрыПолученияОстатков()
//  ПодбиратьСУчетомМинимальнойЕдиницыОтпуска - Булево
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьОстаткиНоменклатурыПоЗаказу(ТаблицаЗаказа, ПараметрыОстатков, ПодбиратьСУчетомМинимальнойЕдиницыОтпуска = Истина) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПолучитьНоменклатуруПоОтборуВоВременнуюТаблицу(ТаблицаЗаказа, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", ПараметрыОстатков.Организация);
	Запрос.УстановитьПараметр("Склад", ПараметрыОстатков.Склад);
	ДатаОстатков = ПараметрыОстатков.ДатаОстатков;
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ДатаОстатков) + 1);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладах.Номенклатура            КАК Номенклатура,
	|	ТоварыНаСкладах.СерияНоменклатуры       КАК СерияНоменклатуры,
	|	ТоварыНаСкладах.Партия                  КАК Партия,
	|	ТоварыНаСкладах.ВНаличииОстаток - ТоварыНаСкладах.ВРезервеСоСкладаОстаток  КАК Остаток,
	|	ВЫБОР
	|		КОГДА ТоварыНаСкладах.ВНаличииОстаток - ТоварыНаСкладах.ВРезервеСоСкладаОстаток > ЕСТЬNULL(ОстаткиНаДату.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстаткиНаДату.ВРезервеСоСкладаОстаток, 0)
	|			ТОГДА ЕСТЬNULL(ОстаткиНаДату.ВНаличииОстаток, 0) - ЕСТЬNULL(ОстаткиНаДату.ВРезервеСоСкладаОстаток, 0)
	|		ИНАЧЕ ТоварыНаСкладах.ВНаличииОстаток - ТоварыНаСкладах.ВРезервеСоСкладаОстаток
	|	КОНЕЦ                                   КАК ОстатокНаДату,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыНаСкладах.Партия.ДокументОприходования.Дата, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3099, 12, 31)
	|		ИНАЧЕ ТоварыНаСкладах.Партия.ДокументОприходования.Дата
	|	КОНЕЦ                                   КАК ДатаПартии
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						Врем.Номенклатура
	|					ИЗ
	|						НоменклатураПоЗаказу КАК Врем)) КАК ТоварыНаСкладах
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.СвободныеОстатки.Остатки(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						Врем.Номенклатура
	|					ИЗ
	|						НоменклатураПоЗаказу КАК Врем)) КАК ОстаткиНаДату
	|	ПО
	|		ТоварыНаСкладах.Номенклатура = ОстаткиНаДату.Номенклатура
	|		И ТоварыНаСкладах.СерияНоменклатуры = ОстаткиНаДату.СерияНоменклатуры
	|		И ТоварыНаСкладах.Партия = ОстаткиНаДату.Партия
	|		
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПоЗаказу.НоменклатураЗаказа         КАК НоменклатураЗаказа,
	|	НоменклатураПоЗаказу.ЕдиницаИзмеренияЗаказа     КАК ЕдиницаИзмеренияЗаказа,
	|	НоменклатураПоЗаказу.Номенклатура               КАК Номенклатура,
	|	НоменклатураПоЗаказу.Приоритет                  КАК Приоритет,
	|	НоменклатураПоЗаказу.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	ТаблицаОстатков.СерияНоменклатуры               КАК СерияНоменклатуры,
	|	ТаблицаОстатков.ДатаПартии                      КАК ДатаПартии
	|ИЗ
	|	НоменклатураПоЗаказу КАК НоменклатураПоЗаказу
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОстатков КАК ТаблицаОстатков
	|	ПО
	|		НоменклатураПоЗаказу.Номенклатура = ТаблицаОстатков.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураПоЗаказу.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Номенклатура            КАК Номенклатура,
	|	ТаблицаОстатков.СерияНоменклатуры       КАК СерияНоменклатуры,
	|	ТаблицаОстатков.Партия                  КАК Партия,
	|	ТаблицаОстатков.Остаток                 КАК Остаток
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОстатков.Номенклатура,
	|	ТаблицаОстатков.ДатаПартии
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ТекстЗапросаОстатков = НастроитьЗапросОстатковПоПараметрам(СхемаЗапроса.ПакетЗапросов[0].ПолучитьТекстЗапроса(), ПараметрыОстатков);
	СхемаЗапроса.ПакетЗапросов[0].УстановитьТекстЗапроса(ТекстЗапросаОстатков);
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Остатки = РезультатыЗапроса[2].Выгрузить();
	СписокНоменклатурыПоТребованию = РезультатыЗапроса[1].Выгрузить();
	
	ТаблицаПодбора = Новый ТаблицаЗначений;
	ТаблицаПодбора.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПодбора.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаПодбора.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	ТаблицаПодбора.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаПодбора.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПодбора.Колонки.Добавить("Заказ", Метаданные.Обработки.ПодборТоваровВДокументСписанияПоЗаказу.ТабличныеЧасти.Корзина.Реквизиты.Заказ.Тип);
	ТаблицаПодбора.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПодбора.Колонки.Добавить("НоменклатураЗаказа", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиОписанийОтборовНоменклатуры"));
	ТаблицаПодбора.Колонки.Добавить("ЕдиницаИзмеренияЗаказа", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаПодбора.Колонки.Добавить("КоличествоВЕдиницахЗаказа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	
	КэшированныеЗначения = Новый Структура("Упаковки", Новый Соответствие);
	
	Для Каждого СтрокаТребования Из ТаблицаЗаказа Цикл
		
		КоличествоТребования = СтрокаТребования.Количество;
		
		Отбор = Новый Структура;
		Отбор.Вставить("НоменклатураЗаказа", СтрокаТребования.НоменклатураЗаказа);
		Отбор.Вставить("ЕдиницаИзмеренияЗаказа", СтрокаТребования.ЕдиницаИзмеренияЗаказа);
		
		НоменклатураПоЗаказу = СписокНоменклатурыПоТребованию.НайтиСтроки(Отбор);
		
		Для Каждого Номенклатура Из НоменклатураПоЗаказу Цикл
			
			Если КоличествоТребования = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Коэффициент = НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура.Номенклатура, СтрокаТребования.ЕдиницаИзмеренияЗаказа);
			Если Коэффициент = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоВБазовыхЕдиницах = КоличествоТребования * Коэффициент;
			
			Отбор = Новый Структура("Номенклатура, СерияНоменклатуры", Номенклатура.Номенклатура, Номенклатура.СерияНоменклатуры);
			ОстаткиНоменклатуры = Остатки.НайтиСтроки(Отбор);
			
			УказанаМинимальнаяЕдиница = Ложь;
			МинимальнаяЕдиница = Номенклатура.ЕдиницаИзмерения;
			Если ПодбиратьСУчетомМинимальнойЕдиницыОтпуска И ЗначениеЗаполнено(Номенклатура.МинимальнаяЕдиницаОтпуска) Тогда
				
				МинимальнаяЕдиница = Номенклатура.МинимальнаяЕдиницаОтпуска;
				УказанаМинимальнаяЕдиница = Истина;
				
			КонецЕсли;
				
			КоэффициентМинимальнойЕдиницы = НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура.Номенклатура, МинимальнаяЕдиница);
			
			Упаковки = КэшированныеЗначения.Упаковки.Получить(Номенклатура.Номенклатура);
			Если Упаковки = Неопределено Тогда
				
				Упаковки = Новый Массив();
				
				// Основная единица учета
				Если ЗначениеЗаполнено(Номенклатура.ОсновнаяЕдиницаУчета) Тогда
					ПараметрыУпаковки = Новый Структура;
					ПараметрыУпаковки.Вставить("Упаковка", Номенклатура.ЕдиницаИзмерения);
					ПараметрыУпаковки.Вставить("Коэффициент", НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура.Номенклатура, Номенклатура.ЕдиницаИзмерения));
					Упаковки.Добавить(ПараметрыУпаковки);
				КонецЕсли;
				
				УпаковкиНоменклатуры = НоменклатураСервер.ПолучитьУпаковкиНоменклатуры(Номенклатура.Номенклатура);
				// Прочие упаковки
				Для каждого Упаковка Из УпаковкиНоменклатуры Цикл
					
					Если УказанаМинимальнаяЕдиница И Упаковка = МинимальнаяЕдиница Тогда
						Прервать;
					КонецЕсли;
					
					ПараметрыУпаковки = Новый Структура;
					ПараметрыУпаковки.Вставить("Упаковка", Упаковка);
					ПараметрыУпаковки.Вставить("Коэффициент", НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура.Номенклатура, Упаковка));
					
					Если СтрокаТребования.ЕдиницаИзмеренияЗаказа = Упаковка Тогда
						Упаковки.Вставить(0, ПараметрыУпаковки);
					Иначе
						Упаковки.Добавить(ПараметрыУпаковки);
					КонецЕсли;
					
				КонецЦикла;
				
				// Минимальная единица учета
				ПараметрыУпаковки = Новый Структура;
				ПараметрыУпаковки.Вставить("Упаковка", МинимальнаяЕдиница);
				ПараметрыУпаковки.Вставить("Коэффициент", НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура.Номенклатура, МинимальнаяЕдиница));
				Если СтрокаТребования.ЕдиницаИзмеренияЗаказа = МинимальнаяЕдиница Тогда
					Упаковки.Вставить(0, ПараметрыУпаковки);
				Иначе
					Упаковки.Добавить(ПараметрыУпаковки);
				КонецЕсли;
				
				КэшированныеЗначения.Упаковки.Вставить(Номенклатура.Номенклатура, Упаковки);
				
			КонецЕсли;
			
			Для Каждого ОстатокНоменклатуры Из ОстаткиНоменклатуры Цикл
				
				Если КоличествоВБазовыхЕдиницах <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				КоличествоОстаток = ОстатокНоменклатуры.Остаток;
				Если КоличествоОстаток <= 0 Или (УказанаМинимальнаяЕдиница И КоличествоОстаток < КоэффициентМинимальнойЕдиницы) Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоНовойСтроки = 0;
				
				Если УказанаМинимальнаяЕдиница Тогда
					// Будем подбирать количество в базовых единицах кратное коэффициенту минимальной упаковки.
					Если КоличествоОстаток > КоличествоВБазовыхЕдиницах Тогда
						Если КоличествоВБазовыхЕдиницах % КоэффициентМинимальнойЕдиницы = 0 Тогда
							// Если количествоВБазовыхЕдиницах кратно коэффициенту мин. единицы то берем это количество.
							КоличествоНовойСтроки = КоличествоВБазовыхЕдиницах;
						Иначе
							// Иначе берем количество кратное коэффициенту мин. упаковки.
							КоличествоБазовыхВМинЕдинице = (Цел(КоличествоВБазовыхЕдиницах / КоэффициентМинимальнойЕдиницы) + 1) * КоэффициентМинимальнойЕдиницы;
							Если КоличествоОстаток >= КоличествоБазовыхВМинЕдинице Тогда
								КоличествоНовойСтроки = КоличествоБазовыхВМинЕдинице
							Иначе
								КоличествоНовойСтроки = Цел(КоличествоВБазовыхЕдиницах / КоэффициентМинимальнойЕдиницы) * КоэффициентМинимальнойЕдиницы;
							КонецЕсли;
						КонецЕсли;
					Иначе
						// Берем количество кратное коэффициенту мин. упаковки.
						КоличествоНовойСтроки = Цел(КоличествоОстаток / КоэффициентМинимальнойЕдиницы) * КоэффициентМинимальнойЕдиницы;
					КонецЕсли;
					
				Иначе
					
					Если КоличествоОстаток > КоличествоВБазовыхЕдиницах Тогда
						КоличествоНовойСтроки = КоличествоВБазовыхЕдиницах;
					Иначе
						КоличествоНовойСтроки = КоличествоОстаток;
					КонецЕсли;
					
				КонецЕсли;
				
				КоличествоВБазовыхЕдиницах = КоличествоВБазовыхЕдиницах - КоличествоНовойСтроки;
				ОстатокНоменклатуры.Остаток	= ОстатокНоменклатуры.Остаток - КоличествоНовойСтроки;
				
				Для Каждого СтруктураУпаковки Из Упаковки Цикл
					
					Если КоличествоНовойСтроки = 0 Тогда
						Прервать;
					КонецЕсли;
					
					КоличествоУпаковок = Цел(КоличествоНовойСтроки);
					Если Не КоличествоУпаковок = 0 Или СтруктураУпаковки.Упаковка = МинимальнаяЕдиница Тогда
						
						НоваяСтрока = ТаблицаПодбора.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ОстатокНоменклатуры);
						
						НоваяСтрока.ЕдиницаИзмерения = СтруктураУпаковки.Упаковка;
						НоваяСтрока.Коэффициент = СтруктураУпаковки.Коэффициент;
						НоваяСтрока.Количество = ?(СтруктураУпаковки.Упаковка = МинимальнаяЕдиница, КоличествоНовойСтроки, КоличествоУпаковок);
						
						НоваяСтрока.Заказ = СтрокаТребования.Заказ;
						НоваяСтрока.КодСтроки = СтрокаТребования.КодСтроки;
						НоваяСтрока.НоменклатураЗаказа = СтрокаТребования.НоменклатураЗаказа;
						НоваяСтрока.ЕдиницаИзмеренияЗаказа = СтрокаТребования.ЕдиницаИзмеренияЗаказа;
						НоваяСтрока.КоэффициентЕдиницыЗаказа = Коэффициент;
						НоваяСтрока.КоличествоВЕдиницахЗаказа = НоваяСтрока.Количество / Коэффициент;
						
						КоличествоНовойСтроки = КоличествоНовойСтроки - НоваяСтрока.Количество;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если КоличествоВБазовыхЕдиницах = 0 Тогда
				КоличествоТребования = 0;
			Иначе
				КоличествоТребования = КоличествоВБазовыхЕдиницах;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоТребования > 0 Тогда
			ТекстСообщения = НСтр("ru='Для строки требования ""%СтрокаТребования%"" получилось подобрать %Количество% из %КоличествоЗаказа%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаТребования%", СокрЛП(СтрокаТребования.НоменклатураЗаказа) + "(" + СокрЛП(СтрокаТребования.ЕдиницаИзмеренияЗаказа) + ")");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", СтрокаТребования.Количество - КоличествоТребования);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоЗаказа%", СтрокаТребования.Количество);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПодбора;
	
КонецФункции

// Возвращает количество базовых единиц номенклатуры в единице измерения заказа
//
// Параметры:
//  НоменклатураЗаказа - СправочникСсылка.КлючиАналитикиОписанияОтбораНоменклатуры
//  ЕдиницаИзмерения   - СправочникСсылка.ЕдиницыИзмерения
//  Номенклатура       - СправочникСсылка.Номенклатура
//
// Возвращаемое значение:
//  Число
//
Функция КоэффициентЕдиницыЗаказа(НоменклатураЗаказа, ЕдиницаИзмерения, Номенклатура) Экспорт
	
	ПараметрыОтбора = РасширеннаяАналитикаУчета.ПолучитьЗначенияАналитики(НоменклатураЗаказа);
	
	Если НоменклатураСоответствуетПараметрамОтбора(Номенклатура, ПараметрыОтбора) Тогда
		Возврат НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура, ЕдиницаИзмерения, 0);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает единицы измерения номенклатуры по отбору
//
// Параметры:
//  ПараметрыОтбора - Структура
//    Номенклатура           - СправочникСсылка.Номенклатура
//    ТорговоеНаименование   - СправочникСсылка.ТорговыеНаименования
//    ДействующиеВеществаМНН - СправочникСсылка.ДействующиеВеществаМНН
//    ФормаВыпуска           - СправочникСсылка.ФормыВыпуска
//
// Возвращаемое значение:
//  Массив(СправочникСсылка.ЕдиницыИзмерения)
//
Функция ЕдиницыИзмеренияПоОтбору(ПараметрыОтбора) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтбора.Номенклатура) Тогда
		Возврат НоменклатураСервер.ЕдиницыИзмерения(ПараметрыОтбора.Номенклатура);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает список единиц измерения соответствующих отбору
//
// Параметры:
//  ПараметрыОтбора - Структура - должна содержать поле Номенклатура, если указанное поле не заполнено,
//                                то должны присутствовать поля ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска.
//
// Возвращаемое значение:
//  Массив - список единиц измерения
//
Функция ЕдиницаИзмеренияПоОтбору(ПараметрыОтбора) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтбора.Номенклатура) Тогда
		Возврат НоменклатураСервер.ОсновнаяЕдиницаИзмерения(ПараметрыОтбора.Номенклатура);
	КонецЕсли;
	
	Возврат ПараметрыОтбора.Номенклатура.ЕдиницаИзмерения;
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Функция НастроитьЗапросОстатковПоПараметрам(ТекстЗапросаОстатков, ПараметрыОстатков)
	
	ДатаОстатков = ПараметрыОстатков.ДатаОстатков;
	
	ЗапросОстатков = Новый СхемаЗапроса;
	ЗапросОстатков.УстановитьТекстЗапроса(ТекстЗапросаОстатков);
	ПоляЗапроса = ЗапросОстатков.ПакетЗапросов[0].Колонки;
	Если ЗначениеЗаполнено(ДатаОстатков) Тогда
		
		ПоляЗапроса.Удалить(ПоляЗапроса.Индекс(ПоляЗапроса.Найти("Остаток")));
		ПоляЗапроса.Найти("ОстатокНаДату").Псевдоним = "Остаток";
	Иначе
		ПоляЗапроса.Удалить(ПоляЗапроса.Индекс(ПоляЗапроса.Найти("ОстатокНаДату")));
		ЗапросОстатков.ПакетЗапросов[0].Операторы[0].Источники.Удалить("ОстаткиНаДату");
	КонецЕсли;
	
	Оператор = ЗапросОстатков.ПакетЗапросов[0].Операторы[0];
	
	ИсточникОстатков = Оператор.Источники.НайтиПоПсевдониму("ТоварыНаСкладах");
	Параметры = ИсточникОстатков.Источник.Параметры[1];
	
	Возврат ЗапросОстатков.ПолучитьТекстЗапроса();
	
КонецФункции

Функция НоменклатураСоответствуетПараметрамОтбора(Номенклатура, ПараметрыОтбора)
	
	Если Номенклатура = ПараметрыОтбора.Номенклатура Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
