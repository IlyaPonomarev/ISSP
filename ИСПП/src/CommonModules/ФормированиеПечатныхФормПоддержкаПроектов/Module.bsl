
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Возвращает строку с именами колонок, переданной таблицы, разделенных запятыми.
//
// Параметры:
//  Таблица - РезультатЗапроса,
//            ВыборкаИзРезультатаЗапроса,
//            ТаблицаЗначений,
//            СтрокаТаблицыЗначений - таблица, из которой будут получены имена колонок.
//
Функция ПолучитьИменаКолонокТаблицы(Таблица) Экспорт
	
	Если ТипЗнч(Таблица) = Тип("ВыборкаИзРезультатаЗапроса")
	 Или ТипЗнч(Таблица) = Тип("СтрокаТаблицыЗначений") Тогда
		Поля = Таблица.Владелец().Колонки;
	ИначеЕсли ТипЗнч(Таблица) = Тип("РезультатЗапроса")
		  Или ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		
		Поля = Таблица.Колонки;
	КонецЕсли;
	
	ИменаКолонок = "";
	Для Каждого Поле Из Поля Цикл
		ИменаКолонок = ИменаКолонок + "," + Поле.Имя;
	КонецЦикла;
	
	Возврат Сред(ИменаКолонок, 2);
	
КонецФункции

// Возвращает полный путь к макету в формате:
//  "Документ.<ИмяДокумента>.<ИмяМакета>"
//  "Обработка.<ИмяОбработки>.<ИмяМакета>"
//  "ОбщийМакет.<ИмяМакета>".
//
// Параметры:
//  МетаданныеМакета - ОбъектМетаданных: Макет - полное имя которого будет использовано
//                     для формирования полного пути к макету в необходимом формате.
//
Функция ПутьКМакету(МетаданныеМакета) Экспорт
	
	Возврат СтрЗаменить(МетаданныеМакета.ПолноеИмя(), ".Макет.", ".");
	
КонецФункции

// Выводит область, полученную из макета по имени, в результирующий табличный документ.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумента - результирующий табличный документ.
//  Макет             - ТабличныйДокумента - макет объекта печати.
//  ИмяОбласти        - Строка             - имя области макета объекта печати.
//  ДанныеОбласти     - Структура, СтрокаТаблицыЗначений - данные из которых будут заполнены параметры области макета.
//  Уровень           - Число              - уровень используется для автоматической группировки строк табличного документа.
//
Процедура ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, ИмяОбласти, ДанныеОбласти = Неопределено, Уровень = Неопределено) Экспорт
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ВывестиТабличныйДокумент(ТабличныйДокумент, Область, ДанныеОбласти, Уровень)
	
КонецПроцедуры

// Присоединяет область, полученную из макета по имени, в результирующий табличный документ.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумента - результирующий табличный документ.
//  Макет             - ТабличныйДокумента - макет объекта печати.
//  ИмяОбласти        - Строка             - имя области макета объекта печати.
//  ДанныеОбласти     - Структура, СтрокаТаблицыЗначений - данные из которых будут заполнены параметры области макета.
//  Уровень           - Число              - уровень используется для автоматической группировки строк табличного документа.
//
Процедура ПрисоединитьОбластьПоИмени(ТабличныйДокумент, Макет, ИмяОбласти, ДанныеОбласти = Неопределено, Уровень = Неопределено) Экспорт
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Если ДанныеОбласти <> Неопределено Тогда
		Область.Параметры.Заполнить(ДанныеОбласти);
	КонецЕсли;
	
	Если Уровень = Неопределено Тогда
		ТабличныйДокумент.Присоединить(Область);
	Иначе
		ТабличныйДокумент.Присоединить(Область, Уровень);
	КонецЕсли;
	
КонецПроцедуры

// Выводит область, полученную из макета по имени, добавляя штрихкод,
// сформированный по передаваемой в данных области ссылке.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумента - результирующий табличный документ.
//  Макет             - ТабличныйДокумента - макет объекта печати.
//  ИмяОбласти        - Строка             - имя области макета объекта печати.
//  ДанныеОбласти     - Структура, СтрокаТаблицыЗначений - данные из которых будут заполнены параметры области макета.
//  Уровень           - Число              - уровень используется для автоматической группировки строк табличного документа.
//
Процедура ВывестиОбластьСоШтрихкодом(ТабличныйДокумент, Макет, ИмяОбласти, ДанныеОбласти, Уровень = Неопределено) Экспорт
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ДанныеОбласти.Ссылка, ТабличныйДокумент, Макет, Область);
	
	ВывестиТабличныйДокумент(ТабличныйДокумент, Область, ДанныеОбласти, Уровень);
	
КонецПроцедуры

// Формирует область табличного документа по имени и данным области,
// и помещает ее в конец массива выводимых областей.
//
// Параметры:
//  Макет          - ТабличныйДокумента - макет объекта печати.
//  ИмяОбласти     - Строка             - имя области макета объекта печати.
//  МассивОбластей - Массив             - (возвращаемый) массив выводимых областей.
//  ДанныеОбласти  - Структура, СтрокаТаблицыЗначений - данные из которых будут заполнены параметры области макета.
//
Процедура ДобавитьОбластьВМассивПоОписанию(Макет, ИмяОбласти, МассивОбластей, ДанныеОбласти = Неопределено) Экспорт
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Если ДанныеОбласти <> Неопределено Тогда
		Область.Параметры.Заполнить(ДанныеОбласти);
	КонецЕсли;
	
	МассивОбластей.Добавить(Область);
	
КонецПроцедуры

// Выполняет накопление итоговых показателей в структуре, для дальнейшего заполнения параметров области.
//
// Параметры:
//  Данные            - Структура, ВыборкаИзРезультатаЗапроса - объекты, из которых получаются данные.
//  РассчитанныеИтоги - Структура - (выходной параметр) заполняемая структура.
//
// Пример:
//  РассчитанныеИтоги = Новый Структура("ИтогоКоличество, ИтогоСумма", 0, 0);
//  Пока Выборка.Следующий() Цикл
//  	РассчитатьИтоги(РассчитанныеИтоги, Выборка);
//  КонецЦикла;
//
// Процедура на каждой итерации будет получать Выборка.Количество и Выборка.Сумма
// и прибавлять к значениям элементов структуры с соответствующими именами.
//
Процедура РассчитатьИтоги(Данные, РассчитанныеИтоги) Экспорт
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Буфер = Данные;
	ИначеЕсли ТипЗнч(Данные) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Буфер = Новый Структура;
		ОбластьПоиска = Данные.Владелец().Колонки;
		Для Каждого Итог Из РассчитанныеИтоги Цикл
			КлючПоиска = Итог.Ключ;
			Если ОбластьПоиска.Найти(КлючПоиска) <> Неопределено Тогда
				Буфер.Вставить(КлючПоиска, Данные[КлючПоиска]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Итог Из РассчитанныеИтоги Цикл
		КлючПоиска = Итог.Ключ;
		Значение = Неопределено;
		Если Буфер.Свойство(КлючПоиска, Значение) Тогда
			РассчитанныеИтоги.Вставить(КлючПоиска, Итог.Значение + Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Записывает нули во все значения переданной структуры итогов.
//
// Параметры:
//  ИтоговыеДанные - Структура - в значения которой будут записаны нули.
//
Процедура ОбнулитьИтоги(ИтоговыеДанные) Экспорт
	
	Для Каждого Итог Из ИтоговыеДанные Цикл
		ИтоговыеДанные[Итог.Ключ] = 0;
	КонецЦикла;
	
КонецПроцедуры

// Увеличивает счетчик номера в структуре номеров.
//
// Параметры:
//  Нумерация            - Структура - содержащая накопленные параметры нумерации.
//  ИменаКлючейНумерации - Строка - имена ключей нумерации.
//
Процедура УвеличитьНомер(Нумерация, Знач ИменаКлючейНумерации) Экспорт
	
	ИменаКлючейНумерации = СтрРазделить(ИменаКлючейНумерации, ", ", Ложь);
	
	Для Каждого ИмяКлюча Из ИменаКлючейНумерации Цикл
		Нумерация[ИмяКлюча] = Нумерация[ИмяКлюча] + 1;
	КонецЦикла;
	
КонецПроцедуры

// Сбрасывает счетчик нумерации к начальному номеру.
//
// Параметры:
//  Нумерация            - Структура - содержащая накопленные параметры нумерации.
//  ИменаКлючейНумерации - Строка - имена ключей нумерации.
//  НачальныйНомер       - Число - устанавливаемый номер.
//
Процедура УстановитьНачальныйНомер(Нумерация, Знач ИменаКлючейНумерации, НачальныйНомер = 0) Экспорт
	
	ИменаКлючейНумерации = СтрРазделить(ИменаКлючейНумерации, ", ", Ложь);
	
	Для Каждого ИмяКлюча Из ИменаКлючейНумерации Цикл
		Нумерация[ИмяКлюча] = НачальныйНомер;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры получения цен для печати по умолчанию.
//
// Возвращаемое значение:
//  Структура
//   * ИспользоватьЦеныПоВидуЦен       - Булево - Значение по умолчанию: Ложь.
//   * ТочноеСоответствиеЦеныПоВидуЦен - Булево - Значение по умолчанию: Истина.
//   * ИспользоватьЦеныПоСебестоимости - Булево - Значение по умолчанию: Ложь.
//
Функция ПараметрыПолученияЦен() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИспользоватьЦеныПоВидуЦен"      , Ложь);
	Параметры.Вставить("ТочноеСоответствиеЦеныПоВидуЦен", Истина);
	Параметры.Вставить("ИспользоватьЦеныПоСебестоимости", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// По параметрам получения цен, определяет указан ли хотя бы один источник цен.
//
// Параметры:
//  ПараметрыПолученияЦен - Структура - см. ФормированиеПечатныхФормПоддержкаПроектов.ПараметрыПолученияЦен.
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы один источник выбран.
//
Функция ВыбранИсточникПолученияЦен(ПараметрыПолученияЦен) Экспорт
	
	Возврат ПараметрыПолученияЦен.ИспользоватьЦеныПоВидуЦен
	    Или ПараметрыПолученияЦен.ИспользоватьЦеныПоСебестоимости;
	
КонецФункции

// Возвращает текст запроса цен для документов.
//
// Параметры:
//  ПараметрыПолученияЦен - Структура - см. ФормированиеПечатныхФормПоддержкаПроектов.ПараметрыПолученияЦен.
//
// Возвращаемое значение:
//  Строка - текст запроса цент для документов.
//
Функция ТекстЗапросаЦен(ПараметрыПолученияЦен) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.НомерСтроки                        КАК НомерСтроки,
	|	Товары.Документ                           КАК Документ,
	|	Товары.Организация                        КАК Организация,
	|	Товары.Склад                              КАК Склад,
	|	Товары.Номенклатура                       КАК Номенклатура,
	|	Товары.СерияНоменклатурыДляСебестоимости  КАК СерияНоменклатуры,
	|	Товары.ПартияДляСебестоимости             КАК Партия,
	|	Товары.ДатаПолученияЦены                  КАК ДатаПолученияЦены
	|ПОМЕСТИТЬ ЦеныПоСебестоимостиТовары
	|ИЗ
	|	втТовары КАК Товары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки               КАК НомерСтроки,
	|	Товары.Документ                  КАК Документ,
	|	Товары.Организация               КАК Организация,
	|	Товары.Склад                     КАК Склад,
	|	Товары.Номенклатура              КАК Номенклатура,
	|	Товары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	Товары.Партия                    КАК Партия,
	|	ВЫБОР
	|		КОГДА СУММА(СебестоимостьТоваров.Количество) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(СебестоимостьТоваров.СтоимостьРегл) КАК ЧИСЛО(23, 10)) / СУММА(СебестоимостьТоваров.Количество)
	|	КОНЕЦ                          КАК Цена
	|ПОМЕСТИТЬ ЦеныПоСебестоимости
	|ИЗ
	|	ЦеныПоСебестоимостиТовары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК АналитикиВидаУчета
	|	ПО
	|		Товары.Организация = АналитикиВидаУчета.Организация
	|		И Товары.Склад = АналитикиВидаУчета.Склад
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикиУчетаНоменклатуры
	|	ПО
	|		Товары.Номенклатура = АналитикиУчетаНоменклатуры.Номенклатура
	|		И Товары.СерияНоменклатуры = АналитикиУчетаНоменклатуры.СерияНоменклатуры
	|		И Товары.Партия = АналитикиУчетаНоменклатуры.Партия
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|	ПО
	|		СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И СебестоимостьТоваров.Активность
	|		И СебестоимостьТоваров.АналитикаВидаУчета = АналитикиВидаУчета.КлючАналитики
	|		И СебестоимостьТоваров.АналитикаУчетаНоменклатуры = АналитикиУчетаНоменклатуры.КлючАналитики
	//|		И СебестоимостьТоваров.ДокументДвижения = Товары.Документ
	|		И СебестоимостьТоваров.Регистратор = Товары.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|   Товары.НомерСтроки,
	|	Товары.Документ,
	|	Товары.Организация,
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.СерияНоменклатуры,
	|	Товары.Партия
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	Товары.Документ                КАК Документ,
	|	Товары.НомерСтроки             КАК НомерСтроки,
	|	ЦеныПоСебестоимости.Цена	   КАК Цена
	|ИЗ
	|	втТовары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ЦеныПоСебестоимости КАК ЦеныПоСебестоимости
	|	ПО
	|		Товары.Документ = ЦеныПоСебестоимости.Документ
	|		И Товары.Организация = ЦеныПоСебестоимости.Организация
	|		И Товары.Склад =ЦеныПоСебестоимости.Склад
	|		И Товары.Номенклатура = ЦеныПоСебестоимости.Номенклатура
	|		И Товары.СерияНоменклатурыДляСебестоимости = ЦеныПоСебестоимости.СерияНоменклатуры
	|		И Товары.ПартияДляСебестоимости = ЦеныПоСебестоимости.Партия
	|";
	

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Индекс = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	
	ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов[Индекс];
	ПоследнийЗапрос.Операторы.Удалить(0);
	
	Индекс = Индекс - 1;
	Пока Индекс >= 0 Цикл
		Если СтрНачинаетсяС(СхемаЗапроса.ПакетЗапросов[Индекс].ТаблицаДляПомещения, "ЦеныПоВидуЦен") Тогда
			СхемаЗапроса.ПакетЗапросов.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЦенБезНаправления(ПараметрыПолученияЦен) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.НомерСтроки                        КАК НомерСтроки,
	|	Товары.Документ                           КАК Документ,
	|	Товары.Организация                        КАК Организация,
	|	Товары.Склад                              КАК Склад,
	|	Товары.Номенклатура                       КАК Номенклатура,
	|	Товары.СерияНоменклатурыДляСебестоимости  КАК СерияНоменклатуры,
	|	Товары.ПартияДляСебестоимости             КАК Партия,
	|	Товары.ДатаПолученияЦены                  КАК ДатаПолученияЦены
	|ПОМЕСТИТЬ ЦеныПоСебестоимостиТовары
	|ИЗ
	|	втТовары КАК Товары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки               КАК НомерСтроки,
	|	Товары.Документ                  КАК Документ,
	|	Товары.Организация               КАК Организация,
	|	Товары.Склад                     КАК Склад,
	|	Товары.Номенклатура              КАК Номенклатура,
	|	Товары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	Товары.Партия                    КАК Партия,
	|	ВЫБОР
	|		КОГДА СУММА(СебестоимостьТоваров.Количество) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(СебестоимостьТоваров.СтоимостьРегл) КАК ЧИСЛО(23, 10)) / СУММА(СебестоимостьТоваров.Количество)
	|	КОНЕЦ                          КАК Цена
	|ПОМЕСТИТЬ ЦеныПоСебестоимости
	|ИЗ
	|	ЦеныПоСебестоимостиТовары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК АналитикиВидаУчета
	|	ПО
	|		Товары.Организация = АналитикиВидаУчета.Организация
	|		И Товары.Склад = АналитикиВидаУчета.Склад
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикиУчетаНоменклатуры
	|	ПО
	|		Товары.Номенклатура = АналитикиУчетаНоменклатуры.Номенклатура
	|		И Товары.СерияНоменклатуры = АналитикиУчетаНоменклатуры.СерияНоменклатуры
	|		И Товары.Партия = АналитикиУчетаНоменклатуры.Партия
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|	ПО
	//|		СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		СебестоимостьТоваров.Активность
	|		И СебестоимостьТоваров.АналитикаВидаУчета = АналитикиВидаУчета.КлючАналитики
	|		И СебестоимостьТоваров.АналитикаУчетаНоменклатуры = АналитикиУчетаНоменклатуры.КлючАналитики
	//|		И СебестоимостьТоваров.ДокументДвижения = Товары.Документ
	|		И СебестоимостьТоваров.Регистратор = Товары.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|   Товары.НомерСтроки,
	|	Товары.Документ,
	|	Товары.Организация,
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.СерияНоменклатуры,
	|	Товары.Партия
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	Товары.Документ                КАК Документ,
	|	Товары.НомерСтроки             КАК НомерСтроки,
	|	ЦеныПоСебестоимости.Цена	   КАК Цена
	|ИЗ
	|	втТовары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ЦеныПоСебестоимости КАК ЦеныПоСебестоимости
	|	ПО
	|		Товары.Документ = ЦеныПоСебестоимости.Документ
	|		И Товары.Организация = ЦеныПоСебестоимости.Организация
	|		И Товары.Склад =ЦеныПоСебестоимости.Склад
	|		И Товары.Номенклатура = ЦеныПоСебестоимости.Номенклатура
	|		И Товары.СерияНоменклатурыДляСебестоимости = ЦеныПоСебестоимости.СерияНоменклатуры
	|		И Товары.ПартияДляСебестоимости = ЦеныПоСебестоимости.Партия
	|";
	

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Индекс = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	
	ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов[Индекс];
	ПоследнийЗапрос.Операторы.Удалить(0);
	
	Индекс = Индекс - 1;
	Пока Индекс >= 0 Цикл
		Если СтрНачинаетсяС(СхемаЗапроса.ПакетЗапросов[Индекс].ТаблицаДляПомещения, "ЦеныПоВидуЦен") Тогда
			СхемаЗапроса.ПакетЗапросов.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();

	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса дополненный текстом запроса цен и итоговой выборкой шапки и табличной части.
//
// Параметры:
//  ТекстЗапроса          - Строка - текст запроса, в который нужно добавить запрос цен.
//  ПараметрыПолученияЦен - Структура - см. ФормированиеПечатныхФормПоддержкаПроектов.ПараметрыПолученияЦен.
//
// Возвращаемое значение:
//  Строка - текст запроса, дополненный ценами и выборкой шапки и товаров.
//
Функция ТекстЗапросаСЦенами(ТекстЗапроса, ПараметрыПолученияЦен = Неопределено) Экспорт
	
	Если ПараметрыПолученияЦен = Неопределено Тогда
		ПараметрыПолученияЦен = ПараметрыПолученияЦен();
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ВыбранИсточникПолученияЦен(ПараметрыПолученияЦен) Тогда
		ТекстЗапросаЦен = ТекстЗапросаЦен(ПараметрыПолученияЦен);
		СхемаЗапросаЦен = Новый СхемаЗапроса;
		СхемаЗапросаЦен.УстановитьТекстЗапроса(ТекстЗапросаЦен);
		
		Для Каждого ЗапросПакета Из СхемаЗапросаЦен.ПакетЗапросов Цикл
			Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
			Запрос.УстановитьТекстЗапроса(ЗапросПакета.ПолучитьТекстЗапроса());
		КонецЦикла;
	Иначе
		Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		Запрос.УстановитьТекстЗапроса("
		|ВЫБРАТЬ
		|	NULL КАК Документ,
		|	0    КАК НомерСтроки,
		|	0    КАК Цена
		|ПОМЕСТИТЬ ЦеныПоСебестоимости
		|");
	КонецЕсли;
	
	Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Запрос.УстановитьТекстЗапроса("
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	втШапка");
	
	СхемаЗапроса.УстановитьТекстЗапроса(СхемаЗапроса.ПолучитьТекстЗапроса() + ";
	|ВЫБРАТЬ
	|	Товары.*,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК ЧИСЛО(23,10)) КАК Цена,
	|	ВЫРАЗИТЬ(Товары.Количество * ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК ЧИСЛО(23,10)) КАК Сумма
	|ИЗ
	|	втТовары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ЦеныПоСебестоимости КАК ЦеныНоменклатуры
	|	ПО
	|		Товары.Документ = ЦеныНоменклатуры.Документ
	|		И Товары.НомерСтроки = ЦеныНоменклатуры.НомерСтроки
	|УПОРЯДОЧИТЬ ПО
	|	Товары.Документ,
	|	Товары.НомерСтроки
	|ИТОГИ ПО
	|	Товары.Документ
	|");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Функция ТекстЗапросаСЦенамиБезНаправления(ТекстЗапроса, ПараметрыПолученияЦен = Неопределено) Экспорт
	
	Если ПараметрыПолученияЦен = Неопределено Тогда
		ПараметрыПолученияЦен = ПараметрыПолученияЦен();
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ВыбранИсточникПолученияЦен(ПараметрыПолученияЦен) Тогда
		ТекстЗапросаЦен = ТекстЗапросаЦенБезНаправления(ПараметрыПолученияЦен);
		СхемаЗапросаЦен = Новый СхемаЗапроса;
		СхемаЗапросаЦен.УстановитьТекстЗапроса(ТекстЗапросаЦен);
		
		Для Каждого ЗапросПакета Из СхемаЗапросаЦен.ПакетЗапросов Цикл
			Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
			Запрос.УстановитьТекстЗапроса(ЗапросПакета.ПолучитьТекстЗапроса());
		КонецЦикла;
	Иначе
		Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		Запрос.УстановитьТекстЗапроса("
		|ВЫБРАТЬ
		|	NULL КАК Документ,
		|	0    КАК НомерСтроки,
		|	0    КАК Цена
		|ПОМЕСТИТЬ ЦеныПоСебестоимости
		|");
	КонецЕсли;
	
	Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Запрос.УстановитьТекстЗапроса("
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	втШапка");
	
	СхемаЗапроса.УстановитьТекстЗапроса(СхемаЗапроса.ПолучитьТекстЗапроса() + ";
	|ВЫБРАТЬ
	|	Товары.*,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК ЧИСЛО(23,10)) КАК Цена,
	|	ВЫРАЗИТЬ(Товары.Количество * ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК ЧИСЛО(23,10)) КАК Сумма
	|ИЗ
	|	втТовары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ЦеныПоСебестоимости КАК ЦеныНоменклатуры
	|	ПО
	|		Товары.Документ = ЦеныНоменклатуры.Документ
	|		И Товары.НомерСтроки = ЦеныНоменклатуры.НомерСтроки
	|УПОРЯДОЧИТЬ ПО
	|	Товары.Документ,
	|	Товары.НомерСтроки
	|ИТОГИ ПО
	|	Товары.Документ
	|");
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ВывестиТабличныйДокумент(ТабличныйДокумент, Область, ДанныеОбласти, Уровень)
	
	Если ДанныеОбласти <> Неопределено Тогда
		Область.Параметры.Заполнить(ДанныеОбласти);
	КонецЕсли;
	
	Если Уровень = Неопределено Тогда
		ТабличныйДокумент.Вывести(Область);
	Иначе
		ТабличныйДокумент.Вывести(Область, Уровень);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
