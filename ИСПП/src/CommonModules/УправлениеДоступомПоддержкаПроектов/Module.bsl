
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Создает временную таблицу "ЗначенияДоступа" со значениями доступа, разрешающих доступ.
//
// Поддерживается только для случая, когда
//   ВидДоступаБезГруппЗначенияДоступа = Истина.
//
// Параметры:
//  ТаблицаОбъекта          - таблицы объектов для которых определяются значения доступа
//  ТипЗначенияДоступа      - Тип ссылки.
//  МенеджерВременныхТаблиц - менеджер временных таблиц где будет создана временная таблица со значениями доступа.
//
Процедура ЗначенияДоступаРазрешающиеИзменениеОбъекта(Знач ТаблицаОбъекта, Знач ТипЗначенияДоступа, МенеджерВременныхТаблиц) Экспорт
	
	ЗаголовокОшибки =
		НСтр("ru = 'Ошибка в процедуре ЗначенияДоступаРазрешающиеИзменениеОбъекта
		           |общего модуля УправлениеДоступомПоддержкаПроектов.'");
	
	СвойстваГрупп = СвойстваЗначенияДоступа(ТипЗначенияДоступа, ЗаголовокОшибки);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей()
	 Или Не УправлениеДоступомСлужебный.ВидДоступаИспользуется(СвойстваГрупп.ВидДоступа)
	 Или Пользователи.ЭтоПолноправныйПользователь(,, Ложь)
	 Или ТаблицаОбъекта = Истина Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыЗначенийДоступа.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗначенияДоступа
		|ИЗ
		|	&ТаблицаЗначенийДоступа КАК ГруппыЗначенийДоступа
		|";
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, "&ТаблицаЗначенийДоступа", СвойстваГрупп.Таблица);
			
		Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступа.Ссылка
		|ПОМЕСТИТЬ ГруппыДоступаПользователя
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
		|			ГДЕ
		|				ТаблицыГруппДоступа.Таблица В (&ИдентификаторОбъектаДоступа)
		|				И ТаблицыГруппДоступа.ГруппаДоступа = ГруппыДоступа.Ссылка
		|				И ТаблицыГруппДоступа.Изменение = ИСТИНА)
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|					ПО
		|						СоставыГруппПользователей.Используется
		|							И СоставыГруппПользователей.Пользователь = &ТекущийПользователь
		|							И ГруппыДоступаПользователи.Пользователь = СоставыГруппПользователей.ГруппаПользователей
		|							И ГруппыДоступаПользователи.Ссылка = ГруппыДоступа.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияДоступа.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗначенияДоступа
		|ИЗ
		|	&ТаблицаЗначенийДоступа КАК ЗначенияДоступа
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ГруппыДоступаПользователя КАК ГруппыДоступаПользователя
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
		|					ПО
		|						ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступаПользователя.Ссылка
		|							И ЗначенияПоУмолчанию.ТипЗначенийДоступа = &ТипЗначенийДоступа
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|					ПО
		|						Значения.ГруппаДоступа = ГруппыДоступаПользователя.Ссылка
		|							И Значения.ЗначениеДоступа = ЗначенияДоступа.Ссылка
		|			ГДЕ
		|				ЕСТЬNULL(Значения.ЗначениеРазрешено, ЗначенияПоУмолчанию.ВсеРазрешены))
		|";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаЗначенийДоступа", СвойстваГрупп.Таблица);
		
		Запрос.УстановитьПараметр("ТипЗначенийДоступа",  СвойстваГрупп.ПустаяСсылкаТипаЗначений);
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		
		Если ТаблицаОбъекта = Неопределено Тогда
			ИдентификаторОбъектаДоступа = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗначенияДоступа);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТаблицыГруппДоступа.Изменение = ИСТИНА", "");
		ИначеЕсли ТипЗнч(ТаблицаОбъекта) = Тип("Массив")
				Или ТипЗнч(ТаблицаОбъекта) = Тип("ФиксированныйМассив") Тогда
			ИдентификаторОбъектаДоступа = Новый Массив;
			Для Каждого Таблица Из ТаблицаОбъекта Цикл
				ИдентификаторОбъектаДоступа.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Таблица));
			КонецЦикла;
		Иначе
			ИдентификаторОбъектаДоступа = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТаблицаОбъекта);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИдентификаторОбъектаДоступа", ИдентификаторОбъектаДоступа);
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Методы переопределения поведения подсистемы Управление доступом (см. УправлениеДоступомПереопределяемый )

// Заполняет виды доступа, используемые в ограничениях прав доступа.
// Виды доступа Пользователи и ВнешниеПользователи уже заполнены.
// Их можно удалить, если они не требуются для ограничения прав доступа.
//
// Параметры:
//  ВидыДоступа - ТаблицаЗначений - с колонками:
//   * Имя                    - Строка - имя используемое в описании поставляемых
//                                       профилей групп доступа и текстах ОДД.
//   * Представление          - Строка - представляет вид доступа в профилях и группах доступа.
//   * ТипЗначений            - Тип    - тип ссылки значений доступа.       Например, Тип("СправочникСсылка.Номенклатура").
//   * ТипГруппЗначений       - Тип    - тип ссылки групп значений доступа. Например, Тип("СправочникСсылка.ГруппыДоступаНоменклатуры").
//   * НесколькоГруппЗначений - Булево - Истина указывает, что для значения доступа (Номенклатуры),
//                                       можно выбрать несколько групп значений (Групп доступа номенклатуры).
//
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "Склады";
	ВидДоступа.Представление    = НСтр("ru = 'Склады'");
	ВидДоступа.ТипЗначений      = Тип("СправочникСсылка.Склады");
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "Подразделения";
	ВидДоступа.Представление    = НСтр("ru = 'Подразделения'");
	ВидДоступа.ТипЗначений      = Тип("СправочникСсылка.ПодразделенияОрганизаций");
	
	Если ВидыДоступа.Найти("Организации", "Имя") = Неопределено Тогда
		ВидДоступа = ВидыДоступа.Добавить();
		ВидДоступа.Имя = "Организации";
		ВидДоступа.Представление = НСтр("ru = 'Организации'");
		ВидДоступа.ТипЗначений   = Тип("СправочникСсылка.Организации");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет описания поставляемых профилей групп доступа и
// переопределяет параметры обновления профилей и групп доступа.
//
// Для автоматической подготовки содержимого процедуры следует воспользоваться инструментами
// разработчика для подсистемы Управление доступом.
//
// Параметры:
//  ОписанияПрофилей    - Массив - массив структур, в который нужно добавить описания.
//                        Пустая структура должна быть получена при помощи функции
//                        УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
//  ПараметрыОбновления - Структура - структура со свойствами:
//   * ОбновлятьИзмененныеПрофили - Булево - начальное значение Истина.
//   * ЗапретитьИзменениеПрофилей - Булево - начальное значение Истина.
//       Если установить Ложь, тогда поставляемые профили можно не только просматривать, но и редактировать.
//   * ОбновлятьГруппыДоступа     - Булево - начальное значение Истина.
//   * ОбновлятьГруппыДоступаСУстаревшимиНастройками - Булево - начальное значение Ложь.
//       Если установить Истина, то настройки значений, выполненные администратором для
//       вида доступа который был удален из профиля, будут также удалены из групп доступа.
//
Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	ДобавитьПрофиль_ПоддержкаПроектов(ОписанияПрофилей);
	
КонецПроцедуры

// Заполняет использование видов доступа в зависимости от функциональных опций конфигурации,
// например, ИспользоватьГруппыДоступаНоменклатуры.
//
// Параметры:
//  ВидДоступа    - Строка - имя вида доступа заданное в процедуре ПриЗаполненииВидовДоступа.
//  Использование - Булево - начальное значение Истина.
// 
Процедура ПриЗаполненииИспользованияВидаДоступа(ВидДоступа, Использование) Экспорт
	
	Если ВидДоступа = "ГруппыНоменклатуры" Тогда
		Использование = Константы.ИспользоватьГруппыДоступаНоменклатуры.Получить();
	КонецЕсли;
	
КонецПроцедуры

// Позволяет реализовать перезапись зависимых наборов значений доступа других объектов.
//
//  Вызывается из процедур:
// УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// УправлениеДоступомСлужебный.ЗаписатьЗависимыеНаборыЗначенийДоступа().
//
// Параметры:
//  Ссылка       - СправочникСсылка, ДокументСсылка, ... - ссылка на объект для которого
//                 записаны наборы значений доступа.
//
//  СсылкиНаЗависимыеОбъекты - Массив элементов типа СправочникСсылка, ДокументСсылка, ...
//                 Содержит ссылки на объекты с зависимыми наборами значений доступа
//                 Начальное значение - пустой массив.
//
Процедура ПриИзмененииНаборовЗначенийДоступа(Знач Ссылка, СсылкиНаЗависимыеОбъекты) Экспорт
	
	Если ОбщегоНазначения.ЭтоБизнесПроцесс(Ссылка.Метаданные()) Тогда
		
		// Обновим наборы значений доступа ведущего бизнес-процесса
		ВедущийБизнесПроцесс = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Ссылка,
				Новый Структура("ВедущийБизнесПроцесс", "ВедущаяЗадача.БизнесПроцесс")
			).ВедущийБизнесПроцесс;
		Если ЗначениеЗаполнено(ВедущийБизнесПроцесс) Тогда
			СсылкиНаЗависимыеОбъекты.Добавить(ВедущийБизнесПроцесс);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет зависимости прав доступа "подчиненного" объекта, например, задачи ЗадачаИсполнителя,
// от "ведущего" объекта, например,  бизнес-процесса Задание, которые отличаются от стандартных.
//
// Зависимости прав используются в стандартном шаблоне ограничения доступа для вида доступа "Объект":
// 1) стандартно при чтении "подчиненного" объекта
//    проверяется наличие права чтения "ведущего" объекта
//    и проверяется отсутствие ограничения чтения "ведущего" объекта;
// 2) стандартно при добавлении, изменении, удалении "подчиненного" объекта
//    проверяется наличие права изменения "ведущего" объекта
//    и проверяется отсутствие ограничения изменения "ведущего" объекта.
//
// Допускается только одно переназначение по сравнению со стандартным:
// в пункте "2)" вместо проверки права изменения "ведущего" объекта установить
// проверку права чтения "ведущего" объекта.
//
// Параметры:
//  ЗависимостиПрав - ТаблицаЗначений - с колонками:
//   * ВедущаяТаблица     - Строка - например, "БизнесПроцесс.Задание".
//   * ПодчиненнаяТаблица - Строка - например, "Задача.ЗадачаИсполнителя".
//
Процедура ПриЗаполненииЗависимостейПравДоступа(ЗависимостиПрав) Экспорт
	
	// Задача исполнителя может быть изменена, когда бизнес-процесс доступен только для чтения,
	// поэтому проверка права изменения и ограничения изменения не требуется,
	// а требуется более "мягкое" условие - проверка права и ограничения чтения.
	//
	// Для задач права добавление и удаление могут быть использованы только в привилегированном
	// режиме, поэтому для них проверять что-либо не требуется.
	Строка = ЗависимостиПрав.Добавить();
	Строка.ВедущаяТаблица     = "БизнесПроцесс.Исполнение";
	Строка.ПодчиненнаяТаблица = "Задача.ЗадачаИсполнителя";
	
	Строка = ЗависимостиПрав.Добавить();
	Строка.ВедущаяТаблица     = "БизнесПроцесс.ОбработкаВнутреннегоДокумента";
	Строка.ПодчиненнаяТаблица = "Задача.ЗадачаИсполнителя";
	
	Строка = ЗависимостиПрав.Добавить();
	Строка.ВедущаяТаблица     = "БизнесПроцесс.Согласование";
	Строка.ПодчиненнаяТаблица = "Задача.ЗадачаИсполнителя";
	
	Строка = ЗависимостиПрав.Добавить();
	Строка.ВедущаяТаблица     = "БизнесПроцесс.Утверждение";
	Строка.ПодчиненнаяТаблица = "Задача.ЗадачаИсполнителя";
	
КонецПроцедуры

// Заполняет состав видов доступа, используемых при ограничении прав объектов метаданных.
// Если состав видов доступа не заполнен, отчет "Права доступа" покажет некорректные сведения.
//
// Обязательно требуется заполнить только виды доступа, используемые в шаблонах ограничения доступа
// явно, а виды доступа, используемые в наборах значений доступа могут быть получены из текущего
// состояния регистра сведений НаборыЗначенийДоступа.
//
//  Для автоматической подготовки содержимого процедуры следует воспользоваться инструментами
// разработчика для подсистемы Управление доступом.
//
// Параметры:
//  Описание     - Строка - многострочная строка формата <Таблица>.<Право>.<ВидДоступа>[.Таблица объекта]
//                 Например, Документ.ПриходнаяНакладная.Чтение.Организации
//                           Документ.ПриходнаяНакладная.Чтение.Контрагенты
//                           Документ.ПриходнаяНакладная.Изменение.Организации
//                           Документ.ПриходнаяНакладная.Изменение.Контрагенты
//                           Документ.ЭлектронныеПисьма.Чтение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Изменение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Чтение.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Изменение.Объект.Документ.ЭлектронноеПисьмо
//                 Вид доступа Объект предопределен, как литерал. Этот вид доступа используется в
//                 шаблонах ограничений доступа, как "ссылка" на другой объект, по которому
//                 ограничивается текущий объект таблицы.
//                 Когда вид доступа "Объект" задан, также требуется задать типы таблиц,
//                 которые используются для этого вида доступа. Т.е. перечислить типы,
//                 которые соответствуют полю, использованному в шаблоне ограничения доступа
//                 в паре с видом доступа "Объект". При перечислении типов по виду доступа "Объект"
//                 нужно перечислить только те типы поля, которые есть у поля
//                 РегистрыСведений.НаборыЗначенийДоступа.Объект, остальные типы лишние.
// 
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Справочник.БанковскиеСчетаОрганизаций.Чтение.Организации
	|Справочник.ВидыНоменклатуры.Изменение.ГруппыНоменклатуры
	|Справочник.НаборыДополнительныхРеквизитовИСведений.Изменение.ГруппыНоменклатуры
	|Справочник.Номенклатура.Изменение.ГруппыНоменклатуры
	|Справочник.НоменклатураПрисоединенныеФайлы.Изменение.ГруппыНоменклатуры
	|Справочник.Организации.Чтение.Организации
	|Справочник.ПодразделенияОрганизаций.Чтение.Организации
	|Справочник.ПостоянноДействующиеКомиссии.Чтение.Организации
	|Справочник.ПоступлениеТоваровПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПоступлениеТоваровПрисоединенныеФайлы.Чтение.Подразделения
	|Справочник.ПоступлениеТоваровПрисоединенныеФайлы.Чтение.Склады
	|Справочник.ПоступлениеТоваровПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ПоступлениеТоваровПрисоединенныеФайлы.Изменение.Подразделения
	|Справочник.ПоступлениеТоваровПрисоединенныеФайлы.Изменение.Склады
	|Справочник.СпецификацияКДоговоруПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СпецификацияКДоговоруПрисоединенныеФайлы.Чтение.Подразделения
	|Справочник.СпецификацияКДоговоруПрисоединенныеФайлы.Изменение.Организации
	|Справочник.СпецификацияКДоговоруПрисоединенныеФайлы.Изменение.Подразделения
	|Документ.Партия.Чтение.Организации
	|Документ.Партия.Изменение.Организации
	|Документ.ПеремещениеТоваров.Чтение.Организации
	|Документ.ПеремещениеТоваров.Чтение.Склады
	|Документ.ПеремещениеТоваров.Изменение.Организации
	|Документ.ПеремещениеТоваров.Изменение.Склады
	|Документ.ПоступлениеТоваров.Чтение.Организации
	|Документ.ПоступлениеТоваров.Чтение.Подразделения
	|Документ.ПоступлениеТоваров.Чтение.Склады
	|Документ.ПоступлениеТоваров.Изменение.Организации
	|Документ.ПоступлениеТоваров.Изменение.Подразделения
	|Документ.СпецификацияКДоговору.Чтение.Организации
	|Документ.СпецификацияКДоговору.Чтение.Подразделения
	|Документ.СпецификацияКДоговору.Изменение.Организации
	|Документ.СпецификацияКДоговору.Изменение.Подразделения
	|Документ.УстановкаУничтожениеМСИ.Чтение.Организации
	|Документ.УстановкаУничтожениеМСИ.Чтение.Подразделения
	|Документ.УстановкаУничтожениеМСИ.Чтение.Склады
	|Документ.УстановкаУничтожениеМСИ.Изменение.Организации
	|Документ.УстановкаУничтожениеМСИ.Изменение.Подразделения
	|Документ.УстановкаУничтожениеМСИ.Изменение.Склады
	|РегистрСведений.ШтрихкодыНоменклатуры.Изменение.ГруппыНоменклатуры
	|РегистрНакопления.Закупки.Чтение.Организации
	|РегистрНакопления.Закупки.Чтение.Подразделения
	|РегистрНакопления.СвободныеОстатки.Чтение.Организации
	|РегистрНакопления.СвободныеОстатки.Чтение.Склады
	|РегистрНакопления.СебестоимостьТоваров.Чтение.Организации
	|РегистрНакопления.СебестоимостьТоваров.Чтение.Склады
	|РегистрНакопления.ТоварыНаСкладах.Чтение.Организации
	|РегистрНакопления.ТоварыНаСкладах.Чтение.Склады
	|";
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПрофиль_ПоддержкаПроектов(ОписанияПрофилей)
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Описание для заполнения профиля "Закупки".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = "93d7ef7d-971d-11e0-9dd2-00055d80a2d8";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Поддержка проектов'");
	// Прикладные права.
	ДополнитьПрофильОбязательнымиРолями(ОписаниеПрофиля);
	// Чтение и редактирование документов
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.ПоддержкаПроектовИзменение.Имя);

	// Виды доступа
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Склады");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Подразделения");
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Под этим профилем осуществляется работа с подсистемой поддержки проектов,
	                                      |поступление и перемещение изделий, регистрация состояния проекта.'");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ДополнитьПрофильОбязательнымиРолями(ОписаниеПрофиля)
	
	// Запуск 1С:Предприятия
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.ЗапускТонкогоКлиента.Имя);
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	КонецЕсли;
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.ЗапускВебКлиента.Имя);
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.СохранениеДанныхПользователя.Имя);
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.ВыводНаПринтерФайлБуферОбмена.Имя);
	
	// Базовые права
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.БазовыеПрава.Имя);
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.БазовыеПраваПП.Имя);
		
	// Файлы и папки файлов
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеПапокИФайлов.Имя);
	
	// Дополнительные сведения.
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.ИзменениеДополнительныхСведений.Имя);
	
	// Редактирование реквизитов объектов.
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.РедактированиеРеквизитовОбъектов.Имя);
	
	// Использование дополнительных отчетов и обработок.
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.ЧтениеДополнительныхОтчетовИОбработок.Имя);
	
	// Варианты отчетов
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеВариантовОтчетов.Имя);
		
	// Структура подчиненности
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.ПросмотрСвязанныеДокументы.Имя);
	
	// Базовая НСИ
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.ЧтениеКурсовВалют.Имя);
	
	// Версионирование объектов
	ОписаниеПрофиля.Роли.Добавить(Метаданные.Роли.ЧтениеВерсийОбъектов.Имя);
	
КонецПроцедуры

Функция СвойстваЗначенияДоступа(ТипЗначенияДоступа, ЗаголовокОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвойстваГрупп = Новый Структура;
	
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа();
	
	Если СвойстваВидовДоступа.ЗначенияДоступаСГруппами.ПоТипам.Получить(ТипЗначенияДоступа) <> Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОшибки + Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Для значений доступа типа ""%1""
			             |используются группы значений доступа.'"),
			Строка(ТипЗначенияДоступа));
	КонецЕсли;
	
	СвойстваВидаДоступа = СвойстваВидовДоступа.ПоТипамЗначений.Получить(ТипЗначенияДоступа);
	
	ТаблицаЗначенийДоступа = Метаданные.НайтиПоТипу(ТипЗначенияДоступа).ПолноеИмя();
	
	СвойстваГрупп.Вставить("ВидДоступа", СвойстваВидаДоступа.Имя);
	СвойстваГрупп.Вставить("Тип"       , ТипЗначенияДоступа);
	СвойстваГрупп.Вставить("Таблица"   , ТаблицаЗначенийДоступа);
	СвойстваГрупп.Вставить("ПустаяСсылкаТипаЗначений",
		ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТаблицаЗначенийДоступа).ПустаяСсылка());
	
	Возврат СвойстваГрупп;
	
КонецФункции

#КонецОбласти
