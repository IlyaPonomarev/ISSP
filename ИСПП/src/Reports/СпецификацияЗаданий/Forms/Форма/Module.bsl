
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//@skip-check unknown-form-parameter-access
	Параметры.Спецификация = Параметры.ПараметрКоманды[0]; 
	Спецификация = Параметры.Спецификация;
	ВосстановитьНастройки();
	ЗаполнитьТД();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СохранитьНастройки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать(Команда)
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ИсторияИзмененийСпецификацииЗаданий");    
    // Добавляем в коллекцию (тип массив) сформированный Табличный документ
    КоллекцияПечатныхФорм[0].ТабличныйДокумент = Результат; 
    // если требуется устанавливаем параметры печати
    КоллекцияПечатныхФорм[0].Экземпляров=1;
    КоллекцияПечатныхФорм[0].СинонимМакета = "История изменений спецификации заданий";  // используется для формирования имени файла при сохранении из общей формы печати документов
    // .. и выводим стандартной процедурой БСП
    УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	ЗаполнитьТД();
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СохранитьНастройки()  


КлючОбъекта = "ИсторияИзмененийСпецификации";
КлючНастроек = "ИсторияИзмененийСпецификации";
ОписаниеНастроек = "ИсторияИзмененийСпецификации";
ИмяПользователя = ПараметрыСеанса.ТекущийПользователь;


Настройки = Новый Соответствие;
Настройки.Вставить("ДатаНачала", НачалоПериода);
Настройки.Вставить("ДатаОкончания", КонецПериода);
Настройки.Вставить("Спецификация", Спецификация);

//@skip-check wrong-type-expression
ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройки, ОписаниеНастроек, ИмяПользователя);

КонецПроцедуры  




&НаСервере
Процедура ВосстановитьНастройки()

КлючОбъекта = "ИсторияИзмененийСпецификации";
КлючНастроек = "ИсторияИзмененийСпецификации";
ОписаниеНастроек = "ИсторияИзмененийСпецификации";
ИмяПользователя = ПараметрыСеанса.ТекущийПользователь;


//@skip-check wrong-type-expression
ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, ОписаниеНастроек, ИмяПользователя);

Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда  
	Если Спецификация = ЗначениеНастроек.Получить("Спецификация") Тогда
		//НачалоПериода = ЗначениеНастроек.Получить("ДатаНачала");
		//КонецПериода = ЗначениеНастроек.Получить("ДатаОкончания");  
	КонецЕсли;
КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьТД ()

	ТабДок = Новый ТабличныйДокумент;
	Макет = Отчеты.СпецификацияЗаданий.ПолучитьМакет("Макет");
	Результат.Очистить();
	//@skip-check use-non-recommended-method
	КонецПериода = ?(КонецПериода = Дата("00010101"),ТекущаяДата(),КонецПериода);  
	ЭтоПервый = Истина;  
	МаксДатаВерсии = ПолучитьДатуПоследнейВерсии();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсторияСпецификацийКДоговору.ДатаВерсии КАК ДатаВерсии,
	               |	ИсторияСпецификацийКДоговору.ИдентификаторСтроки КАК Номер,
	               |	ИсторияСпецификацийКДоговору.Номенклатура КАК Номенклатура,
	               |	ИсторияСпецификацийКДоговору.СпецификацияКДоговору КАК СпецификацияКДоговору,
	               |	ИсторияСпецификацийКДоговору.Количество КАК КолВо
	               |ИЗ
	               |	РегистрСведений.ИсторияСпецификацийКДоговору КАК ИсторияСпецификацийКДоговору
	               |ГДЕ
	               |	ИсторияСпецификацийКДоговору.СпецификацияКДоговору = &СпецификацияКДоговору
	               |	И ((ИсторияСпецификацийКДоговору.ДатаВерсии МЕЖДУ &НачалоПериода И &КонецПериода)
				   |	Или ИсторияСпецификацийКДоговору.ДатаВерсии = &МаксДата) 
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаВерсии УБЫВ,
	               |	Номер
	               |ИТОГИ ПО
	               |	ДатаВерсии"; 
	Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",КонецПериода);
	Запрос.УстановитьПараметр("СпецификацияКДоговору",Спецификация);
	Запрос.УстановитьПараметр("МаксДата",МаксДатаВерсии);
	
	ЗаголовокПрм = Новый Структура;
	ЗаголовокПрм.Вставить("НачалоПериода",НачалоПериода);
	ЗаголовокПрм.Вставить("КонецПериода",КонецПериода);
	
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Шапка1");  
	ОбластьМакетаВерсия = Макет.ПолучитьОбласть("Шапка2");
	ОбластьТЧ = Макет.ПолучитьОбласть("ТЧ");
	
	ОбластьМакетаЗаголовок.Параметры.Заполнить(ЗаголовокПрм);
	
	Результат.Присоединить(ОбластьМакетаЗаголовок);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ТабДок.Очистить();
		
		Если ЭтоПервый Тогда
			ОбластьМакетаВерсия.Параметры.Версия = "Сейчас в документе";
		Иначе
			ОбластьМакетаВерсия.Параметры.Версия = "Версия от " + Выборка.ДатаВерсии  
		КонецЕсли;
		
		ТабДок.Присоединить(ОбластьМакетаВерсия);
		
		ДетальныеЗаписи = Выборка.Выбрать();
		
		Пока ДетальныеЗаписи.Следующий() Цикл
			
			ОбластьТЧ.Параметры.Заполнить(ДетальныеЗаписи); 
			ОбластьТЧ.Параметры.Ссылка = ДетальныеЗаписи.Номенклатура.Ссылка;
			
			ТабДок.Присоединить(ОбластьТЧ); 
						
		КонецЦикла;
		
		Результат.Присоединить(ТабДок);	
		
		ЭтоПервый = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере	
Функция ПолучитьДатуПоследнейВерсии ()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ИсторияСпецификацийКДоговору.ДатаВерсии) КАК ДатаВерсии
	               |ИЗ
	               |	РегистрСведений.ИсторияСпецификацийКДоговору КАК ИсторияСпецификацийКДоговору
	               |ГДЕ
	               |	ИсторияСпецификацийКДоговору.СпецификацияКДоговору = &СпецификацияКДоговору"; 
	
	Запрос.УстановитьПараметр("СпецификацияКДоговору",Спецификация);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		//@skip-check use-non-recommended-method
		Возврат ТекущаяДата();
	Иначе
		Возврат РезультатЗапроса[0].ДатаВерсии; 
	КонецЕсли;
	
	
КонецФункции
#КонецОбласти
